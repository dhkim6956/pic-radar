CCS PCM C Compiler, Version 5.105Pd, 1               24-11-21 01:18
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\dhkim\Documents\GitHub\pic16f877a_SSD1306_i2c_radar_project\project\project.lst

               ROM used:   1346 words (16%)
                           Largest free fragment is 2048
               RAM used:   32 (9%) at main() level
                           41 (11%) worst case
               Stack used: 5 locations (4 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4CB
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   238
.................... #include <project.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
004F:  BCF    0A.0
0050:  BCF    0A.1
0051:  BCF    0A.2
0052:  ADDLW  56
0053:  BTFSC  03.0
0054:  INCF   0A,F
0055:  MOVWF  02
0056:  RETLW  00
0057:  RETLW  00
0058:  RETLW  00
0059:  RETLW  00
005A:  RETLW  00
005B:  RETLW  00
005C:  RETLW  00
005D:  RETLW  5F
005E:  RETLW  00
005F:  RETLW  00
0060:  RETLW  00
0061:  RETLW  07
0062:  RETLW  00
0063:  RETLW  07
0064:  RETLW  00
0065:  RETLW  14
0066:  RETLW  7F
0067:  RETLW  14
0068:  RETLW  7F
0069:  RETLW  14
006A:  RETLW  24
006B:  RETLW  2A
006C:  RETLW  7F
006D:  RETLW  2A
006E:  RETLW  12
006F:  RETLW  23
0070:  RETLW  13
0071:  RETLW  08
0072:  RETLW  64
0073:  RETLW  62
0074:  RETLW  36
0075:  RETLW  49
0076:  RETLW  56
0077:  RETLW  20
0078:  RETLW  50
0079:  RETLW  00
007A:  RETLW  08
007B:  RETLW  07
007C:  RETLW  03
007D:  RETLW  00
007E:  RETLW  00
007F:  RETLW  1C
0080:  RETLW  22
0081:  RETLW  41
0082:  RETLW  00
0083:  RETLW  00
0084:  RETLW  41
0085:  RETLW  22
0086:  RETLW  1C
0087:  RETLW  00
0088:  RETLW  2A
0089:  RETLW  1C
008A:  RETLW  7F
008B:  RETLW  1C
008C:  RETLW  2A
008D:  RETLW  08
008E:  RETLW  08
008F:  RETLW  3E
0090:  RETLW  08
0091:  RETLW  08
0092:  RETLW  00
0093:  RETLW  80
0094:  RETLW  70
0095:  RETLW  30
0096:  RETLW  00
0097:  RETLW  08
0098:  RETLW  08
0099:  RETLW  08
009A:  RETLW  08
009B:  RETLW  08
009C:  RETLW  00
009D:  RETLW  00
009E:  RETLW  60
009F:  RETLW  60
00A0:  RETLW  00
00A1:  RETLW  20
00A2:  RETLW  10
00A3:  RETLW  08
00A4:  RETLW  04
00A5:  RETLW  02
00A6:  RETLW  3E
00A7:  RETLW  51
00A8:  RETLW  49
00A9:  RETLW  45
00AA:  RETLW  3E
00AB:  RETLW  00
00AC:  RETLW  42
00AD:  RETLW  7F
00AE:  RETLW  40
00AF:  RETLW  00
00B0:  RETLW  72
00B1:  RETLW  49
00B2:  RETLW  49
00B3:  RETLW  49
00B4:  RETLW  46
00B5:  RETLW  21
00B6:  RETLW  41
00B7:  RETLW  49
00B8:  RETLW  4D
00B9:  RETLW  33
00BA:  RETLW  18
00BB:  RETLW  14
00BC:  RETLW  12
00BD:  RETLW  7F
00BE:  RETLW  10
00BF:  RETLW  27
00C0:  RETLW  45
00C1:  RETLW  45
00C2:  RETLW  45
00C3:  RETLW  39
00C4:  RETLW  3C
00C5:  RETLW  4A
00C6:  RETLW  49
00C7:  RETLW  49
00C8:  RETLW  31
00C9:  RETLW  41
00CA:  RETLW  21
00CB:  RETLW  11
00CC:  RETLW  09
00CD:  RETLW  07
00CE:  RETLW  36
00CF:  RETLW  49
00D0:  RETLW  49
00D1:  RETLW  49
00D2:  RETLW  36
00D3:  RETLW  46
00D4:  RETLW  49
00D5:  RETLW  49
00D6:  RETLW  29
00D7:  RETLW  1E
00D8:  RETLW  00
00D9:  RETLW  00
00DA:  RETLW  14
00DB:  RETLW  00
00DC:  RETLW  00
00DD:  RETLW  00
00DE:  RETLW  40
00DF:  RETLW  34
00E0:  RETLW  00
00E1:  RETLW  00
00E2:  RETLW  00
00E3:  RETLW  08
00E4:  RETLW  14
00E5:  RETLW  22
00E6:  RETLW  41
00E7:  RETLW  14
00E8:  RETLW  14
00E9:  RETLW  14
00EA:  RETLW  14
00EB:  RETLW  14
00EC:  RETLW  00
00ED:  RETLW  41
00EE:  RETLW  22
00EF:  RETLW  14
00F0:  RETLW  08
00F1:  RETLW  02
00F2:  RETLW  01
00F3:  RETLW  59
00F4:  RETLW  09
00F5:  RETLW  06
00F6:  RETLW  3E
00F7:  RETLW  41
00F8:  RETLW  5D
00F9:  RETLW  59
00FA:  RETLW  4E
00FB:  RETLW  7C
00FC:  RETLW  12
00FD:  RETLW  11
00FE:  RETLW  12
00FF:  RETLW  7C
0100:  RETLW  7F
0101:  RETLW  49
0102:  RETLW  49
0103:  RETLW  49
0104:  RETLW  36
0105:  RETLW  3E
0106:  RETLW  41
0107:  RETLW  41
0108:  RETLW  41
0109:  RETLW  22
010A:  RETLW  7F
010B:  RETLW  41
010C:  RETLW  41
010D:  RETLW  41
010E:  RETLW  3E
010F:  RETLW  7F
0110:  RETLW  49
0111:  RETLW  49
0112:  RETLW  49
0113:  RETLW  41
0114:  RETLW  7F
0115:  RETLW  09
0116:  RETLW  09
0117:  RETLW  09
0118:  RETLW  01
0119:  RETLW  3E
011A:  RETLW  41
011B:  RETLW  41
011C:  RETLW  51
011D:  RETLW  73
011E:  RETLW  7F
011F:  RETLW  08
0120:  RETLW  08
0121:  RETLW  08
0122:  RETLW  7F
0123:  RETLW  00
0124:  RETLW  41
0125:  RETLW  7F
0126:  RETLW  41
0127:  RETLW  00
0128:  RETLW  20
0129:  RETLW  40
012A:  RETLW  41
012B:  RETLW  3F
012C:  RETLW  01
012D:  RETLW  7F
012E:  RETLW  08
012F:  RETLW  14
0130:  RETLW  22
0131:  RETLW  41
0132:  RETLW  7F
0133:  RETLW  40
0134:  RETLW  40
0135:  RETLW  40
0136:  RETLW  40
0137:  RETLW  7F
0138:  RETLW  02
0139:  RETLW  1C
013A:  RETLW  02
013B:  RETLW  7F
013C:  RETLW  7F
013D:  RETLW  04
013E:  RETLW  08
013F:  RETLW  10
0140:  RETLW  7F
0141:  RETLW  3E
0142:  RETLW  41
0143:  RETLW  41
0144:  RETLW  41
0145:  RETLW  3E
0146:  RETLW  7F
0147:  RETLW  09
0148:  RETLW  09
0149:  RETLW  09
014A:  RETLW  06
014B:  RETLW  3E
014C:  RETLW  41
014D:  RETLW  51
014E:  RETLW  21
014F:  RETLW  5E
0150:  RETLW  7F
0151:  RETLW  09
0152:  RETLW  19
0153:  RETLW  29
0154:  RETLW  46
0155:  BSF    0A.0
0156:  BCF    0A.1
0157:  BCF    0A.2
0158:  ADDLW  5C
0159:  BTFSC  03.0
015A:  INCF   0A,F
015B:  MOVWF  02
015C:  RETLW  26
015D:  RETLW  49
015E:  RETLW  49
015F:  RETLW  49
0160:  RETLW  32
0161:  RETLW  03
0162:  RETLW  01
0163:  RETLW  7F
0164:  RETLW  01
0165:  RETLW  03
0166:  RETLW  3F
0167:  RETLW  40
0168:  RETLW  40
0169:  RETLW  40
016A:  RETLW  3F
016B:  RETLW  1F
016C:  RETLW  20
016D:  RETLW  40
016E:  RETLW  20
016F:  RETLW  1F
0170:  RETLW  3F
0171:  RETLW  40
0172:  RETLW  38
0173:  RETLW  40
0174:  RETLW  3F
0175:  RETLW  63
0176:  RETLW  14
0177:  RETLW  08
0178:  RETLW  14
0179:  RETLW  63
017A:  RETLW  03
017B:  RETLW  04
017C:  RETLW  78
017D:  RETLW  04
017E:  RETLW  03
017F:  RETLW  61
0180:  RETLW  59
0181:  RETLW  49
0182:  RETLW  4D
0183:  RETLW  43
0184:  RETLW  00
0185:  RETLW  7F
0186:  RETLW  41
0187:  RETLW  41
0188:  RETLW  41
0189:  RETLW  02
018A:  RETLW  04
018B:  RETLW  08
018C:  RETLW  10
018D:  RETLW  20
018E:  RETLW  00
018F:  RETLW  41
0190:  RETLW  41
0191:  RETLW  41
0192:  RETLW  7F
0193:  RETLW  04
0194:  RETLW  02
0195:  RETLW  01
0196:  RETLW  02
0197:  RETLW  04
0198:  RETLW  40
0199:  RETLW  40
019A:  RETLW  40
019B:  RETLW  40
019C:  RETLW  40
019D:  RETLW  00
019E:  RETLW  03
019F:  RETLW  07
01A0:  RETLW  08
01A1:  RETLW  00
01A2:  RETLW  20
01A3:  RETLW  54
01A4:  RETLW  54
01A5:  RETLW  78
01A6:  RETLW  40
01A7:  RETLW  7F
01A8:  RETLW  28
01A9:  RETLW  44
01AA:  RETLW  44
01AB:  RETLW  38
01AC:  RETLW  38
01AD:  RETLW  44
01AE:  RETLW  44
01AF:  RETLW  44
01B0:  RETLW  28
01B1:  RETLW  38
01B2:  RETLW  44
01B3:  RETLW  44
01B4:  RETLW  28
01B5:  RETLW  7F
01B6:  RETLW  38
01B7:  RETLW  54
01B8:  RETLW  54
01B9:  RETLW  54
01BA:  RETLW  18
01BB:  RETLW  00
01BC:  RETLW  08
01BD:  RETLW  7E
01BE:  RETLW  09
01BF:  RETLW  02
01C0:  RETLW  18
01C1:  RETLW  A4
01C2:  RETLW  A4
01C3:  RETLW  9C
01C4:  RETLW  78
01C5:  RETLW  7F
01C6:  RETLW  08
01C7:  RETLW  04
01C8:  RETLW  04
01C9:  RETLW  78
01CA:  RETLW  00
01CB:  RETLW  44
01CC:  RETLW  7D
01CD:  RETLW  40
01CE:  RETLW  00
01CF:  RETLW  20
01D0:  RETLW  40
01D1:  RETLW  40
01D2:  RETLW  3D
01D3:  RETLW  00
01D4:  RETLW  7F
01D5:  RETLW  10
01D6:  RETLW  28
01D7:  RETLW  44
01D8:  RETLW  00
01D9:  RETLW  00
01DA:  RETLW  41
01DB:  RETLW  7F
01DC:  RETLW  40
01DD:  RETLW  00
01DE:  RETLW  7C
01DF:  RETLW  04
01E0:  RETLW  78
01E1:  RETLW  04
01E2:  RETLW  78
01E3:  RETLW  7C
01E4:  RETLW  08
01E5:  RETLW  04
01E6:  RETLW  04
01E7:  RETLW  78
01E8:  RETLW  38
01E9:  RETLW  44
01EA:  RETLW  44
01EB:  RETLW  44
01EC:  RETLW  38
01ED:  RETLW  FC
01EE:  RETLW  18
01EF:  RETLW  24
01F0:  RETLW  24
01F1:  RETLW  18
01F2:  RETLW  18
01F3:  RETLW  24
01F4:  RETLW  24
01F5:  RETLW  18
01F6:  RETLW  FC
01F7:  RETLW  7C
01F8:  RETLW  08
01F9:  RETLW  04
01FA:  RETLW  04
01FB:  RETLW  08
01FC:  RETLW  48
01FD:  RETLW  54
01FE:  RETLW  54
01FF:  RETLW  54
0200:  RETLW  24
0201:  RETLW  04
0202:  RETLW  04
0203:  RETLW  3F
0204:  RETLW  44
0205:  RETLW  24
0206:  RETLW  3C
0207:  RETLW  40
0208:  RETLW  40
0209:  RETLW  20
020A:  RETLW  7C
020B:  RETLW  1C
020C:  RETLW  20
020D:  RETLW  40
020E:  RETLW  20
020F:  RETLW  1C
0210:  RETLW  3C
0211:  RETLW  40
0212:  RETLW  30
0213:  RETLW  40
0214:  RETLW  3C
0215:  RETLW  44
0216:  RETLW  28
0217:  RETLW  10
0218:  RETLW  28
0219:  RETLW  44
021A:  RETLW  4C
021B:  RETLW  90
021C:  RETLW  90
021D:  RETLW  90
021E:  RETLW  7C
021F:  RETLW  44
0220:  RETLW  64
0221:  RETLW  54
0222:  RETLW  4C
0223:  RETLW  44
0224:  RETLW  00
0225:  RETLW  08
0226:  RETLW  36
0227:  RETLW  41
0228:  RETLW  00
0229:  RETLW  00
022A:  RETLW  00
022B:  RETLW  77
022C:  RETLW  00
022D:  RETLW  00
022E:  RETLW  00
022F:  RETLW  41
0230:  RETLW  36
0231:  RETLW  08
0232:  RETLW  00
0233:  RETLW  02
0234:  RETLW  01
0235:  RETLW  02
0236:  RETLW  04
0237:  RETLW  02
*
0291:  DATA CD,34
0292:  DATA EE,34
0293:  DATA ED,30
0294:  DATA 6C,10
0295:  DATA D2,30
0296:  DATA E4,30
0297:  DATA 72,10
0298:  DATA C4,34
0299:  DATA 73,38
029A:  DATA EC,30
029B:  DATA 79,00
029C:  DATA C8,32
029D:  DATA 6C,36
029E:  DATA 6F,10
029F:  DATA F7,37
02A0:  DATA 72,36
02A1:  DATA E4,10
02A2:  DATA 00,01
*
0389:  CLRF   77
038A:  CLRF   78
038B:  MOVF   42,W
038C:  BCF    03.0
038D:  BTFSC  43.0
038E:  ADDWF  77,F
038F:  RRF    77,F
0390:  RRF    78,F
0391:  BTFSC  43.1
0392:  ADDWF  77,F
0393:  RRF    77,F
0394:  RRF    78,F
0395:  BTFSC  43.2
0396:  ADDWF  77,F
0397:  RRF    77,F
0398:  RRF    78,F
0399:  BTFSC  43.3
039A:  ADDWF  77,F
039B:  RRF    77,F
039C:  RRF    78,F
039D:  BTFSC  43.4
039E:  ADDWF  77,F
039F:  RRF    77,F
03A0:  RRF    78,F
03A1:  BTFSC  43.5
03A2:  ADDWF  77,F
03A3:  RRF    77,F
03A4:  RRF    78,F
03A5:  BTFSC  43.6
03A6:  ADDWF  77,F
03A7:  RRF    77,F
03A8:  RRF    78,F
03A9:  BTFSC  43.7
03AA:  ADDWF  77,F
03AB:  RRF    77,F
03AC:  RRF    78,F
03AD:  RETURN
03AE:  MOVF   41,W
03AF:  CLRF   78
03B0:  SUBWF  40,W
03B1:  BTFSC  03.0
03B2:  GOTO   3B6
03B3:  MOVF   40,W
03B4:  MOVWF  77
03B5:  GOTO   3C2
03B6:  CLRF   77
03B7:  MOVLW  08
03B8:  MOVWF  42
03B9:  RLF    40,F
03BA:  RLF    77,F
03BB:  MOVF   41,W
03BC:  SUBWF  77,W
03BD:  BTFSC  03.0
03BE:  MOVWF  77
03BF:  RLF    78,F
03C0:  DECFSZ 42,F
03C1:  GOTO   3B9
03C2:  RETURN
*
043E:  MOVF   0B,W
043F:  MOVWF  3A
0440:  BCF    0B.7
0441:  BSF    03.5
0442:  BSF    03.6
0443:  BSF    0C.7
0444:  BSF    0C.0
0445:  NOP
0446:  NOP
0447:  BCF    03.5
0448:  BCF    03.6
0449:  BTFSC  3A.7
044A:  BSF    0B.7
044B:  BSF    03.6
044C:  MOVF   0C,W
044D:  ANDLW  7F
044E:  BTFSC  03.2
044F:  GOTO   492
0450:  BCF    03.6
0451:  MOVWF  3A
0452:  BSF    03.6
0453:  MOVF   0D,W
0454:  BCF    03.6
0455:  MOVWF  3B
0456:  BSF    03.6
0457:  MOVF   0F,W
0458:  BCF    03.6
0459:  MOVWF  3C
045A:  MOVF   3A,W
045B:  MOVWF  3D
045C:  CALL   3C3
045D:  MOVF   3B,W
045E:  BSF    03.6
045F:  MOVWF  0D
0460:  BCF    03.6
0461:  MOVF   3C,W
0462:  BSF    03.6
0463:  MOVWF  0F
0464:  BCF    03.6
0465:  MOVF   0B,W
0466:  MOVWF  3D
0467:  BCF    0B.7
0468:  BSF    03.5
0469:  BSF    03.6
046A:  BSF    0C.7
046B:  BSF    0C.0
046C:  NOP
046D:  NOP
046E:  BCF    03.5
046F:  BCF    03.6
0470:  BTFSC  3D.7
0471:  BSF    0B.7
0472:  BSF    03.6
0473:  RLF    0C,W
0474:  RLF    0E,W
0475:  ANDLW  7F
0476:  BTFSC  03.2
0477:  GOTO   492
0478:  BCF    03.6
0479:  MOVWF  3A
047A:  BSF    03.6
047B:  MOVF   0D,W
047C:  BCF    03.6
047D:  MOVWF  3B
047E:  BSF    03.6
047F:  MOVF   0F,W
0480:  BCF    03.6
0481:  MOVWF  3C
0482:  MOVF   3A,W
0483:  MOVWF  3D
0484:  CALL   3C3
0485:  MOVF   3B,W
0486:  BSF    03.6
0487:  MOVWF  0D
0488:  BCF    03.6
0489:  MOVF   3C,W
048A:  BSF    03.6
048B:  MOVWF  0F
048C:  INCF   0D,F
048D:  BTFSC  03.2
048E:  INCF   0F,F
048F:  BCF    03.6
0490:  GOTO   43E
0491:  BSF    03.6
0492:  BCF    03.6
0493:  RETURN
0494:  MOVF   78,W
0495:  MOVF   3A,W
0496:  MOVWF  40
0497:  MOVLW  64
0498:  MOVWF  41
0499:  CALL   3AE
049A:  MOVF   77,W
049B:  MOVWF  3A
049C:  MOVF   78,W
049D:  MOVLW  30
049E:  BTFSS  03.2
049F:  GOTO   4A7
04A0:  BTFSS  3B.1
04A1:  GOTO   4AE
04A2:  BTFSC  3B.3
04A3:  GOTO   4AE
04A4:  BTFSC  3B.4
04A5:  MOVLW  20
04A6:  GOTO   4AA
04A7:  BCF    3B.3
04A8:  BCF    3B.4
04A9:  BSF    3B.0
04AA:  ADDWF  78,F
04AB:  MOVF   78,W
04AC:  MOVWF  3D
04AD:  CALL   3C3
04AE:  MOVF   3A,W
04AF:  MOVWF  40
04B0:  MOVLW  0A
04B1:  MOVWF  41
04B2:  CALL   3AE
04B3:  MOVF   77,W
04B4:  MOVWF  3A
04B5:  MOVF   78,W
04B6:  MOVLW  30
04B7:  BTFSS  03.2
04B8:  GOTO   4BF
04B9:  BTFSC  3B.3
04BA:  GOTO   4C3
04BB:  BTFSS  3B.0
04BC:  GOTO   4C3
04BD:  BTFSC  3B.4
04BE:  MOVLW  20
04BF:  ADDWF  78,F
04C0:  MOVF   78,W
04C1:  MOVWF  3D
04C2:  CALL   3C3
04C3:  MOVLW  30
04C4:  ADDWF  3A,F
04C5:  MOVF   3A,W
04C6:  MOVWF  3D
04C7:  CALL   3C3
04C8:  BCF    0A.3
04C9:  BCF    0A.4
04CA:  GOTO   540 (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=20MHz)
*
02A3:  MOVLW  3C
02A4:  MOVWF  04
02A5:  BCF    03.7
02A6:  MOVF   00,W
02A7:  BTFSC  03.2
02A8:  GOTO   2B6
02A9:  MOVLW  06
02AA:  MOVWF  78
02AB:  CLRF   77
02AC:  DECFSZ 77,F
02AD:  GOTO   2AC
02AE:  DECFSZ 78,F
02AF:  GOTO   2AB
02B0:  MOVLW  7B
02B1:  MOVWF  77
02B2:  DECFSZ 77,F
02B3:  GOTO   2B2
02B4:  DECFSZ 00,F
02B5:  GOTO   2A9
02B6:  RETURN
.................... 
.................... 
.................... 
.................... // Interfacing PIC16F877A with SSD1306 OLED display (128x64 Pixel)
.................... // http://simple-circuit.com/
.................... 
.................... #define SSD1306_RST   PIN_D4
.................... 
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP
.................... #use I2C(MASTER, I2C1, FAST = 400000, stream = SSD1306_STREAM)  // Initialize I2C
02B7:  BCF    14.7
02B8:  BCF    0C.3
02B9:  MOVF   43,W
02BA:  MOVWF  13
02BB:  MOVLW  02
02BC:  BTFSC  14.7
02BD:  GOTO   2C5
02BE:  BSF    03.5
02BF:  BTFSC  14.2
02C0:  GOTO   2BF
02C1:  MOVLW  00
02C2:  BTFSC  11.6
02C3:  MOVLW  01
02C4:  BCF    03.5
02C5:  MOVWF  78
02C6:  RETURN
.................... 
.................... #byte porta = 0x05
.................... 
.................... // Include SSD1306 OLED driver source code
.................... #include <SSD1306.c>
.................... /******************************************************************************
....................  SSD1306 OLED driver for CCS PIC C compiler (SSD1306.c)                       *
....................                                                                               *
....................  The driver is for I2C mode only.                                             *
....................                                                                               *
....................  http://simple-circuit.com/                                                   *
....................                                                                               *
.................... *******************************************************************************/
.................... 
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... //------------------------------ Definitions ---------------------------------//
.................... 
.................... #define SSD1306_I2C_ADDRESS   0x7A
.................... 
.................... #if !defined SSD1306_128_32 && !defined SSD1306_96_16
.................... #define SSD1306_128_64
.................... #endif
.................... #if defined SSD1306_128_32 && defined SSD1306_96_16
....................   #error "Only one SSD1306 display can be specified at once"
.................... #endif
.................... 
.................... #if defined SSD1306_128_64
....................   #define SSD1306_LCDWIDTH            128
....................   #define SSD1306_LCDHEIGHT            64
.................... #endif
.................... #if defined SSD1306_128_32
....................   #define SSD1306_LCDWIDTH            128
....................   #define SSD1306_LCDHEIGHT            32
.................... #endif
.................... #if defined SSD1306_96_16
....................   #define SSD1306_LCDWIDTH             96
....................   #define SSD1306_LCDHEIGHT            16
.................... #endif
.................... 
.................... #define SSD1306_SETCONTRAST          0x81
.................... #define SSD1306_DISPLAYALLON_RESUME  0xA4
.................... #define SSD1306_DISPLAYALLON         0xA5
.................... #define SSD1306_NORMALDISPLAY        0xA6
.................... #define SSD1306_INVERTDISPLAY_       0xA7
.................... #define SSD1306_DISPLAYOFF           0xAE
.................... #define SSD1306_DISPLAYON            0xAF
.................... #define SSD1306_SETDISPLAYOFFSET     0xD3
.................... #define SSD1306_SETCOMPINS           0xDA
.................... #define SSD1306_SETVCOMDETECT        0xDB
.................... #define SSD1306_SETDISPLAYCLOCKDIV   0xD5
.................... #define SSD1306_SETPRECHARGE         0xD9
.................... #define SSD1306_SETMULTIPLEX         0xA8
.................... #define SSD1306_SETLOWCOLUMN         0x00
.................... #define SSD1306_SETHIGHCOLUMN        0x10
.................... #define SSD1306_SETSTARTLINE         0x40
.................... #define SSD1306_MEMORYMODE           0x20
.................... #define SSD1306_COLUMNADDR           0x21
.................... #define SSD1306_PAGEADDR             0x22
.................... #define SSD1306_COMSCANINC           0xC0
.................... #define SSD1306_COMSCANDEC           0xC8
.................... #define SSD1306_SEGREMAP             0xA0
.................... #define SSD1306_CHARGEPUMP           0x8D
.................... #define SSD1306_EXTERNALVCC          0x01
.................... #define SSD1306_SWITCHCAPVCC         0x02
.................... 
.................... // Scrolling #defines
.................... #define SSD1306_ACTIVATE_SCROLL                      0x2F
.................... #define SSD1306_DEACTIVATE_SCROLL                    0x2E
.................... #define SSD1306_SET_VERTICAL_SCROLL_AREA             0xA3
.................... #define SSD1306_RIGHT_HORIZONTAL_SCROLL              0x26
.................... #define SSD1306_LEFT_HORIZONTAL_SCROLL               0x27
.................... #define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
.................... #define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL  0x2A
.................... 
.................... 
.................... uint8_t _i2caddr, _vccstate, x_pos = 1, y_pos = 1;
.................... 
.................... //--------------------------------------------------------------------------//
.................... 
.................... int1 wrap = TRUE;
.................... 
.................... const char Font[] = {
.................... 0x00, 0x00, 0x00, 0x00, 0x00,
.................... 0x00, 0x00, 0x5F, 0x00, 0x00,
.................... 0x00, 0x07, 0x00, 0x07, 0x00,
.................... 0x14, 0x7F, 0x14, 0x7F, 0x14,
.................... 0x24, 0x2A, 0x7F, 0x2A, 0x12,
.................... 0x23, 0x13, 0x08, 0x64, 0x62,
.................... 0x36, 0x49, 0x56, 0x20, 0x50,
.................... 0x00, 0x08, 0x07, 0x03, 0x00,
.................... 0x00, 0x1C, 0x22, 0x41, 0x00,
.................... 0x00, 0x41, 0x22, 0x1C, 0x00,
.................... 0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
.................... 0x08, 0x08, 0x3E, 0x08, 0x08,
.................... 0x00, 0x80, 0x70, 0x30, 0x00,
.................... 0x08, 0x08, 0x08, 0x08, 0x08,
.................... 0x00, 0x00, 0x60, 0x60, 0x00,
.................... 0x20, 0x10, 0x08, 0x04, 0x02,
.................... 0x3E, 0x51, 0x49, 0x45, 0x3E,
.................... 0x00, 0x42, 0x7F, 0x40, 0x00,
.................... 0x72, 0x49, 0x49, 0x49, 0x46,
.................... 0x21, 0x41, 0x49, 0x4D, 0x33,
.................... 0x18, 0x14, 0x12, 0x7F, 0x10,
.................... 0x27, 0x45, 0x45, 0x45, 0x39,
.................... 0x3C, 0x4A, 0x49, 0x49, 0x31,
.................... 0x41, 0x21, 0x11, 0x09, 0x07,
.................... 0x36, 0x49, 0x49, 0x49, 0x36,
.................... 0x46, 0x49, 0x49, 0x29, 0x1E,
.................... 0x00, 0x00, 0x14, 0x00, 0x00,
.................... 0x00, 0x40, 0x34, 0x00, 0x00,
.................... 0x00, 0x08, 0x14, 0x22, 0x41,
.................... 0x14, 0x14, 0x14, 0x14, 0x14,
.................... 0x00, 0x41, 0x22, 0x14, 0x08,
.................... 0x02, 0x01, 0x59, 0x09, 0x06,
.................... 0x3E, 0x41, 0x5D, 0x59, 0x4E,
.................... 0x7C, 0x12, 0x11, 0x12, 0x7C,
.................... 0x7F, 0x49, 0x49, 0x49, 0x36,
.................... 0x3E, 0x41, 0x41, 0x41, 0x22,
.................... 0x7F, 0x41, 0x41, 0x41, 0x3E,
.................... 0x7F, 0x49, 0x49, 0x49, 0x41,
.................... 0x7F, 0x09, 0x09, 0x09, 0x01,
.................... 0x3E, 0x41, 0x41, 0x51, 0x73,
.................... 0x7F, 0x08, 0x08, 0x08, 0x7F,
.................... 0x00, 0x41, 0x7F, 0x41, 0x00,
.................... 0x20, 0x40, 0x41, 0x3F, 0x01,
.................... 0x7F, 0x08, 0x14, 0x22, 0x41,
.................... 0x7F, 0x40, 0x40, 0x40, 0x40,
.................... 0x7F, 0x02, 0x1C, 0x02, 0x7F,
.................... 0x7F, 0x04, 0x08, 0x10, 0x7F,
.................... 0x3E, 0x41, 0x41, 0x41, 0x3E,
.................... 0x7F, 0x09, 0x09, 0x09, 0x06,
.................... 0x3E, 0x41, 0x51, 0x21, 0x5E,
.................... 0x7F, 0x09, 0x19, 0x29, 0x46
.................... };
.................... const char Font2[] = {
.................... 0x26, 0x49, 0x49, 0x49, 0x32,
.................... 0x03, 0x01, 0x7F, 0x01, 0x03,
.................... 0x3F, 0x40, 0x40, 0x40, 0x3F,
.................... 0x1F, 0x20, 0x40, 0x20, 0x1F,
.................... 0x3F, 0x40, 0x38, 0x40, 0x3F,
.................... 0x63, 0x14, 0x08, 0x14, 0x63,
.................... 0x03, 0x04, 0x78, 0x04, 0x03,
.................... 0x61, 0x59, 0x49, 0x4D, 0x43,
.................... 0x00, 0x7F, 0x41, 0x41, 0x41,
.................... 0x02, 0x04, 0x08, 0x10, 0x20,
.................... 0x00, 0x41, 0x41, 0x41, 0x7F,
.................... 0x04, 0x02, 0x01, 0x02, 0x04,
.................... 0x40, 0x40, 0x40, 0x40, 0x40,
.................... 0x00, 0x03, 0x07, 0x08, 0x00,
.................... 0x20, 0x54, 0x54, 0x78, 0x40,
.................... 0x7F, 0x28, 0x44, 0x44, 0x38,
.................... 0x38, 0x44, 0x44, 0x44, 0x28,
.................... 0x38, 0x44, 0x44, 0x28, 0x7F,
.................... 0x38, 0x54, 0x54, 0x54, 0x18,
.................... 0x00, 0x08, 0x7E, 0x09, 0x02,
.................... 0x18, 0xA4, 0xA4, 0x9C, 0x78,
.................... 0x7F, 0x08, 0x04, 0x04, 0x78,
.................... 0x00, 0x44, 0x7D, 0x40, 0x00,
.................... 0x20, 0x40, 0x40, 0x3D, 0x00,
.................... 0x7F, 0x10, 0x28, 0x44, 0x00,
.................... 0x00, 0x41, 0x7F, 0x40, 0x00,
.................... 0x7C, 0x04, 0x78, 0x04, 0x78,
.................... 0x7C, 0x08, 0x04, 0x04, 0x78,
.................... 0x38, 0x44, 0x44, 0x44, 0x38,
.................... 0xFC, 0x18, 0x24, 0x24, 0x18,
.................... 0x18, 0x24, 0x24, 0x18, 0xFC,
.................... 0x7C, 0x08, 0x04, 0x04, 0x08,
.................... 0x48, 0x54, 0x54, 0x54, 0x24,
.................... 0x04, 0x04, 0x3F, 0x44, 0x24,
.................... 0x3C, 0x40, 0x40, 0x20, 0x7C,
.................... 0x1C, 0x20, 0x40, 0x20, 0x1C,
.................... 0x3C, 0x40, 0x30, 0x40, 0x3C,
.................... 0x44, 0x28, 0x10, 0x28, 0x44,
.................... 0x4C, 0x90, 0x90, 0x90, 0x7C,
.................... 0x44, 0x64, 0x54, 0x4C, 0x44,
.................... 0x00, 0x08, 0x36, 0x41, 0x00,
.................... 0x00, 0x00, 0x77, 0x00, 0x00,
.................... 0x00, 0x41, 0x36, 0x08, 0x00,
.................... 0x02, 0x01, 0x02, 0x04, 0x02
.................... };
.................... 
.................... 
.................... void ssd1306_command(uint8_t c) {
02C7:  CLRF   42
....................     uint8_t control = 0x00;   // Co = 0, D/C = 0
....................     I2C_Start(SSD1306_STREAM);
02C8:  BSF    03.5
02C9:  BSF    11.0
02CA:  BTFSC  11.0
02CB:  GOTO   2CA
....................     I2C_Write(SSD1306_STREAM, _i2caddr);
02CC:  BCF    03.5
02CD:  MOVF   2C,W
02CE:  MOVWF  43
02CF:  CALL   2B7
....................     I2C_Write(SSD1306_STREAM, control);
02D0:  MOVF   42,W
02D1:  MOVWF  43
02D2:  CALL   2B7
....................     I2C_Write(SSD1306_STREAM, c);
02D3:  MOVF   41,W
02D4:  MOVWF  43
02D5:  CALL   2B7
....................     I2C_Stop(SSD1306_STREAM);
02D6:  BSF    03.5
02D7:  BSF    11.2
02D8:  BTFSC  11.2
02D9:  GOTO   2D8
02DA:  BCF    03.5
02DB:  RETURN
.................... }
.................... 
.................... void SSD1306_Init(uint8_t vccstate = SSD1306_SWITCHCAPVCC, uint8_t i2caddr = SSD1306_I2C_ADDRESS) {
....................   _vccstate = vccstate;
02DC:  MOVF   3A,W
02DD:  MOVWF  2D
....................   _i2caddr  = i2caddr;
02DE:  MOVF   3B,W
02DF:  MOVWF  2C
....................   #ifdef SSD1306_RST
....................     output_low(SSD1306_RST);
02E0:  BSF    03.5
02E1:  BCF    08.4
02E2:  BCF    03.5
02E3:  BCF    08.4
....................     output_drive(SSD1306_RST);
02E4:  BSF    03.5
02E5:  BCF    08.4
....................     delay_ms(10);
02E6:  MOVLW  0A
02E7:  BCF    03.5
02E8:  MOVWF  3C
02E9:  CALL   2A3
....................     output_high(SSD1306_RST);
02EA:  BSF    03.5
02EB:  BCF    08.4
02EC:  BCF    03.5
02ED:  BSF    08.4
....................   #endif
....................   // Init sequence
....................   ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
02EE:  MOVLW  AE
02EF:  MOVWF  41
02F0:  CALL   2C7
....................   ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
02F1:  MOVLW  D5
02F2:  MOVWF  41
02F3:  CALL   2C7
....................   ssd1306_command(0x80);                                  // the suggested ratio 0x80
02F4:  MOVLW  80
02F5:  MOVWF  41
02F6:  CALL   2C7
.................... 
....................   ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
02F7:  MOVLW  A8
02F8:  MOVWF  41
02F9:  CALL   2C7
....................   ssd1306_command(SSD1306_LCDHEIGHT - 1);
02FA:  MOVLW  3F
02FB:  MOVWF  41
02FC:  CALL   2C7
.................... 
....................   ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
02FD:  MOVLW  D3
02FE:  MOVWF  41
02FF:  CALL   2C7
....................   ssd1306_command(0x0);                                   // no offset
0300:  CLRF   41
0301:  CALL   2C7
....................   ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
0302:  MOVLW  40
0303:  MOVWF  41
0304:  CALL   2C7
....................   ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
0305:  MOVLW  8D
0306:  MOVWF  41
0307:  CALL   2C7
....................   if (vccstate == SSD1306_EXTERNALVCC)
0308:  DECFSZ 3A,W
0309:  GOTO   30E
....................     { ssd1306_command(0x10); }
030A:  MOVLW  10
030B:  MOVWF  41
030C:  CALL   2C7
030D:  GOTO   311
....................   else
....................     { ssd1306_command(0x14); }
030E:  MOVLW  14
030F:  MOVWF  41
0310:  CALL   2C7
....................   ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
0311:  MOVLW  20
0312:  MOVWF  41
0313:  CALL   2C7
....................   ssd1306_command(0x00);                                  // 0x0 act like ks0108
0314:  CLRF   41
0315:  CALL   2C7
....................   ssd1306_command(SSD1306_SEGREMAP | 0x1);
0316:  MOVLW  A1
0317:  MOVWF  41
0318:  CALL   2C7
....................   ssd1306_command(SSD1306_COMSCANDEC);
0319:  MOVLW  C8
031A:  MOVWF  41
031B:  CALL   2C7
.................... 
....................  #if defined SSD1306_128_32
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
....................   ssd1306_command(0x02);
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
....................   ssd1306_command(0x8F);
.................... 
.................... #elif defined SSD1306_128_64
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
031C:  MOVLW  DA
031D:  MOVWF  41
031E:  CALL   2C7
....................   ssd1306_command(0x12);
031F:  MOVLW  12
0320:  MOVWF  41
0321:  CALL   2C7
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
0322:  MOVLW  81
0323:  MOVWF  41
0324:  CALL   2C7
....................   if (vccstate == SSD1306_EXTERNALVCC)
0325:  DECFSZ 3A,W
0326:  GOTO   32B
....................     { ssd1306_command(0x9F); }
0327:  MOVLW  9F
0328:  MOVWF  41
0329:  CALL   2C7
032A:  GOTO   32E
....................   else
....................     { ssd1306_command(0xCF); }
032B:  MOVLW  CF
032C:  MOVWF  41
032D:  CALL   2C7
.................... 
.................... #elif defined SSD1306_96_16
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
....................   ssd1306_command(0x2);   //ada x12
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
....................   if (vccstate == SSD1306_EXTERNALVCC)
....................     { ssd1306_command(0x10); }
....................   else
....................     { ssd1306_command(0xAF); }
.................... 
.................... #endif
.................... 
....................   ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
032E:  MOVLW  D9
032F:  MOVWF  41
0330:  CALL   2C7
....................   if (vccstate == SSD1306_EXTERNALVCC)
0331:  DECFSZ 3A,W
0332:  GOTO   337
....................     { ssd1306_command(0x22); }
0333:  MOVLW  22
0334:  MOVWF  41
0335:  CALL   2C7
0336:  GOTO   33A
....................   else
....................     { ssd1306_command(0xF1); }
0337:  MOVLW  F1
0338:  MOVWF  41
0339:  CALL   2C7
....................   ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
033A:  MOVLW  DB
033B:  MOVWF  41
033C:  CALL   2C7
....................   ssd1306_command(0x40);
033D:  MOVLW  40
033E:  MOVWF  41
033F:  CALL   2C7
....................   ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
0340:  MOVLW  A4
0341:  MOVWF  41
0342:  CALL   2C7
....................   ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
0343:  MOVLW  A6
0344:  MOVWF  41
0345:  CALL   2C7
.................... 
....................   ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
0346:  MOVLW  2E
0347:  MOVWF  41
0348:  CALL   2C7
.................... 
....................   ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
0349:  MOVLW  AF
034A:  MOVWF  41
034B:  CALL   2C7
034C:  BCF    0A.3
034D:  BCF    0A.4
034E:  GOTO   50F (RETURN)
.................... }
.................... 
.................... void SSD1306_StartScrollRight(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_RIGHT_HORIZONTAL_SCROLL);
....................   ssd1306_command(0X00);
....................   ssd1306_command(start);  // start page
....................   ssd1306_command(0X00);
....................   ssd1306_command(stop);   // end page
....................   ssd1306_command(0X00);
....................   ssd1306_command(0XFF);
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_StartScrollLeft(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_LEFT_HORIZONTAL_SCROLL);
....................   ssd1306_command(0X00);
....................   ssd1306_command(start);
....................   ssd1306_command(0X00);
....................   ssd1306_command(stop);
....................   ssd1306_command(0X00);
....................   ssd1306_command(0XFF);
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_StartScrollDiagRight(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA);
....................   ssd1306_command(0X00);
....................   ssd1306_command(SSD1306_LCDHEIGHT);
....................   ssd1306_command(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL);
....................   ssd1306_command(0X00);
....................   ssd1306_command(start);
....................   ssd1306_command(0X00);
....................   ssd1306_command(stop);
....................   ssd1306_command(0X01);
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_StartScrollDiagLeft(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA);
....................   ssd1306_command(0X00);
....................   ssd1306_command(SSD1306_LCDHEIGHT);
....................   ssd1306_command(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL);
....................   ssd1306_command(0X00);
....................   ssd1306_command(start);
....................   ssd1306_command(0X00);
....................   ssd1306_command(stop);
....................   ssd1306_command(0X01);
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_StopScroll(void) {
....................   ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_Dim(int1 dim) {
....................   uint8_t contrast;
....................   if (dim)
....................     contrast = 0; // Dimmed display
....................   else {
....................     if (_vccstate == SSD1306_EXTERNALVCC)
....................       contrast = 0x9F;
....................     else
....................       contrast = 0xCF;
....................   }
....................   // the range of contrast to too small to be really useful
....................   // it is useful to dim the display
....................   ssd1306_command(SSD1306_SETCONTRAST);
....................   ssd1306_command(contrast);
.................... }
.................... 
.................... void SSD1306_SetTextWrap(int1 w) {
....................   wrap = w;
.................... }
.................... 
.................... void SSD1306_InvertDisplay(int1 i) {
....................   if (i)
....................     ssd1306_command(SSD1306_INVERTDISPLAY_);
....................   else
....................     ssd1306_command(SSD1306_NORMALDISPLAY);
.................... }
.................... 
.................... void SSD1306_GotoXY(uint8_t x, uint8_t y) {
....................   if((x > 21) || y > 8)
*
037C:  MOVF   3A,W
037D:  SUBLW  15
037E:  BTFSS  03.0
037F:  GOTO   383
0380:  MOVF   3B,W
0381:  SUBLW  08
0382:  BTFSS  03.0
....................     return;
0383:  GOTO   388
....................   x_pos = x;
0384:  MOVF   3A,W
0385:  MOVWF  2E
....................   y_pos = y;
0386:  MOVF   3B,W
0387:  MOVWF  2F
0388:  RETURN
.................... }
.................... 
.................... void SSD1306_PutC(uint8_t c) {
....................   uint8_t font_c;
....................   if((c < ' ') || (c > '~'))
*
03C3:  MOVF   3D,W
03C4:  SUBLW  1F
03C5:  BTFSC  03.0
03C6:  GOTO   3CB
03C7:  MOVF   3D,W
03C8:  SUBLW  7E
03C9:  BTFSC  03.0
03CA:  GOTO   3CD
....................     c = '?';
03CB:  MOVLW  3F
03CC:  MOVWF  3D
....................   ssd1306_command(SSD1306_COLUMNADDR);
03CD:  MOVLW  21
03CE:  MOVWF  41
03CF:  CALL   2C7
....................   ssd1306_command(6 * (x_pos - 1));
03D0:  MOVLW  01
03D1:  SUBWF  2E,W
03D2:  MOVWF  40
03D3:  MOVLW  06
03D4:  MOVWF  42
03D5:  MOVF   40,W
03D6:  MOVWF  43
03D7:  CALL   389
03D8:  MOVF   78,W
03D9:  MOVWF  40
03DA:  MOVWF  41
03DB:  CALL   2C7
....................   ssd1306_command(6 * (x_pos - 1) + 4); // Column end address (127 = reset)
03DC:  MOVLW  01
03DD:  SUBWF  2E,W
03DE:  MOVWF  40
03DF:  MOVLW  06
03E0:  MOVWF  42
03E1:  MOVF   40,W
03E2:  MOVWF  43
03E3:  CALL   389
03E4:  MOVLW  04
03E5:  ADDWF  78,W
03E6:  MOVWF  40
03E7:  MOVWF  41
03E8:  CALL   2C7
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
03E9:  MOVLW  22
03EA:  MOVWF  41
03EB:  CALL   2C7
....................   ssd1306_command(y_pos - 1); // Page start address (0 = reset)
03EC:  MOVLW  01
03ED:  SUBWF  2F,W
03EE:  MOVWF  40
03EF:  MOVWF  41
03F0:  CALL   2C7
....................   ssd1306_command(y_pos - 1); // Page end address
03F1:  MOVLW  01
03F2:  SUBWF  2F,W
03F3:  MOVWF  40
03F4:  MOVWF  41
03F5:  CALL   2C7
....................   
....................   I2C_Start(SSD1306_STREAM);
03F6:  BSF    03.5
03F7:  BSF    11.0
03F8:  BTFSC  11.0
03F9:  GOTO   3F8
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
03FA:  BCF    03.5
03FB:  MOVF   2C,W
03FC:  MOVWF  43
03FD:  CALL   2B7
....................   I2C_Write(SSD1306_STREAM, 0x40);
03FE:  MOVLW  40
03FF:  MOVWF  43
0400:  CALL   2B7
....................   
....................   for(uint8_t i = 0; i < 5; i++ ) {
0401:  CLRF   3F
0402:  MOVF   3F,W
0403:  SUBLW  04
0404:  BTFSS  03.0
0405:  GOTO   428
....................     if(c < 'S')
0406:  MOVF   3D,W
0407:  SUBLW  52
0408:  BTFSS  03.0
0409:  GOTO   417
....................       font_c = font[(c - 32) * 5 + i];
040A:  MOVLW  20
040B:  SUBWF  3D,W
040C:  MOVWF  41
040D:  MOVWF  42
040E:  MOVLW  05
040F:  MOVWF  43
0410:  CALL   389
0411:  MOVF   3F,W
0412:  ADDWF  78,W
0413:  CALL   04F
0414:  MOVWF  78
0415:  MOVWF  3E
0416:  GOTO   423
....................     else
....................       font_c = font2[(c - 'S') * 5 + i];
0417:  MOVLW  53
0418:  SUBWF  3D,W
0419:  MOVWF  41
041A:  MOVWF  42
041B:  MOVLW  05
041C:  MOVWF  43
041D:  CALL   389
041E:  MOVF   3F,W
041F:  ADDWF  78,W
0420:  CALL   155
0421:  MOVWF  78
0422:  MOVWF  3E
....................   
....................     I2C_Write(SSD1306_STREAM, font_c);
0423:  MOVF   3E,W
0424:  MOVWF  43
0425:  CALL   2B7
0426:  INCF   3F,F
0427:  GOTO   402
....................   }
....................   I2C_Stop(SSD1306_STREAM);
0428:  BSF    03.5
0429:  BSF    11.2
042A:  BTFSC  11.2
042B:  GOTO   42A
.................... 
....................   x_pos = x_pos % 21 + 1;
042C:  BCF    03.5
042D:  MOVF   2E,W
042E:  MOVWF  40
042F:  MOVLW  15
0430:  MOVWF  41
0431:  CALL   3AE
0432:  MOVLW  01
0433:  ADDWF  77,W
0434:  MOVWF  2E
....................   if (wrap && (x_pos == 1))
0435:  BTFSS  30.0
0436:  GOTO   43D
0437:  DECFSZ 2E,W
0438:  GOTO   43D
....................     y_pos = y_pos % 8 + 1;
0439:  MOVF   2F,W
043A:  ANDLW  07
043B:  ADDLW  01
043C:  MOVWF  2F
043D:  RETURN
.................... 
.................... }
.................... 
.................... void SSD1306_PutCustomC(char *c) {
....................   uint8_t line;
....................   ssd1306_command(SSD1306_COLUMNADDR);
....................   ssd1306_command(6 * (x_pos - 1));
....................   ssd1306_command(6 * (x_pos - 1) + 4); // Column end address (127 = reset)
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
....................   ssd1306_command(y_pos - 1); // Page start address (0 = reset)
....................   ssd1306_command(y_pos - 1); // Page end address
....................   
....................   I2C_Start(SSD1306_STREAM);
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
....................   I2C_Write(SSD1306_STREAM, 0x40);
....................   
....................   for(uint8_t i = 0; i < 5; i++ ) {
....................     line = c[i];
....................     I2C_Write(SSD1306_STREAM, line);
....................   }
....................   I2C_Stop(SSD1306_STREAM);
.................... 
....................   x_pos = x_pos % 21 + 1;
....................   if (wrap && (x_pos == 1))
....................     y_pos = y_pos % 8 + 1;
.................... 
.................... }
.................... 
.................... void SSD1306_ClearDisplay() {
.................... 
....................   ssd1306_command(SSD1306_COLUMNADDR);
*
034F:  MOVLW  21
0350:  MOVWF  41
0351:  CALL   2C7
....................   ssd1306_command(0);    // Column start address
0352:  CLRF   41
0353:  CALL   2C7
....................   #if defined SSD1306_128_64 || defined SSD1306_128_32
....................   ssd1306_command(127);  // Column end address
0354:  MOVLW  7F
0355:  MOVWF  41
0356:  CALL   2C7
....................   #else
....................     ssd1306_command(95); // Column end address
....................   #endif
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
0357:  MOVLW  22
0358:  MOVWF  41
0359:  CALL   2C7
....................   ssd1306_command(0);   // Page start address (0 = reset)
035A:  CLRF   41
035B:  CALL   2C7
....................   #if defined SSD1306_128_64
....................   ssd1306_command(7);   // Page end address
035C:  MOVLW  07
035D:  MOVWF  41
035E:  CALL   2C7
....................   #elif defined SSD1306_128_32
....................   ssd1306_command(3);   // Page end address
....................   #elif defined SSD1306_96_16
....................   ssd1306_command(1);   // Page end address
....................   #endif
.................... 
....................   I2C_Start(SSD1306_STREAM);
035F:  BSF    03.5
0360:  BSF    11.0
0361:  BTFSC  11.0
0362:  GOTO   361
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
0363:  BCF    03.5
0364:  MOVF   2C,W
0365:  MOVWF  43
0366:  CALL   2B7
....................   I2C_Write(SSD1306_STREAM, 0x40);
0367:  MOVLW  40
0368:  MOVWF  43
0369:  CALL   2B7
.................... 
....................   for(uint16_t i = 0; i < SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8; i++ )
036A:  CLRF   3B
036B:  CLRF   3A
036C:  MOVF   3B,W
036D:  SUBLW  03
036E:  BTFSS  03.0
036F:  GOTO   376
....................     I2C_Write(SSD1306_STREAM, 0);
0370:  CLRF   43
0371:  CALL   2B7
0372:  INCF   3A,F
0373:  BTFSC  03.2
0374:  INCF   3B,F
0375:  GOTO   36C
.................... 
....................   I2C_Stop(SSD1306_STREAM);
0376:  BSF    03.5
0377:  BSF    11.2
0378:  BTFSC  11.2
0379:  GOTO   378
037A:  BCF    03.5
037B:  RETURN
.................... 
.................... }
.................... 
.................... void SSD1306_FillScreen() {
.................... 
....................   ssd1306_command(SSD1306_COLUMNADDR);
....................   ssd1306_command(0);    // Column start address
....................   #if defined SSD1306_128_64 || defined SSD1306_128_32
....................   ssd1306_command(127);  // Column end address
....................   #else
....................     ssd1306_command(95); // Column end address
....................   #endif
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
....................   ssd1306_command(0);   // Page start address (0 = reset)
....................   #if defined SSD1306_128_64
....................   ssd1306_command(7);   // Page end address
....................   #elif defined SSD1306_128_32
....................   ssd1306_command(3);   // Page end address
....................   #elif defined SSD1306_96_16
....................   ssd1306_command(1);   // Page end address
....................   #endif
.................... 
....................   I2C_Start(SSD1306_STREAM);
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
....................   I2C_Write(SSD1306_STREAM, 0x40);
.................... 
....................   for(uint16_t i = 0; i < SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8; i++ )
....................     I2C_Write(SSD1306_STREAM, 0xFF);
.................... 
....................   I2C_Stop(SSD1306_STREAM);
.................... 
.................... }
.................... 
.................... #bit trig = porta.0
.................... #bit echo = porta.1
.................... 
.................... 
.................... int16 loop0 = 0;
.................... int16 loop1 = 0;
.................... int mod1 = 1;
.................... 
.................... int8 angle = 30;
.................... 
.................... int test = 0;
.................... 
.................... 
.................... #int_RTCC             //0.05ms timer interrupt
.................... void rtcc()
.................... {
....................   set_timer0(0x83);
*
0238:  MOVLW  83
0239:  MOVWF  01
....................   if(loop0 == 0)
023A:  MOVF   31,F
023B:  BTFSS  03.2
023C:  GOTO   248
023D:  MOVF   32,F
023E:  BTFSS  03.2
023F:  GOTO   248
....................   {
....................    output_e(0x07);
0240:  BSF    03.5
0241:  BCF    09.0
0242:  BCF    09.1
0243:  BCF    09.2
0244:  MOVLW  07
0245:  BCF    03.5
0246:  MOVWF  09
....................   } else if(loop0 == angle)
0247:  GOTO   255
0248:  MOVF   36,W
0249:  SUBWF  31,W
024A:  BTFSS  03.2
024B:  GOTO   255
024C:  MOVF   32,F
024D:  BTFSS  03.2
024E:  GOTO   255
....................   {
....................    output_e(0);
024F:  BSF    03.5
0250:  BCF    09.0
0251:  BCF    09.1
0252:  BCF    09.2
0253:  BCF    03.5
0254:  CLRF   09
....................   } 
....................   
....................   
....................   if(loop0 < 400)
0255:  MOVF   32,W
0256:  SUBLW  01
0257:  BTFSS  03.0
0258:  GOTO   263
0259:  BTFSS  03.2
025A:  GOTO   25F
025B:  MOVF   31,W
025C:  SUBLW  8F
025D:  BTFSS  03.0
025E:  GOTO   263
....................   {
....................    loop0++;
025F:  INCF   31,F
0260:  BTFSC  03.2
0261:  INCF   32,F
....................   } else {
0262:  GOTO   265
....................    loop0 = 0;
0263:  CLRF   32
0264:  CLRF   31
....................   }
....................   
....................   
....................   
....................   if(loop1 < 5000)
0265:  MOVF   34,W
0266:  SUBLW  13
0267:  BTFSS  03.0
0268:  GOTO   273
0269:  BTFSS  03.2
026A:  GOTO   26F
026B:  MOVF   33,W
026C:  SUBLW  87
026D:  BTFSS  03.0
026E:  GOTO   273
....................   {
....................    loop1++;
026F:  INCF   33,F
0270:  BTFSC  03.2
0271:  INCF   34,F
....................   } else {
0272:  GOTO   28D
....................    if (mod1 == 1 && angle < 42) {
0273:  DECFSZ 35,W
0274:  GOTO   27B
0275:  MOVF   36,W
0276:  SUBLW  29
0277:  BTFSS  03.0
0278:  GOTO   27B
....................       angle++;
0279:  INCF   36,F
....................    } else if (mod1 == 0 && angle > 8) {
027A:  GOTO   28B
027B:  MOVF   35,F
027C:  BTFSS  03.2
027D:  GOTO   284
027E:  MOVF   36,W
027F:  SUBLW  08
0280:  BTFSC  03.0
0281:  GOTO   284
....................       angle--;
0282:  DECF   36,F
....................    } else {
0283:  GOTO   28B
....................       if(mod1 == 0)
0284:  MOVF   35,F
0285:  BTFSS  03.2
0286:  GOTO   28A
....................       {
....................          mod1 = 1;
0287:  MOVLW  01
0288:  MOVWF  35
....................       } else {
0289:  GOTO   28B
....................          mod1 = 0;
028A:  CLRF   35
....................       }
....................    }
....................    loop1 = 0;
028B:  CLRF   34
028C:  CLRF   33
....................   }
028D:  BCF    0B.2
028E:  BCF    0A.3
028F:  BCF    0A.4
0290:  GOTO   02B
.................... }
.................... 
.................... 
.................... void main() {
*
04CB:  MOVF   03,W
04CC:  ANDLW  1F
04CD:  MOVWF  03
04CE:  MOVLW  FF
04CF:  MOVWF  2B
04D0:  BSF    2B.3
04D1:  MOVF   2B,W
04D2:  BSF    03.5
04D3:  MOVWF  07
04D4:  BCF    03.5
04D5:  BSF    2B.4
04D6:  MOVF   2B,W
04D7:  BSF    03.5
04D8:  MOVWF  07
04D9:  MOVLW  0C
04DA:  MOVWF  13
04DB:  MOVLW  28
04DC:  BCF    03.5
04DD:  MOVWF  14
04DE:  BSF    03.5
04DF:  BCF    14.7
04E0:  BCF    14.6
04E1:  MOVLW  01
04E2:  BCF    03.5
04E3:  MOVWF  2E
04E4:  MOVWF  2F
04E5:  BSF    30.0
04E6:  CLRF   32
04E7:  CLRF   31
04E8:  CLRF   34
04E9:  CLRF   33
04EA:  MOVWF  35
04EB:  MOVLW  1E
04EC:  MOVWF  36
04ED:  CLRF   37
04EE:  CLRF   39
04EF:  CLRF   38
04F0:  BSF    03.5
04F1:  BSF    1F.0
04F2:  BSF    1F.1
04F3:  BSF    1F.2
04F4:  BCF    1F.3
04F5:  MOVLW  07
04F6:  MOVWF  1C
04F7:  BCF    03.7
....................   
....................   enable_interrupts(int_RTCC);
04F8:  BCF    03.5
04F9:  BSF    0B.5
....................   enable_interrupts(global);
04FA:  MOVLW  C0
04FB:  IORWF  0B,F
....................   
....................   set_timer0(0x83);
04FC:  MOVLW  83
04FD:  MOVWF  01
....................   setup_timer_0 (RTCC_internal|RTCC_div_2);
04FE:  BSF    03.5
04FF:  MOVF   01,W
0500:  ANDLW  C0
0501:  MOVWF  01
....................   
....................   delay_ms(500);
0502:  MOVLW  02
0503:  BCF    03.5
0504:  MOVWF  3A
0505:  MOVLW  FA
0506:  MOVWF  3C
0507:  CALL   2A3
0508:  DECFSZ 3A,F
0509:  GOTO   505
....................   
....................   // Initialize the SSD1306 OLED with an I2C addr = 0x7A (default address)
....................   SSD1306_Init(SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS);
050A:  MOVLW  02
050B:  MOVWF  3A
050C:  MOVLW  7A
050D:  MOVWF  3B
050E:  GOTO   2DC
....................   
....................   // clear the display
....................   SSD1306_ClearDisplay();
050F:  CALL   34F
.................... 
....................   SSD1306_GotoXY(1, 1);
0510:  MOVLW  01
0511:  MOVWF  3A
0512:  MOVWF  3B
0513:  CALL   37C
....................   SSD1306_PutC("Minimal Radar Display");
0514:  MOVLW  91
0515:  BSF    03.6
0516:  MOVWF  0D
0517:  MOVLW  02
0518:  MOVWF  0F
0519:  BCF    03.6
051A:  CALL   43E
....................   delay_ms(5000);
051B:  MOVLW  14
051C:  MOVWF  3A
051D:  MOVLW  FA
051E:  MOVWF  3C
051F:  CALL   2A3
0520:  DECFSZ 3A,F
0521:  GOTO   51D
....................   
....................   
....................   SSD1306_ClearDisplay();
0522:  CALL   34F
.................... 
....................   SSD1306_GotoXY(6, 2);
0523:  MOVLW  06
0524:  MOVWF  3A
0525:  MOVLW  02
0526:  MOVWF  3B
0527:  CALL   37C
....................   SSD1306_PutC("Hello world!");
0528:  MOVLW  9C
0529:  BSF    03.6
052A:  MOVWF  0D
052B:  MOVLW  02
052C:  MOVWF  0F
052D:  BCF    03.6
052E:  CALL   43E
....................   delay_ms(2000);
052F:  MOVLW  08
0530:  MOVWF  3A
0531:  MOVLW  FA
0532:  MOVWF  3C
0533:  CALL   2A3
0534:  DECFSZ 3A,F
0535:  GOTO   531
.................... 
....................   while(TRUE) {
....................     SSD1306_GotoXY(10, 5);
0536:  MOVLW  0A
0537:  MOVWF  3A
0538:  MOVLW  05
0539:  MOVWF  3B
053A:  CALL   37C
....................     printf(SSD1306_PutC, "%03u", angle);
053B:  MOVF   36,W
053C:  MOVWF  3A
053D:  MOVLW  03
053E:  MOVWF  3B
053F:  GOTO   494
0540:  GOTO   536
.................... 
....................   }
.................... 
.................... }
.................... // End of code
0541:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
