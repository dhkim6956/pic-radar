CCS PCM C Compiler, Version 5.105Pd, 1               24-11-21 03:54
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\dhkim\Documents\GitHub\pic16f877a_SSD1306_i2c_radar_project\project\project.lst

               ROM used:   1453 words (18%)
                           Largest free fragment is 2048
               RAM used:   38 (10%) at main() level
                           46 (12%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   502
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   238
.................... #include <project.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
004F:  BCF    0A.0
0050:  BCF    0A.1
0051:  BCF    0A.2
0052:  ADDLW  56
0053:  BTFSC  03.0
0054:  INCF   0A,F
0055:  MOVWF  02
0056:  RETLW  00
0057:  RETLW  00
0058:  RETLW  00
0059:  RETLW  00
005A:  RETLW  00
005B:  RETLW  00
005C:  RETLW  00
005D:  RETLW  5F
005E:  RETLW  00
005F:  RETLW  00
0060:  RETLW  00
0061:  RETLW  07
0062:  RETLW  00
0063:  RETLW  07
0064:  RETLW  00
0065:  RETLW  14
0066:  RETLW  7F
0067:  RETLW  14
0068:  RETLW  7F
0069:  RETLW  14
006A:  RETLW  24
006B:  RETLW  2A
006C:  RETLW  7F
006D:  RETLW  2A
006E:  RETLW  12
006F:  RETLW  23
0070:  RETLW  13
0071:  RETLW  08
0072:  RETLW  64
0073:  RETLW  62
0074:  RETLW  36
0075:  RETLW  49
0076:  RETLW  56
0077:  RETLW  20
0078:  RETLW  50
0079:  RETLW  00
007A:  RETLW  08
007B:  RETLW  07
007C:  RETLW  03
007D:  RETLW  00
007E:  RETLW  00
007F:  RETLW  1C
0080:  RETLW  22
0081:  RETLW  41
0082:  RETLW  00
0083:  RETLW  00
0084:  RETLW  41
0085:  RETLW  22
0086:  RETLW  1C
0087:  RETLW  00
0088:  RETLW  2A
0089:  RETLW  1C
008A:  RETLW  7F
008B:  RETLW  1C
008C:  RETLW  2A
008D:  RETLW  08
008E:  RETLW  08
008F:  RETLW  3E
0090:  RETLW  08
0091:  RETLW  08
0092:  RETLW  00
0093:  RETLW  80
0094:  RETLW  70
0095:  RETLW  30
0096:  RETLW  00
0097:  RETLW  08
0098:  RETLW  08
0099:  RETLW  08
009A:  RETLW  08
009B:  RETLW  08
009C:  RETLW  00
009D:  RETLW  00
009E:  RETLW  60
009F:  RETLW  60
00A0:  RETLW  00
00A1:  RETLW  20
00A2:  RETLW  10
00A3:  RETLW  08
00A4:  RETLW  04
00A5:  RETLW  02
00A6:  RETLW  3E
00A7:  RETLW  51
00A8:  RETLW  49
00A9:  RETLW  45
00AA:  RETLW  3E
00AB:  RETLW  00
00AC:  RETLW  42
00AD:  RETLW  7F
00AE:  RETLW  40
00AF:  RETLW  00
00B0:  RETLW  72
00B1:  RETLW  49
00B2:  RETLW  49
00B3:  RETLW  49
00B4:  RETLW  46
00B5:  RETLW  21
00B6:  RETLW  41
00B7:  RETLW  49
00B8:  RETLW  4D
00B9:  RETLW  33
00BA:  RETLW  18
00BB:  RETLW  14
00BC:  RETLW  12
00BD:  RETLW  7F
00BE:  RETLW  10
00BF:  RETLW  27
00C0:  RETLW  45
00C1:  RETLW  45
00C2:  RETLW  45
00C3:  RETLW  39
00C4:  RETLW  3C
00C5:  RETLW  4A
00C6:  RETLW  49
00C7:  RETLW  49
00C8:  RETLW  31
00C9:  RETLW  41
00CA:  RETLW  21
00CB:  RETLW  11
00CC:  RETLW  09
00CD:  RETLW  07
00CE:  RETLW  36
00CF:  RETLW  49
00D0:  RETLW  49
00D1:  RETLW  49
00D2:  RETLW  36
00D3:  RETLW  46
00D4:  RETLW  49
00D5:  RETLW  49
00D6:  RETLW  29
00D7:  RETLW  1E
00D8:  RETLW  00
00D9:  RETLW  00
00DA:  RETLW  14
00DB:  RETLW  00
00DC:  RETLW  00
00DD:  RETLW  00
00DE:  RETLW  40
00DF:  RETLW  34
00E0:  RETLW  00
00E1:  RETLW  00
00E2:  RETLW  00
00E3:  RETLW  08
00E4:  RETLW  14
00E5:  RETLW  22
00E6:  RETLW  41
00E7:  RETLW  14
00E8:  RETLW  14
00E9:  RETLW  14
00EA:  RETLW  14
00EB:  RETLW  14
00EC:  RETLW  00
00ED:  RETLW  41
00EE:  RETLW  22
00EF:  RETLW  14
00F0:  RETLW  08
00F1:  RETLW  02
00F2:  RETLW  01
00F3:  RETLW  59
00F4:  RETLW  09
00F5:  RETLW  06
00F6:  RETLW  3E
00F7:  RETLW  41
00F8:  RETLW  5D
00F9:  RETLW  59
00FA:  RETLW  4E
00FB:  RETLW  7C
00FC:  RETLW  12
00FD:  RETLW  11
00FE:  RETLW  12
00FF:  RETLW  7C
0100:  RETLW  7F
0101:  RETLW  49
0102:  RETLW  49
0103:  RETLW  49
0104:  RETLW  36
0105:  RETLW  3E
0106:  RETLW  41
0107:  RETLW  41
0108:  RETLW  41
0109:  RETLW  22
010A:  RETLW  7F
010B:  RETLW  41
010C:  RETLW  41
010D:  RETLW  41
010E:  RETLW  3E
010F:  RETLW  7F
0110:  RETLW  49
0111:  RETLW  49
0112:  RETLW  49
0113:  RETLW  41
0114:  RETLW  7F
0115:  RETLW  09
0116:  RETLW  09
0117:  RETLW  09
0118:  RETLW  01
0119:  RETLW  3E
011A:  RETLW  41
011B:  RETLW  41
011C:  RETLW  51
011D:  RETLW  73
011E:  RETLW  7F
011F:  RETLW  08
0120:  RETLW  08
0121:  RETLW  08
0122:  RETLW  7F
0123:  RETLW  00
0124:  RETLW  41
0125:  RETLW  7F
0126:  RETLW  41
0127:  RETLW  00
0128:  RETLW  20
0129:  RETLW  40
012A:  RETLW  41
012B:  RETLW  3F
012C:  RETLW  01
012D:  RETLW  7F
012E:  RETLW  08
012F:  RETLW  14
0130:  RETLW  22
0131:  RETLW  41
0132:  RETLW  7F
0133:  RETLW  40
0134:  RETLW  40
0135:  RETLW  40
0136:  RETLW  40
0137:  RETLW  7F
0138:  RETLW  02
0139:  RETLW  1C
013A:  RETLW  02
013B:  RETLW  7F
013C:  RETLW  7F
013D:  RETLW  04
013E:  RETLW  08
013F:  RETLW  10
0140:  RETLW  7F
0141:  RETLW  3E
0142:  RETLW  41
0143:  RETLW  41
0144:  RETLW  41
0145:  RETLW  3E
0146:  RETLW  7F
0147:  RETLW  09
0148:  RETLW  09
0149:  RETLW  09
014A:  RETLW  06
014B:  RETLW  3E
014C:  RETLW  41
014D:  RETLW  51
014E:  RETLW  21
014F:  RETLW  5E
0150:  RETLW  7F
0151:  RETLW  09
0152:  RETLW  19
0153:  RETLW  29
0154:  RETLW  46
0155:  BSF    0A.0
0156:  BCF    0A.1
0157:  BCF    0A.2
0158:  ADDLW  5C
0159:  BTFSC  03.0
015A:  INCF   0A,F
015B:  MOVWF  02
015C:  RETLW  26
015D:  RETLW  49
015E:  RETLW  49
015F:  RETLW  49
0160:  RETLW  32
0161:  RETLW  03
0162:  RETLW  01
0163:  RETLW  7F
0164:  RETLW  01
0165:  RETLW  03
0166:  RETLW  3F
0167:  RETLW  40
0168:  RETLW  40
0169:  RETLW  40
016A:  RETLW  3F
016B:  RETLW  1F
016C:  RETLW  20
016D:  RETLW  40
016E:  RETLW  20
016F:  RETLW  1F
0170:  RETLW  3F
0171:  RETLW  40
0172:  RETLW  38
0173:  RETLW  40
0174:  RETLW  3F
0175:  RETLW  63
0176:  RETLW  14
0177:  RETLW  08
0178:  RETLW  14
0179:  RETLW  63
017A:  RETLW  03
017B:  RETLW  04
017C:  RETLW  78
017D:  RETLW  04
017E:  RETLW  03
017F:  RETLW  61
0180:  RETLW  59
0181:  RETLW  49
0182:  RETLW  4D
0183:  RETLW  43
0184:  RETLW  00
0185:  RETLW  7F
0186:  RETLW  41
0187:  RETLW  41
0188:  RETLW  41
0189:  RETLW  02
018A:  RETLW  04
018B:  RETLW  08
018C:  RETLW  10
018D:  RETLW  20
018E:  RETLW  00
018F:  RETLW  41
0190:  RETLW  41
0191:  RETLW  41
0192:  RETLW  7F
0193:  RETLW  04
0194:  RETLW  02
0195:  RETLW  01
0196:  RETLW  02
0197:  RETLW  04
0198:  RETLW  40
0199:  RETLW  40
019A:  RETLW  40
019B:  RETLW  40
019C:  RETLW  40
019D:  RETLW  00
019E:  RETLW  03
019F:  RETLW  07
01A0:  RETLW  08
01A1:  RETLW  00
01A2:  RETLW  20
01A3:  RETLW  54
01A4:  RETLW  54
01A5:  RETLW  78
01A6:  RETLW  40
01A7:  RETLW  7F
01A8:  RETLW  28
01A9:  RETLW  44
01AA:  RETLW  44
01AB:  RETLW  38
01AC:  RETLW  38
01AD:  RETLW  44
01AE:  RETLW  44
01AF:  RETLW  44
01B0:  RETLW  28
01B1:  RETLW  38
01B2:  RETLW  44
01B3:  RETLW  44
01B4:  RETLW  28
01B5:  RETLW  7F
01B6:  RETLW  38
01B7:  RETLW  54
01B8:  RETLW  54
01B9:  RETLW  54
01BA:  RETLW  18
01BB:  RETLW  00
01BC:  RETLW  08
01BD:  RETLW  7E
01BE:  RETLW  09
01BF:  RETLW  02
01C0:  RETLW  18
01C1:  RETLW  A4
01C2:  RETLW  A4
01C3:  RETLW  9C
01C4:  RETLW  78
01C5:  RETLW  7F
01C6:  RETLW  08
01C7:  RETLW  04
01C8:  RETLW  04
01C9:  RETLW  78
01CA:  RETLW  00
01CB:  RETLW  44
01CC:  RETLW  7D
01CD:  RETLW  40
01CE:  RETLW  00
01CF:  RETLW  20
01D0:  RETLW  40
01D1:  RETLW  40
01D2:  RETLW  3D
01D3:  RETLW  00
01D4:  RETLW  7F
01D5:  RETLW  10
01D6:  RETLW  28
01D7:  RETLW  44
01D8:  RETLW  00
01D9:  RETLW  00
01DA:  RETLW  41
01DB:  RETLW  7F
01DC:  RETLW  40
01DD:  RETLW  00
01DE:  RETLW  7C
01DF:  RETLW  04
01E0:  RETLW  78
01E1:  RETLW  04
01E2:  RETLW  78
01E3:  RETLW  7C
01E4:  RETLW  08
01E5:  RETLW  04
01E6:  RETLW  04
01E7:  RETLW  78
01E8:  RETLW  38
01E9:  RETLW  44
01EA:  RETLW  44
01EB:  RETLW  44
01EC:  RETLW  38
01ED:  RETLW  FC
01EE:  RETLW  18
01EF:  RETLW  24
01F0:  RETLW  24
01F1:  RETLW  18
01F2:  RETLW  18
01F3:  RETLW  24
01F4:  RETLW  24
01F5:  RETLW  18
01F6:  RETLW  FC
01F7:  RETLW  7C
01F8:  RETLW  08
01F9:  RETLW  04
01FA:  RETLW  04
01FB:  RETLW  08
01FC:  RETLW  48
01FD:  RETLW  54
01FE:  RETLW  54
01FF:  RETLW  54
0200:  RETLW  24
0201:  RETLW  04
0202:  RETLW  04
0203:  RETLW  3F
0204:  RETLW  44
0205:  RETLW  24
0206:  RETLW  3C
0207:  RETLW  40
0208:  RETLW  40
0209:  RETLW  20
020A:  RETLW  7C
020B:  RETLW  1C
020C:  RETLW  20
020D:  RETLW  40
020E:  RETLW  20
020F:  RETLW  1C
0210:  RETLW  3C
0211:  RETLW  40
0212:  RETLW  30
0213:  RETLW  40
0214:  RETLW  3C
0215:  RETLW  44
0216:  RETLW  28
0217:  RETLW  10
0218:  RETLW  28
0219:  RETLW  44
021A:  RETLW  4C
021B:  RETLW  90
021C:  RETLW  90
021D:  RETLW  90
021E:  RETLW  7C
021F:  RETLW  44
0220:  RETLW  64
0221:  RETLW  54
0222:  RETLW  4C
0223:  RETLW  44
0224:  RETLW  00
0225:  RETLW  08
0226:  RETLW  36
0227:  RETLW  41
0228:  RETLW  00
0229:  RETLW  00
022A:  RETLW  00
022B:  RETLW  77
022C:  RETLW  00
022D:  RETLW  00
022E:  RETLW  00
022F:  RETLW  41
0230:  RETLW  36
0231:  RETLW  08
0232:  RETLW  00
0233:  RETLW  02
0234:  RETLW  01
0235:  RETLW  02
0236:  RETLW  04
0237:  RETLW  02
*
0291:  DATA CD,34
0292:  DATA EE,34
0293:  DATA ED,30
0294:  DATA 6C,10
0295:  DATA D2,30
0296:  DATA E4,30
0297:  DATA 72,10
0298:  DATA C4,34
0299:  DATA 73,38
029A:  DATA EC,30
029B:  DATA 79,00
*
0382:  CLRF   77
0383:  CLRF   78
0384:  MOVF   47,W
0385:  BCF    03.0
0386:  BTFSC  48.0
0387:  ADDWF  77,F
0388:  RRF    77,F
0389:  RRF    78,F
038A:  BTFSC  48.1
038B:  ADDWF  77,F
038C:  RRF    77,F
038D:  RRF    78,F
038E:  BTFSC  48.2
038F:  ADDWF  77,F
0390:  RRF    77,F
0391:  RRF    78,F
0392:  BTFSC  48.3
0393:  ADDWF  77,F
0394:  RRF    77,F
0395:  RRF    78,F
0396:  BTFSC  48.4
0397:  ADDWF  77,F
0398:  RRF    77,F
0399:  RRF    78,F
039A:  BTFSC  48.5
039B:  ADDWF  77,F
039C:  RRF    77,F
039D:  RRF    78,F
039E:  BTFSC  48.6
039F:  ADDWF  77,F
03A0:  RRF    77,F
03A1:  RRF    78,F
03A2:  BTFSC  48.7
03A3:  ADDWF  77,F
03A4:  RRF    77,F
03A5:  RRF    78,F
03A6:  RETURN
03A7:  MOVF   46,W
03A8:  CLRF   78
03A9:  SUBWF  45,W
03AA:  BTFSC  03.0
03AB:  GOTO   3AF
03AC:  MOVF   45,W
03AD:  MOVWF  77
03AE:  GOTO   3BB
03AF:  CLRF   77
03B0:  MOVLW  08
03B1:  MOVWF  47
03B2:  RLF    45,F
03B3:  RLF    77,F
03B4:  MOVF   46,W
03B5:  SUBWF  77,W
03B6:  BTFSC  03.0
03B7:  MOVWF  77
03B8:  RLF    78,F
03B9:  DECFSZ 47,F
03BA:  GOTO   3B2
03BB:  RETURN
*
0437:  MOVF   0B,W
0438:  MOVWF  3F
0439:  BCF    0B.7
043A:  BSF    03.5
043B:  BSF    03.6
043C:  BSF    0C.7
043D:  BSF    0C.0
043E:  NOP
043F:  NOP
0440:  BCF    03.5
0441:  BCF    03.6
0442:  BTFSC  3F.7
0443:  BSF    0B.7
0444:  BSF    03.6
0445:  MOVF   0C,W
0446:  ANDLW  7F
0447:  BTFSC  03.2
0448:  GOTO   48B
0449:  BCF    03.6
044A:  MOVWF  3F
044B:  BSF    03.6
044C:  MOVF   0D,W
044D:  BCF    03.6
044E:  MOVWF  40
044F:  BSF    03.6
0450:  MOVF   0F,W
0451:  BCF    03.6
0452:  MOVWF  41
0453:  MOVF   3F,W
0454:  MOVWF  42
0455:  CALL   3BC
0456:  MOVF   40,W
0457:  BSF    03.6
0458:  MOVWF  0D
0459:  BCF    03.6
045A:  MOVF   41,W
045B:  BSF    03.6
045C:  MOVWF  0F
045D:  BCF    03.6
045E:  MOVF   0B,W
045F:  MOVWF  42
0460:  BCF    0B.7
0461:  BSF    03.5
0462:  BSF    03.6
0463:  BSF    0C.7
0464:  BSF    0C.0
0465:  NOP
0466:  NOP
0467:  BCF    03.5
0468:  BCF    03.6
0469:  BTFSC  42.7
046A:  BSF    0B.7
046B:  BSF    03.6
046C:  RLF    0C,W
046D:  RLF    0E,W
046E:  ANDLW  7F
046F:  BTFSC  03.2
0470:  GOTO   48B
0471:  BCF    03.6
0472:  MOVWF  3F
0473:  BSF    03.6
0474:  MOVF   0D,W
0475:  BCF    03.6
0476:  MOVWF  40
0477:  BSF    03.6
0478:  MOVF   0F,W
0479:  BCF    03.6
047A:  MOVWF  41
047B:  MOVF   3F,W
047C:  MOVWF  42
047D:  CALL   3BC
047E:  MOVF   40,W
047F:  BSF    03.6
0480:  MOVWF  0D
0481:  BCF    03.6
0482:  MOVF   41,W
0483:  BSF    03.6
0484:  MOVWF  0F
0485:  INCF   0D,F
0486:  BTFSC  03.2
0487:  INCF   0F,F
0488:  BCF    03.6
0489:  GOTO   437
048A:  BSF    03.6
048B:  BCF    03.6
048C:  BCF    0A.3
048D:  BCF    0A.4
048E:  GOTO   552 (RETURN)
048F:  MOVLW  10
0490:  MOVWF  43
0491:  CLRF   77
0492:  CLRF   7A
0493:  RRF    40,F
0494:  RRF    3F,F
0495:  BTFSS  03.0
0496:  GOTO   49D
0497:  MOVF   41,W
0498:  ADDWF  77,F
0499:  BTFSC  03.0
049A:  INCF   7A,F
049B:  MOVF   42,W
049C:  ADDWF  7A,F
049D:  RRF    7A,F
049E:  RRF    77,F
049F:  RRF    79,F
04A0:  RRF    78,F
04A1:  DECFSZ 43,F
04A2:  GOTO   493
04A3:  BCF    0A.3
04A4:  BCF    0A.4
04A5:  GOTO   588 (RETURN)
04A6:  CLRF   78
04A7:  CLRF   79
04A8:  CLRF   77
04A9:  CLRF   7A
04AA:  MOVF   44,W
04AB:  BTFSS  03.2
04AC:  GOTO   4B0
04AD:  MOVF   43,W
04AE:  BTFSC  03.2
04AF:  GOTO   4CA
04B0:  MOVLW  10
04B1:  MOVWF  45
04B2:  BCF    03.0
04B3:  RLF    41,F
04B4:  RLF    42,F
04B5:  RLF    77,F
04B6:  RLF    7A,F
04B7:  MOVF   44,W
04B8:  SUBWF  7A,W
04B9:  BTFSS  03.2
04BA:  GOTO   4BD
04BB:  MOVF   43,W
04BC:  SUBWF  77,W
04BD:  BTFSS  03.0
04BE:  GOTO   4C6
04BF:  MOVF   43,W
04C0:  SUBWF  77,F
04C1:  BTFSS  03.0
04C2:  DECF   7A,F
04C3:  MOVF   44,W
04C4:  SUBWF  7A,F
04C5:  BSF    03.0
04C6:  RLF    78,F
04C7:  RLF    79,F
04C8:  DECFSZ 45,F
04C9:  GOTO   4B2
04CA:  RETURN
04CB:  MOVF   78,W
04CC:  MOVF   3F,W
04CD:  MOVWF  45
04CE:  MOVLW  64
04CF:  MOVWF  46
04D0:  CALL   3A7
04D1:  MOVF   77,W
04D2:  MOVWF  3F
04D3:  MOVF   78,W
04D4:  MOVLW  30
04D5:  BTFSS  03.2
04D6:  GOTO   4DE
04D7:  BTFSS  40.1
04D8:  GOTO   4E5
04D9:  BTFSC  40.3
04DA:  GOTO   4E5
04DB:  BTFSC  40.4
04DC:  MOVLW  20
04DD:  GOTO   4E1
04DE:  BCF    40.3
04DF:  BCF    40.4
04E0:  BSF    40.0
04E1:  ADDWF  78,F
04E2:  MOVF   78,W
04E3:  MOVWF  42
04E4:  CALL   3BC
04E5:  MOVF   3F,W
04E6:  MOVWF  45
04E7:  MOVLW  0A
04E8:  MOVWF  46
04E9:  CALL   3A7
04EA:  MOVF   77,W
04EB:  MOVWF  3F
04EC:  MOVF   78,W
04ED:  MOVLW  30
04EE:  BTFSS  03.2
04EF:  GOTO   4F6
04F0:  BTFSC  40.3
04F1:  GOTO   4FA
04F2:  BTFSS  40.0
04F3:  GOTO   4FA
04F4:  BTFSC  40.4
04F5:  MOVLW  20
04F6:  ADDWF  78,F
04F7:  MOVF   78,W
04F8:  MOVWF  42
04F9:  CALL   3BC
04FA:  MOVLW  30
04FB:  ADDWF  3F,F
04FC:  MOVF   3F,W
04FD:  MOVWF  42
04FE:  CALL   3BC
04FF:  BCF    0A.3
0500:  BCF    0A.4
0501:  GOTO   5AB (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=20MHz)
*
029C:  MOVLW  41
029D:  MOVWF  04
029E:  BCF    03.7
029F:  MOVF   00,W
02A0:  BTFSC  03.2
02A1:  GOTO   2AF
02A2:  MOVLW  06
02A3:  MOVWF  78
02A4:  CLRF   77
02A5:  DECFSZ 77,F
02A6:  GOTO   2A5
02A7:  DECFSZ 78,F
02A8:  GOTO   2A4
02A9:  MOVLW  7B
02AA:  MOVWF  77
02AB:  DECFSZ 77,F
02AC:  GOTO   2AB
02AD:  DECFSZ 00,F
02AE:  GOTO   2A2
02AF:  RETURN
.................... 
.................... 
.................... 
.................... // Interfacing PIC16F877A with SSD1306 OLED display (128x64 Pixel)
.................... // http://simple-circuit.com/
.................... 
.................... #define SSD1306_RST   PIN_D4
.................... 
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP
.................... #use I2C(MASTER, I2C1, FAST = 400000, stream = SSD1306_STREAM)  // Initialize I2C
02B0:  BCF    14.7
02B1:  BCF    0C.3
02B2:  MOVF   48,W
02B3:  MOVWF  13
02B4:  MOVLW  02
02B5:  BTFSC  14.7
02B6:  GOTO   2BE
02B7:  BSF    03.5
02B8:  BTFSC  14.2
02B9:  GOTO   2B8
02BA:  MOVLW  00
02BB:  BTFSC  11.6
02BC:  MOVLW  01
02BD:  BCF    03.5
02BE:  MOVWF  78
02BF:  RETURN
.................... 
.................... #byte porta = 0x05
.................... 
.................... // Include SSD1306 OLED driver source code
.................... #include <SSD1306.c>
.................... /******************************************************************************
....................  SSD1306 OLED driver for CCS PIC C compiler (SSD1306.c)                       *
....................                                                                               *
....................  The driver is for I2C mode only.                                             *
....................                                                                               *
....................  http://simple-circuit.com/                                                   *
....................                                                                               *
.................... *******************************************************************************/
.................... 
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... //------------------------------ Definitions ---------------------------------//
.................... 
.................... #define SSD1306_I2C_ADDRESS   0x7A
.................... 
.................... #if !defined SSD1306_128_32 && !defined SSD1306_96_16
.................... #define SSD1306_128_64
.................... #endif
.................... #if defined SSD1306_128_32 && defined SSD1306_96_16
....................   #error "Only one SSD1306 display can be specified at once"
.................... #endif
.................... 
.................... #if defined SSD1306_128_64
....................   #define SSD1306_LCDWIDTH            128
....................   #define SSD1306_LCDHEIGHT            64
.................... #endif
.................... #if defined SSD1306_128_32
....................   #define SSD1306_LCDWIDTH            128
....................   #define SSD1306_LCDHEIGHT            32
.................... #endif
.................... #if defined SSD1306_96_16
....................   #define SSD1306_LCDWIDTH             96
....................   #define SSD1306_LCDHEIGHT            16
.................... #endif
.................... 
.................... #define SSD1306_SETCONTRAST          0x81
.................... #define SSD1306_DISPLAYALLON_RESUME  0xA4
.................... #define SSD1306_DISPLAYALLON         0xA5
.................... #define SSD1306_NORMALDISPLAY        0xA6
.................... #define SSD1306_INVERTDISPLAY_       0xA7
.................... #define SSD1306_DISPLAYOFF           0xAE
.................... #define SSD1306_DISPLAYON            0xAF
.................... #define SSD1306_SETDISPLAYOFFSET     0xD3
.................... #define SSD1306_SETCOMPINS           0xDA
.................... #define SSD1306_SETVCOMDETECT        0xDB
.................... #define SSD1306_SETDISPLAYCLOCKDIV   0xD5
.................... #define SSD1306_SETPRECHARGE         0xD9
.................... #define SSD1306_SETMULTIPLEX         0xA8
.................... #define SSD1306_SETLOWCOLUMN         0x00
.................... #define SSD1306_SETHIGHCOLUMN        0x10
.................... #define SSD1306_SETSTARTLINE         0x40
.................... #define SSD1306_MEMORYMODE           0x20
.................... #define SSD1306_COLUMNADDR           0x21
.................... #define SSD1306_PAGEADDR             0x22
.................... #define SSD1306_COMSCANINC           0xC0
.................... #define SSD1306_COMSCANDEC           0xC8
.................... #define SSD1306_SEGREMAP             0xA0
.................... #define SSD1306_CHARGEPUMP           0x8D
.................... #define SSD1306_EXTERNALVCC          0x01
.................... #define SSD1306_SWITCHCAPVCC         0x02
.................... 
.................... // Scrolling #defines
.................... #define SSD1306_ACTIVATE_SCROLL                      0x2F
.................... #define SSD1306_DEACTIVATE_SCROLL                    0x2E
.................... #define SSD1306_SET_VERTICAL_SCROLL_AREA             0xA3
.................... #define SSD1306_RIGHT_HORIZONTAL_SCROLL              0x26
.................... #define SSD1306_LEFT_HORIZONTAL_SCROLL               0x27
.................... #define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
.................... #define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL  0x2A
.................... 
.................... 
.................... uint8_t _i2caddr, _vccstate, x_pos = 1, y_pos = 1;
.................... 
.................... //--------------------------------------------------------------------------//
.................... 
.................... int1 wrap = TRUE;
.................... 
.................... const char Font[] = {
.................... 0x00, 0x00, 0x00, 0x00, 0x00,
.................... 0x00, 0x00, 0x5F, 0x00, 0x00,
.................... 0x00, 0x07, 0x00, 0x07, 0x00,
.................... 0x14, 0x7F, 0x14, 0x7F, 0x14,
.................... 0x24, 0x2A, 0x7F, 0x2A, 0x12,
.................... 0x23, 0x13, 0x08, 0x64, 0x62,
.................... 0x36, 0x49, 0x56, 0x20, 0x50,
.................... 0x00, 0x08, 0x07, 0x03, 0x00,
.................... 0x00, 0x1C, 0x22, 0x41, 0x00,
.................... 0x00, 0x41, 0x22, 0x1C, 0x00,
.................... 0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
.................... 0x08, 0x08, 0x3E, 0x08, 0x08,
.................... 0x00, 0x80, 0x70, 0x30, 0x00,
.................... 0x08, 0x08, 0x08, 0x08, 0x08,
.................... 0x00, 0x00, 0x60, 0x60, 0x00,
.................... 0x20, 0x10, 0x08, 0x04, 0x02,
.................... 0x3E, 0x51, 0x49, 0x45, 0x3E,
.................... 0x00, 0x42, 0x7F, 0x40, 0x00,
.................... 0x72, 0x49, 0x49, 0x49, 0x46,
.................... 0x21, 0x41, 0x49, 0x4D, 0x33,
.................... 0x18, 0x14, 0x12, 0x7F, 0x10,
.................... 0x27, 0x45, 0x45, 0x45, 0x39,
.................... 0x3C, 0x4A, 0x49, 0x49, 0x31,
.................... 0x41, 0x21, 0x11, 0x09, 0x07,
.................... 0x36, 0x49, 0x49, 0x49, 0x36,
.................... 0x46, 0x49, 0x49, 0x29, 0x1E,
.................... 0x00, 0x00, 0x14, 0x00, 0x00,
.................... 0x00, 0x40, 0x34, 0x00, 0x00,
.................... 0x00, 0x08, 0x14, 0x22, 0x41,
.................... 0x14, 0x14, 0x14, 0x14, 0x14,
.................... 0x00, 0x41, 0x22, 0x14, 0x08,
.................... 0x02, 0x01, 0x59, 0x09, 0x06,
.................... 0x3E, 0x41, 0x5D, 0x59, 0x4E,
.................... 0x7C, 0x12, 0x11, 0x12, 0x7C,
.................... 0x7F, 0x49, 0x49, 0x49, 0x36,
.................... 0x3E, 0x41, 0x41, 0x41, 0x22,
.................... 0x7F, 0x41, 0x41, 0x41, 0x3E,
.................... 0x7F, 0x49, 0x49, 0x49, 0x41,
.................... 0x7F, 0x09, 0x09, 0x09, 0x01,
.................... 0x3E, 0x41, 0x41, 0x51, 0x73,
.................... 0x7F, 0x08, 0x08, 0x08, 0x7F,
.................... 0x00, 0x41, 0x7F, 0x41, 0x00,
.................... 0x20, 0x40, 0x41, 0x3F, 0x01,
.................... 0x7F, 0x08, 0x14, 0x22, 0x41,
.................... 0x7F, 0x40, 0x40, 0x40, 0x40,
.................... 0x7F, 0x02, 0x1C, 0x02, 0x7F,
.................... 0x7F, 0x04, 0x08, 0x10, 0x7F,
.................... 0x3E, 0x41, 0x41, 0x41, 0x3E,
.................... 0x7F, 0x09, 0x09, 0x09, 0x06,
.................... 0x3E, 0x41, 0x51, 0x21, 0x5E,
.................... 0x7F, 0x09, 0x19, 0x29, 0x46
.................... };
.................... const char Font2[] = {
.................... 0x26, 0x49, 0x49, 0x49, 0x32,
.................... 0x03, 0x01, 0x7F, 0x01, 0x03,
.................... 0x3F, 0x40, 0x40, 0x40, 0x3F,
.................... 0x1F, 0x20, 0x40, 0x20, 0x1F,
.................... 0x3F, 0x40, 0x38, 0x40, 0x3F,
.................... 0x63, 0x14, 0x08, 0x14, 0x63,
.................... 0x03, 0x04, 0x78, 0x04, 0x03,
.................... 0x61, 0x59, 0x49, 0x4D, 0x43,
.................... 0x00, 0x7F, 0x41, 0x41, 0x41,
.................... 0x02, 0x04, 0x08, 0x10, 0x20,
.................... 0x00, 0x41, 0x41, 0x41, 0x7F,
.................... 0x04, 0x02, 0x01, 0x02, 0x04,
.................... 0x40, 0x40, 0x40, 0x40, 0x40,
.................... 0x00, 0x03, 0x07, 0x08, 0x00,
.................... 0x20, 0x54, 0x54, 0x78, 0x40,
.................... 0x7F, 0x28, 0x44, 0x44, 0x38,
.................... 0x38, 0x44, 0x44, 0x44, 0x28,
.................... 0x38, 0x44, 0x44, 0x28, 0x7F,
.................... 0x38, 0x54, 0x54, 0x54, 0x18,
.................... 0x00, 0x08, 0x7E, 0x09, 0x02,
.................... 0x18, 0xA4, 0xA4, 0x9C, 0x78,
.................... 0x7F, 0x08, 0x04, 0x04, 0x78,
.................... 0x00, 0x44, 0x7D, 0x40, 0x00,
.................... 0x20, 0x40, 0x40, 0x3D, 0x00,
.................... 0x7F, 0x10, 0x28, 0x44, 0x00,
.................... 0x00, 0x41, 0x7F, 0x40, 0x00,
.................... 0x7C, 0x04, 0x78, 0x04, 0x78,
.................... 0x7C, 0x08, 0x04, 0x04, 0x78,
.................... 0x38, 0x44, 0x44, 0x44, 0x38,
.................... 0xFC, 0x18, 0x24, 0x24, 0x18,
.................... 0x18, 0x24, 0x24, 0x18, 0xFC,
.................... 0x7C, 0x08, 0x04, 0x04, 0x08,
.................... 0x48, 0x54, 0x54, 0x54, 0x24,
.................... 0x04, 0x04, 0x3F, 0x44, 0x24,
.................... 0x3C, 0x40, 0x40, 0x20, 0x7C,
.................... 0x1C, 0x20, 0x40, 0x20, 0x1C,
.................... 0x3C, 0x40, 0x30, 0x40, 0x3C,
.................... 0x44, 0x28, 0x10, 0x28, 0x44,
.................... 0x4C, 0x90, 0x90, 0x90, 0x7C,
.................... 0x44, 0x64, 0x54, 0x4C, 0x44,
.................... 0x00, 0x08, 0x36, 0x41, 0x00,
.................... 0x00, 0x00, 0x77, 0x00, 0x00,
.................... 0x00, 0x41, 0x36, 0x08, 0x00,
.................... 0x02, 0x01, 0x02, 0x04, 0x02
.................... };
.................... 
.................... 
.................... void ssd1306_command(uint8_t c) {
02C0:  CLRF   47
....................     uint8_t control = 0x00;   // Co = 0, D/C = 0
....................     I2C_Start(SSD1306_STREAM);
02C1:  BSF    03.5
02C2:  BSF    11.0
02C3:  BTFSC  11.0
02C4:  GOTO   2C3
....................     I2C_Write(SSD1306_STREAM, _i2caddr);
02C5:  BCF    03.5
02C6:  MOVF   2C,W
02C7:  MOVWF  48
02C8:  CALL   2B0
....................     I2C_Write(SSD1306_STREAM, control);
02C9:  MOVF   47,W
02CA:  MOVWF  48
02CB:  CALL   2B0
....................     I2C_Write(SSD1306_STREAM, c);
02CC:  MOVF   46,W
02CD:  MOVWF  48
02CE:  CALL   2B0
....................     I2C_Stop(SSD1306_STREAM);
02CF:  BSF    03.5
02D0:  BSF    11.2
02D1:  BTFSC  11.2
02D2:  GOTO   2D1
02D3:  BCF    03.5
02D4:  RETURN
.................... }
.................... 
.................... void SSD1306_Init(uint8_t vccstate = SSD1306_SWITCHCAPVCC, uint8_t i2caddr = SSD1306_I2C_ADDRESS) {
....................   _vccstate = vccstate;
02D5:  MOVF   3F,W
02D6:  MOVWF  2D
....................   _i2caddr  = i2caddr;
02D7:  MOVF   40,W
02D8:  MOVWF  2C
....................   #ifdef SSD1306_RST
....................     output_low(SSD1306_RST);
02D9:  BSF    03.5
02DA:  BCF    08.4
02DB:  BCF    03.5
02DC:  BCF    08.4
....................     output_drive(SSD1306_RST);
02DD:  BSF    03.5
02DE:  BCF    08.4
....................     delay_ms(10);
02DF:  MOVLW  0A
02E0:  BCF    03.5
02E1:  MOVWF  41
02E2:  CALL   29C
....................     output_high(SSD1306_RST);
02E3:  BSF    03.5
02E4:  BCF    08.4
02E5:  BCF    03.5
02E6:  BSF    08.4
....................   #endif
....................   // Init sequence
....................   ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
02E7:  MOVLW  AE
02E8:  MOVWF  46
02E9:  CALL   2C0
....................   ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
02EA:  MOVLW  D5
02EB:  MOVWF  46
02EC:  CALL   2C0
....................   ssd1306_command(0x80);                                  // the suggested ratio 0x80
02ED:  MOVLW  80
02EE:  MOVWF  46
02EF:  CALL   2C0
.................... 
....................   ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
02F0:  MOVLW  A8
02F1:  MOVWF  46
02F2:  CALL   2C0
....................   ssd1306_command(SSD1306_LCDHEIGHT - 1);
02F3:  MOVLW  3F
02F4:  MOVWF  46
02F5:  CALL   2C0
.................... 
....................   ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
02F6:  MOVLW  D3
02F7:  MOVWF  46
02F8:  CALL   2C0
....................   ssd1306_command(0x0);                                   // no offset
02F9:  CLRF   46
02FA:  CALL   2C0
....................   ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
02FB:  MOVLW  40
02FC:  MOVWF  46
02FD:  CALL   2C0
....................   ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
02FE:  MOVLW  8D
02FF:  MOVWF  46
0300:  CALL   2C0
....................   if (vccstate == SSD1306_EXTERNALVCC)
0301:  DECFSZ 3F,W
0302:  GOTO   307
....................     { ssd1306_command(0x10); }
0303:  MOVLW  10
0304:  MOVWF  46
0305:  CALL   2C0
0306:  GOTO   30A
....................   else
....................     { ssd1306_command(0x14); }
0307:  MOVLW  14
0308:  MOVWF  46
0309:  CALL   2C0
....................   ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
030A:  MOVLW  20
030B:  MOVWF  46
030C:  CALL   2C0
....................   ssd1306_command(0x00);                                  // 0x0 act like ks0108
030D:  CLRF   46
030E:  CALL   2C0
....................   ssd1306_command(SSD1306_SEGREMAP | 0x1);
030F:  MOVLW  A1
0310:  MOVWF  46
0311:  CALL   2C0
....................   ssd1306_command(SSD1306_COMSCANDEC);
0312:  MOVLW  C8
0313:  MOVWF  46
0314:  CALL   2C0
.................... 
....................  #if defined SSD1306_128_32
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
....................   ssd1306_command(0x02);
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
....................   ssd1306_command(0x8F);
.................... 
.................... #elif defined SSD1306_128_64
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
0315:  MOVLW  DA
0316:  MOVWF  46
0317:  CALL   2C0
....................   ssd1306_command(0x12);
0318:  MOVLW  12
0319:  MOVWF  46
031A:  CALL   2C0
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
031B:  MOVLW  81
031C:  MOVWF  46
031D:  CALL   2C0
....................   if (vccstate == SSD1306_EXTERNALVCC)
031E:  DECFSZ 3F,W
031F:  GOTO   324
....................     { ssd1306_command(0x9F); }
0320:  MOVLW  9F
0321:  MOVWF  46
0322:  CALL   2C0
0323:  GOTO   327
....................   else
....................     { ssd1306_command(0xCF); }
0324:  MOVLW  CF
0325:  MOVWF  46
0326:  CALL   2C0
.................... 
.................... #elif defined SSD1306_96_16
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
....................   ssd1306_command(0x2);   //ada x12
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
....................   if (vccstate == SSD1306_EXTERNALVCC)
....................     { ssd1306_command(0x10); }
....................   else
....................     { ssd1306_command(0xAF); }
.................... 
.................... #endif
.................... 
....................   ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
0327:  MOVLW  D9
0328:  MOVWF  46
0329:  CALL   2C0
....................   if (vccstate == SSD1306_EXTERNALVCC)
032A:  DECFSZ 3F,W
032B:  GOTO   330
....................     { ssd1306_command(0x22); }
032C:  MOVLW  22
032D:  MOVWF  46
032E:  CALL   2C0
032F:  GOTO   333
....................   else
....................     { ssd1306_command(0xF1); }
0330:  MOVLW  F1
0331:  MOVWF  46
0332:  CALL   2C0
....................   ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
0333:  MOVLW  DB
0334:  MOVWF  46
0335:  CALL   2C0
....................   ssd1306_command(0x40);
0336:  MOVLW  40
0337:  MOVWF  46
0338:  CALL   2C0
....................   ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
0339:  MOVLW  A4
033A:  MOVWF  46
033B:  CALL   2C0
....................   ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
033C:  MOVLW  A6
033D:  MOVWF  46
033E:  CALL   2C0
.................... 
....................   ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
033F:  MOVLW  2E
0340:  MOVWF  46
0341:  CALL   2C0
.................... 
....................   ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
0342:  MOVLW  AF
0343:  MOVWF  46
0344:  CALL   2C0
0345:  BCF    0A.3
0346:  BCF    0A.4
0347:  GOTO   546 (RETURN)
.................... }
.................... 
.................... void SSD1306_StartScrollRight(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_RIGHT_HORIZONTAL_SCROLL);
....................   ssd1306_command(0X00);
....................   ssd1306_command(start);  // start page
....................   ssd1306_command(0X00);
....................   ssd1306_command(stop);   // end page
....................   ssd1306_command(0X00);
....................   ssd1306_command(0XFF);
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_StartScrollLeft(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_LEFT_HORIZONTAL_SCROLL);
....................   ssd1306_command(0X00);
....................   ssd1306_command(start);
....................   ssd1306_command(0X00);
....................   ssd1306_command(stop);
....................   ssd1306_command(0X00);
....................   ssd1306_command(0XFF);
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_StartScrollDiagRight(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA);
....................   ssd1306_command(0X00);
....................   ssd1306_command(SSD1306_LCDHEIGHT);
....................   ssd1306_command(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL);
....................   ssd1306_command(0X00);
....................   ssd1306_command(start);
....................   ssd1306_command(0X00);
....................   ssd1306_command(stop);
....................   ssd1306_command(0X01);
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_StartScrollDiagLeft(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA);
....................   ssd1306_command(0X00);
....................   ssd1306_command(SSD1306_LCDHEIGHT);
....................   ssd1306_command(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL);
....................   ssd1306_command(0X00);
....................   ssd1306_command(start);
....................   ssd1306_command(0X00);
....................   ssd1306_command(stop);
....................   ssd1306_command(0X01);
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_StopScroll(void) {
....................   ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_Dim(int1 dim) {
....................   uint8_t contrast;
....................   if (dim)
....................     contrast = 0; // Dimmed display
....................   else {
....................     if (_vccstate == SSD1306_EXTERNALVCC)
....................       contrast = 0x9F;
....................     else
....................       contrast = 0xCF;
....................   }
....................   // the range of contrast to too small to be really useful
....................   // it is useful to dim the display
....................   ssd1306_command(SSD1306_SETCONTRAST);
....................   ssd1306_command(contrast);
.................... }
.................... 
.................... void SSD1306_SetTextWrap(int1 w) {
....................   wrap = w;
.................... }
.................... 
.................... void SSD1306_InvertDisplay(int1 i) {
....................   if (i)
....................     ssd1306_command(SSD1306_INVERTDISPLAY_);
....................   else
....................     ssd1306_command(SSD1306_NORMALDISPLAY);
.................... }
.................... 
.................... void SSD1306_GotoXY(uint8_t x, uint8_t y) {
....................   if((x > 21) || y > 8)
*
0375:  MOVF   3F,W
0376:  SUBLW  15
0377:  BTFSS  03.0
0378:  GOTO   37C
0379:  MOVF   40,W
037A:  SUBLW  08
037B:  BTFSS  03.0
....................     return;
037C:  GOTO   381
....................   x_pos = x;
037D:  MOVF   3F,W
037E:  MOVWF  2E
....................   y_pos = y;
037F:  MOVF   40,W
0380:  MOVWF  2F
0381:  RETURN
.................... }
.................... 
.................... void SSD1306_PutC(uint8_t c) {
....................   uint8_t font_c;
....................   if((c < ' ') || (c > '~'))
*
03BC:  MOVF   42,W
03BD:  SUBLW  1F
03BE:  BTFSC  03.0
03BF:  GOTO   3C4
03C0:  MOVF   42,W
03C1:  SUBLW  7E
03C2:  BTFSC  03.0
03C3:  GOTO   3C6
....................     c = '?';
03C4:  MOVLW  3F
03C5:  MOVWF  42
....................   ssd1306_command(SSD1306_COLUMNADDR);
03C6:  MOVLW  21
03C7:  MOVWF  46
03C8:  CALL   2C0
....................   ssd1306_command(6 * (x_pos - 1));
03C9:  MOVLW  01
03CA:  SUBWF  2E,W
03CB:  MOVWF  45
03CC:  MOVLW  06
03CD:  MOVWF  47
03CE:  MOVF   45,W
03CF:  MOVWF  48
03D0:  CALL   382
03D1:  MOVF   78,W
03D2:  MOVWF  45
03D3:  MOVWF  46
03D4:  CALL   2C0
....................   ssd1306_command(6 * (x_pos - 1) + 4); // Column end address (127 = reset)
03D5:  MOVLW  01
03D6:  SUBWF  2E,W
03D7:  MOVWF  45
03D8:  MOVLW  06
03D9:  MOVWF  47
03DA:  MOVF   45,W
03DB:  MOVWF  48
03DC:  CALL   382
03DD:  MOVLW  04
03DE:  ADDWF  78,W
03DF:  MOVWF  45
03E0:  MOVWF  46
03E1:  CALL   2C0
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
03E2:  MOVLW  22
03E3:  MOVWF  46
03E4:  CALL   2C0
....................   ssd1306_command(y_pos - 1); // Page start address (0 = reset)
03E5:  MOVLW  01
03E6:  SUBWF  2F,W
03E7:  MOVWF  45
03E8:  MOVWF  46
03E9:  CALL   2C0
....................   ssd1306_command(y_pos - 1); // Page end address
03EA:  MOVLW  01
03EB:  SUBWF  2F,W
03EC:  MOVWF  45
03ED:  MOVWF  46
03EE:  CALL   2C0
....................   
....................   I2C_Start(SSD1306_STREAM);
03EF:  BSF    03.5
03F0:  BSF    11.0
03F1:  BTFSC  11.0
03F2:  GOTO   3F1
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
03F3:  BCF    03.5
03F4:  MOVF   2C,W
03F5:  MOVWF  48
03F6:  CALL   2B0
....................   I2C_Write(SSD1306_STREAM, 0x40);
03F7:  MOVLW  40
03F8:  MOVWF  48
03F9:  CALL   2B0
....................   
....................   for(uint8_t i = 0; i < 5; i++ ) {
03FA:  CLRF   44
03FB:  MOVF   44,W
03FC:  SUBLW  04
03FD:  BTFSS  03.0
03FE:  GOTO   421
....................     if(c < 'S')
03FF:  MOVF   42,W
0400:  SUBLW  52
0401:  BTFSS  03.0
0402:  GOTO   410
....................       font_c = font[(c - 32) * 5 + i];
0403:  MOVLW  20
0404:  SUBWF  42,W
0405:  MOVWF  46
0406:  MOVWF  47
0407:  MOVLW  05
0408:  MOVWF  48
0409:  CALL   382
040A:  MOVF   44,W
040B:  ADDWF  78,W
040C:  CALL   04F
040D:  MOVWF  78
040E:  MOVWF  43
040F:  GOTO   41C
....................     else
....................       font_c = font2[(c - 'S') * 5 + i];
0410:  MOVLW  53
0411:  SUBWF  42,W
0412:  MOVWF  46
0413:  MOVWF  47
0414:  MOVLW  05
0415:  MOVWF  48
0416:  CALL   382
0417:  MOVF   44,W
0418:  ADDWF  78,W
0419:  CALL   155
041A:  MOVWF  78
041B:  MOVWF  43
....................   
....................     I2C_Write(SSD1306_STREAM, font_c);
041C:  MOVF   43,W
041D:  MOVWF  48
041E:  CALL   2B0
041F:  INCF   44,F
0420:  GOTO   3FB
....................   }
....................   I2C_Stop(SSD1306_STREAM);
0421:  BSF    03.5
0422:  BSF    11.2
0423:  BTFSC  11.2
0424:  GOTO   423
.................... 
....................   x_pos = x_pos % 21 + 1;
0425:  BCF    03.5
0426:  MOVF   2E,W
0427:  MOVWF  45
0428:  MOVLW  15
0429:  MOVWF  46
042A:  CALL   3A7
042B:  MOVLW  01
042C:  ADDWF  77,W
042D:  MOVWF  2E
....................   if (wrap && (x_pos == 1))
042E:  BTFSS  30.0
042F:  GOTO   436
0430:  DECFSZ 2E,W
0431:  GOTO   436
....................     y_pos = y_pos % 8 + 1;
0432:  MOVF   2F,W
0433:  ANDLW  07
0434:  ADDLW  01
0435:  MOVWF  2F
0436:  RETURN
.................... 
.................... }
.................... 
.................... void SSD1306_PutCustomC(char *c) {
....................   uint8_t line;
....................   ssd1306_command(SSD1306_COLUMNADDR);
....................   ssd1306_command(6 * (x_pos - 1));
....................   ssd1306_command(6 * (x_pos - 1) + 4); // Column end address (127 = reset)
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
....................   ssd1306_command(y_pos - 1); // Page start address (0 = reset)
....................   ssd1306_command(y_pos - 1); // Page end address
....................   
....................   I2C_Start(SSD1306_STREAM);
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
....................   I2C_Write(SSD1306_STREAM, 0x40);
....................   
....................   for(uint8_t i = 0; i < 5; i++ ) {
....................     line = c[i];
....................     I2C_Write(SSD1306_STREAM, line);
....................   }
....................   I2C_Stop(SSD1306_STREAM);
.................... 
....................   x_pos = x_pos % 21 + 1;
....................   if (wrap && (x_pos == 1))
....................     y_pos = y_pos % 8 + 1;
.................... 
.................... }
.................... 
.................... void SSD1306_ClearDisplay() {
.................... 
....................   ssd1306_command(SSD1306_COLUMNADDR);
*
0348:  MOVLW  21
0349:  MOVWF  46
034A:  CALL   2C0
....................   ssd1306_command(0);    // Column start address
034B:  CLRF   46
034C:  CALL   2C0
....................   #if defined SSD1306_128_64 || defined SSD1306_128_32
....................   ssd1306_command(127);  // Column end address
034D:  MOVLW  7F
034E:  MOVWF  46
034F:  CALL   2C0
....................   #else
....................     ssd1306_command(95); // Column end address
....................   #endif
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
0350:  MOVLW  22
0351:  MOVWF  46
0352:  CALL   2C0
....................   ssd1306_command(0);   // Page start address (0 = reset)
0353:  CLRF   46
0354:  CALL   2C0
....................   #if defined SSD1306_128_64
....................   ssd1306_command(7);   // Page end address
0355:  MOVLW  07
0356:  MOVWF  46
0357:  CALL   2C0
....................   #elif defined SSD1306_128_32
....................   ssd1306_command(3);   // Page end address
....................   #elif defined SSD1306_96_16
....................   ssd1306_command(1);   // Page end address
....................   #endif
.................... 
....................   I2C_Start(SSD1306_STREAM);
0358:  BSF    03.5
0359:  BSF    11.0
035A:  BTFSC  11.0
035B:  GOTO   35A
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
035C:  BCF    03.5
035D:  MOVF   2C,W
035E:  MOVWF  48
035F:  CALL   2B0
....................   I2C_Write(SSD1306_STREAM, 0x40);
0360:  MOVLW  40
0361:  MOVWF  48
0362:  CALL   2B0
.................... 
....................   for(uint16_t i = 0; i < SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8; i++ )
0363:  CLRF   40
0364:  CLRF   3F
0365:  MOVF   40,W
0366:  SUBLW  03
0367:  BTFSS  03.0
0368:  GOTO   36F
....................     I2C_Write(SSD1306_STREAM, 0);
0369:  CLRF   48
036A:  CALL   2B0
036B:  INCF   3F,F
036C:  BTFSC  03.2
036D:  INCF   40,F
036E:  GOTO   365
.................... 
....................   I2C_Stop(SSD1306_STREAM);
036F:  BSF    03.5
0370:  BSF    11.2
0371:  BTFSC  11.2
0372:  GOTO   371
0373:  BCF    03.5
0374:  RETURN
.................... 
.................... }
.................... 
.................... void SSD1306_FillScreen() {
.................... 
....................   ssd1306_command(SSD1306_COLUMNADDR);
....................   ssd1306_command(0);    // Column start address
....................   #if defined SSD1306_128_64 || defined SSD1306_128_32
....................   ssd1306_command(127);  // Column end address
....................   #else
....................     ssd1306_command(95); // Column end address
....................   #endif
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
....................   ssd1306_command(0);   // Page start address (0 = reset)
....................   #if defined SSD1306_128_64
....................   ssd1306_command(7);   // Page end address
....................   #elif defined SSD1306_128_32
....................   ssd1306_command(3);   // Page end address
....................   #elif defined SSD1306_96_16
....................   ssd1306_command(1);   // Page end address
....................   #endif
.................... 
....................   I2C_Start(SSD1306_STREAM);
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
....................   I2C_Write(SSD1306_STREAM, 0x40);
.................... 
....................   for(uint16_t i = 0; i < SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8; i++ )
....................     I2C_Write(SSD1306_STREAM, 0xFF);
.................... 
....................   I2C_Stop(SSD1306_STREAM);
.................... 
.................... }
.................... 
.................... #bit trig = porta.0
.................... #bit echo = porta.1
.................... 
.................... 
.................... int16 loop0 = 0;
.................... int16 loop1 = 0;
.................... int rdir = 1;
.................... 
.................... int8 angle = 30;
.................... 
.................... int16 duration = 0;
.................... int16 distance = 0;
.................... unsigned int8 disp = 0;
.................... 
.................... int measure = 0;
.................... 
.................... 
.................... #INT_TIMER0                   //0.05ms timer interrupt
.................... void timer0_ovf()
.................... {
....................   set_timer0(0x06);
*
0238:  MOVLW  06
0239:  MOVWF  01
....................   if(loop0 == 0)
023A:  MOVF   31,F
023B:  BTFSS  03.2
023C:  GOTO   245
023D:  MOVF   32,F
023E:  BTFSS  03.2
023F:  GOTO   245
....................   {
....................    output_high(PIN_E0);
0240:  BSF    03.5
0241:  BCF    09.0
0242:  BCF    03.5
0243:  BSF    09.0
....................   } else if(loop0 == angle)
0244:  GOTO   250
0245:  MOVF   36,W
0246:  SUBWF  31,W
0247:  BTFSS  03.2
0248:  GOTO   250
0249:  MOVF   32,F
024A:  BTFSS  03.2
024B:  GOTO   250
....................   {
....................    output_low(PIN_E0);
024C:  BSF    03.5
024D:  BCF    09.0
024E:  BCF    03.5
024F:  BCF    09.0
....................   } 
....................   
....................   
....................   if(loop0 < 400)
0250:  MOVF   32,W
0251:  SUBLW  01
0252:  BTFSS  03.0
0253:  GOTO   25E
0254:  BTFSS  03.2
0255:  GOTO   25A
0256:  MOVF   31,W
0257:  SUBLW  8F
0258:  BTFSS  03.0
0259:  GOTO   25E
....................   {
....................    loop0++;
025A:  INCF   31,F
025B:  BTFSC  03.2
025C:  INCF   32,F
....................   } else {
025D:  GOTO   260
....................    loop0 = 0;
025E:  CLRF   32
025F:  CLRF   31
....................   }
....................   
....................   
....................   
....................   if(loop1 < 5000)
0260:  MOVF   34,W
0261:  SUBLW  13
0262:  BTFSS  03.0
0263:  GOTO   26E
0264:  BTFSS  03.2
0265:  GOTO   26A
0266:  MOVF   33,W
0267:  SUBLW  87
0268:  BTFSS  03.0
0269:  GOTO   26E
....................   {
....................    loop1++;
026A:  INCF   33,F
026B:  BTFSC  03.2
026C:  INCF   34,F
....................   } else {
026D:  GOTO   288
....................    if (rdir == 1 && angle < 42) {
026E:  DECFSZ 35,W
026F:  GOTO   276
0270:  MOVF   36,W
0271:  SUBLW  29
0272:  BTFSS  03.0
0273:  GOTO   276
....................       angle++;
0274:  INCF   36,F
....................    } else if (rdir == 0 && angle > 12) {
0275:  GOTO   286
0276:  MOVF   35,F
0277:  BTFSS  03.2
0278:  GOTO   27F
0279:  MOVF   36,W
027A:  SUBLW  0C
027B:  BTFSC  03.0
027C:  GOTO   27F
....................       angle--;
027D:  DECF   36,F
....................    } else {
027E:  GOTO   286
....................       if(rdir == 0)
027F:  MOVF   35,F
0280:  BTFSS  03.2
0281:  GOTO   285
....................       {
....................          rdir = 1;
0282:  MOVLW  01
0283:  MOVWF  35
....................       } else {
0284:  GOTO   286
....................          rdir = 0;
0285:  CLRF   35
....................       }
....................    }
....................    loop1 = 0;
0286:  CLRF   34
0287:  CLRF   33
....................   }
....................   
....................   if(measure == 1)
0288:  DECFSZ 3C,W
0289:  GOTO   28D
....................   {
....................    duration++;
028A:  INCF   37,F
028B:  BTFSC  03.2
028C:  INCF   38,F
....................   }
028D:  BCF    0B.2
028E:  BCF    0A.3
028F:  BCF    0A.4
0290:  GOTO   02B
.................... }
.................... 
.................... 
.................... void main() {
*
0502:  MOVF   03,W
0503:  ANDLW  1F
0504:  MOVWF  03
0505:  MOVLW  FF
0506:  MOVWF  2B
0507:  BSF    2B.3
0508:  MOVF   2B,W
0509:  BSF    03.5
050A:  MOVWF  07
050B:  BCF    03.5
050C:  BSF    2B.4
050D:  MOVF   2B,W
050E:  BSF    03.5
050F:  MOVWF  07
0510:  MOVLW  0C
0511:  MOVWF  13
0512:  MOVLW  28
0513:  BCF    03.5
0514:  MOVWF  14
0515:  BSF    03.5
0516:  BCF    14.7
0517:  BCF    14.6
0518:  MOVLW  01
0519:  BCF    03.5
051A:  MOVWF  2E
051B:  MOVWF  2F
051C:  BSF    30.0
051D:  CLRF   32
051E:  CLRF   31
051F:  CLRF   34
0520:  CLRF   33
0521:  MOVWF  35
0522:  MOVLW  1E
0523:  MOVWF  36
0524:  CLRF   38
0525:  CLRF   37
0526:  CLRF   3A
0527:  CLRF   39
0528:  CLRF   3B
0529:  CLRF   3C
052A:  CLRF   3E
052B:  CLRF   3D
052C:  BSF    03.5
052D:  BSF    1F.0
052E:  BSF    1F.1
052F:  BSF    1F.2
0530:  BCF    1F.3
0531:  MOVLW  07
0532:  MOVWF  1C
0533:  BCF    03.7
....................   set_tris_a(0x02);
0534:  MOVLW  02
0535:  MOVWF  05
....................   
....................   
....................   enable_interrupts(INT_TIMER0);
0536:  BCF    03.5
0537:  BSF    0B.5
....................   enable_interrupts(global);
0538:  MOVLW  C0
0539:  IORWF  0B,F
....................   
....................   
....................   delay_ms(500);
053A:  MOVLW  02
053B:  MOVWF  3F
053C:  MOVLW  FA
053D:  MOVWF  41
053E:  CALL   29C
053F:  DECFSZ 3F,F
0540:  GOTO   53C
....................   
....................   // Initialize the SSD1306 OLED with an I2C addr = 0x7A (default address)
....................   SSD1306_Init(SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS);
0541:  MOVLW  02
0542:  MOVWF  3F
0543:  MOVLW  7A
0544:  MOVWF  40
0545:  GOTO   2D5
....................   
....................   // clear the display
....................   SSD1306_ClearDisplay();
0546:  CALL   348
.................... 
....................   SSD1306_GotoXY(1, 1);
0547:  MOVLW  01
0548:  MOVWF  3F
0549:  MOVWF  40
054A:  CALL   375
....................   SSD1306_PutC("Minimal Radar Display");
054B:  MOVLW  91
054C:  BSF    03.6
054D:  MOVWF  0D
054E:  MOVLW  02
054F:  MOVWF  0F
0550:  BCF    03.6
0551:  GOTO   437
....................   delay_ms(5000);
0552:  MOVLW  14
0553:  MOVWF  3F
0554:  MOVLW  FA
0555:  MOVWF  41
0556:  CALL   29C
0557:  DECFSZ 3F,F
0558:  GOTO   554
....................   
....................   
....................   set_timer0(0x06);
0559:  MOVLW  06
055A:  MOVWF  01
....................   setup_timer_0(T0_INTERNAL|T0_DIV_1);
055B:  BSF    03.5
055C:  MOVF   01,W
055D:  ANDLW  C7
055E:  IORLW  08
055F:  MOVWF  01
....................   
....................   SSD1306_ClearDisplay();
0560:  BCF    03.5
0561:  CALL   348
.................... 
....................   while(TRUE) {
....................     
....................     
....................     output_high(PIN_A0);
0562:  BSF    03.5
0563:  BCF    05.0
0564:  BCF    03.5
0565:  BSF    05.0
....................     delay_us(10);
0566:  MOVLW  10
0567:  MOVWF  77
0568:  DECFSZ 77,F
0569:  GOTO   568
056A:  NOP
....................     output_low(PIN_A0);
056B:  BSF    03.5
056C:  BCF    05.0
056D:  BCF    03.5
056E:  BCF    05.0
....................     
....................     while(!input(PIN_A1));
056F:  BSF    03.5
0570:  BSF    05.1
0571:  BCF    03.5
0572:  BTFSS  05.1
0573:  GOTO   56F
....................     duration = 0;
0574:  CLRF   38
0575:  CLRF   37
....................     distance = 0;
0576:  CLRF   3A
0577:  CLRF   39
....................     measure = 1;
0578:  MOVLW  01
0579:  MOVWF  3C
....................     while(input(PIN_A1));
057A:  BSF    03.5
057B:  BSF    05.1
057C:  BCF    03.5
057D:  BTFSC  05.1
057E:  GOTO   57A
....................     measure = 0;
057F:  CLRF   3C
....................     
....................     distance = (duration * 50)/58;
0580:  MOVF   38,W
0581:  MOVWF  40
0582:  MOVF   37,W
0583:  MOVWF  3F
0584:  CLRF   42
0585:  MOVLW  32
0586:  MOVWF  41
0587:  GOTO   48F
0588:  MOVF   79,W
0589:  MOVWF  40
058A:  MOVF   78,W
058B:  MOVWF  3F
058C:  MOVF   79,W
058D:  MOVWF  42
058E:  MOVF   78,W
058F:  MOVWF  41
0590:  CLRF   44
0591:  MOVLW  3A
0592:  MOVWF  43
0593:  CALL   4A6
0594:  MOVF   79,W
0595:  MOVWF  3A
0596:  MOVF   78,W
0597:  MOVWF  39
....................     
....................     disp = distance/10;
0598:  MOVF   3A,W
0599:  MOVWF  42
059A:  MOVF   39,W
059B:  MOVWF  41
059C:  CLRF   44
059D:  MOVLW  0A
059E:  MOVWF  43
059F:  CALL   4A6
05A0:  MOVF   78,W
05A1:  MOVWF  3B
....................     
....................     SSD1306_GotoXY(1, 1);
05A2:  MOVLW  01
05A3:  MOVWF  3F
05A4:  MOVWF  40
05A5:  CALL   375
....................     printf(SSD1306_PutC, "%03u", disp);
05A6:  MOVF   3B,W
05A7:  MOVWF  3F
05A8:  MOVLW  03
05A9:  MOVWF  40
05AA:  GOTO   4CB
05AB:  GOTO   562
....................   }
.................... 
.................... }
.................... // End of code
05AC:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
