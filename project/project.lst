CCS PCM C Compiler, Version 5.105Pd, 1               29-11-21 14:03
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\dhkim\Documents\GitHub\pic16f877a_SSD1306_i2c_radar_project\project\project.lst

               ROM used:   3296 words (40%)
                           Largest free fragment is 2048
               RAM used:   49 (13%) at main() level
                           136 (37%) worst case
               Stack used: 5 locations (4 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  0A
0001:  MOVWF  0A
0002:  GOTO   2D3
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   238
.................... #include <project.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
004F:  BCF    0A.0
0050:  BCF    0A.1
0051:  BCF    0A.2
0052:  ADDLW  56
0053:  BTFSC  03.0
0054:  INCF   0A,F
0055:  MOVWF  02
0056:  RETLW  00
0057:  RETLW  00
0058:  RETLW  00
0059:  RETLW  00
005A:  RETLW  00
005B:  RETLW  00
005C:  RETLW  00
005D:  RETLW  5F
005E:  RETLW  00
005F:  RETLW  00
0060:  RETLW  00
0061:  RETLW  07
0062:  RETLW  00
0063:  RETLW  07
0064:  RETLW  00
0065:  RETLW  14
0066:  RETLW  7F
0067:  RETLW  14
0068:  RETLW  7F
0069:  RETLW  14
006A:  RETLW  24
006B:  RETLW  2A
006C:  RETLW  7F
006D:  RETLW  2A
006E:  RETLW  12
006F:  RETLW  23
0070:  RETLW  13
0071:  RETLW  08
0072:  RETLW  64
0073:  RETLW  62
0074:  RETLW  36
0075:  RETLW  49
0076:  RETLW  56
0077:  RETLW  20
0078:  RETLW  50
0079:  RETLW  00
007A:  RETLW  08
007B:  RETLW  07
007C:  RETLW  03
007D:  RETLW  00
007E:  RETLW  00
007F:  RETLW  1C
0080:  RETLW  22
0081:  RETLW  41
0082:  RETLW  00
0083:  RETLW  00
0084:  RETLW  41
0085:  RETLW  22
0086:  RETLW  1C
0087:  RETLW  00
0088:  RETLW  2A
0089:  RETLW  1C
008A:  RETLW  7F
008B:  RETLW  1C
008C:  RETLW  2A
008D:  RETLW  08
008E:  RETLW  08
008F:  RETLW  3E
0090:  RETLW  08
0091:  RETLW  08
0092:  RETLW  00
0093:  RETLW  80
0094:  RETLW  70
0095:  RETLW  30
0096:  RETLW  00
0097:  RETLW  08
0098:  RETLW  08
0099:  RETLW  08
009A:  RETLW  08
009B:  RETLW  08
009C:  RETLW  00
009D:  RETLW  00
009E:  RETLW  60
009F:  RETLW  60
00A0:  RETLW  00
00A1:  RETLW  20
00A2:  RETLW  10
00A3:  RETLW  08
00A4:  RETLW  04
00A5:  RETLW  02
00A6:  RETLW  3E
00A7:  RETLW  51
00A8:  RETLW  49
00A9:  RETLW  45
00AA:  RETLW  3E
00AB:  RETLW  00
00AC:  RETLW  42
00AD:  RETLW  7F
00AE:  RETLW  40
00AF:  RETLW  00
00B0:  RETLW  72
00B1:  RETLW  49
00B2:  RETLW  49
00B3:  RETLW  49
00B4:  RETLW  46
00B5:  RETLW  21
00B6:  RETLW  41
00B7:  RETLW  49
00B8:  RETLW  4D
00B9:  RETLW  33
00BA:  RETLW  18
00BB:  RETLW  14
00BC:  RETLW  12
00BD:  RETLW  7F
00BE:  RETLW  10
00BF:  RETLW  27
00C0:  RETLW  45
00C1:  RETLW  45
00C2:  RETLW  45
00C3:  RETLW  39
00C4:  RETLW  3C
00C5:  RETLW  4A
00C6:  RETLW  49
00C7:  RETLW  49
00C8:  RETLW  31
00C9:  RETLW  41
00CA:  RETLW  21
00CB:  RETLW  11
00CC:  RETLW  09
00CD:  RETLW  07
00CE:  RETLW  36
00CF:  RETLW  49
00D0:  RETLW  49
00D1:  RETLW  49
00D2:  RETLW  36
00D3:  RETLW  46
00D4:  RETLW  49
00D5:  RETLW  49
00D6:  RETLW  29
00D7:  RETLW  1E
00D8:  RETLW  00
00D9:  RETLW  00
00DA:  RETLW  14
00DB:  RETLW  00
00DC:  RETLW  00
00DD:  RETLW  00
00DE:  RETLW  40
00DF:  RETLW  34
00E0:  RETLW  00
00E1:  RETLW  00
00E2:  RETLW  00
00E3:  RETLW  08
00E4:  RETLW  14
00E5:  RETLW  22
00E6:  RETLW  41
00E7:  RETLW  14
00E8:  RETLW  14
00E9:  RETLW  14
00EA:  RETLW  14
00EB:  RETLW  14
00EC:  RETLW  00
00ED:  RETLW  41
00EE:  RETLW  22
00EF:  RETLW  14
00F0:  RETLW  08
00F1:  RETLW  02
00F2:  RETLW  01
00F3:  RETLW  59
00F4:  RETLW  09
00F5:  RETLW  06
00F6:  RETLW  3E
00F7:  RETLW  41
00F8:  RETLW  5D
00F9:  RETLW  59
00FA:  RETLW  4E
00FB:  RETLW  7C
00FC:  RETLW  12
00FD:  RETLW  11
00FE:  RETLW  12
00FF:  RETLW  7C
0100:  RETLW  7F
0101:  RETLW  49
0102:  RETLW  49
0103:  RETLW  49
0104:  RETLW  36
0105:  RETLW  3E
0106:  RETLW  41
0107:  RETLW  41
0108:  RETLW  41
0109:  RETLW  22
010A:  RETLW  7F
010B:  RETLW  41
010C:  RETLW  41
010D:  RETLW  41
010E:  RETLW  3E
010F:  RETLW  7F
0110:  RETLW  49
0111:  RETLW  49
0112:  RETLW  49
0113:  RETLW  41
0114:  RETLW  7F
0115:  RETLW  09
0116:  RETLW  09
0117:  RETLW  09
0118:  RETLW  01
0119:  RETLW  3E
011A:  RETLW  41
011B:  RETLW  41
011C:  RETLW  51
011D:  RETLW  73
011E:  RETLW  7F
011F:  RETLW  08
0120:  RETLW  08
0121:  RETLW  08
0122:  RETLW  7F
0123:  RETLW  00
0124:  RETLW  41
0125:  RETLW  7F
0126:  RETLW  41
0127:  RETLW  00
0128:  RETLW  20
0129:  RETLW  40
012A:  RETLW  41
012B:  RETLW  3F
012C:  RETLW  01
012D:  RETLW  7F
012E:  RETLW  08
012F:  RETLW  14
0130:  RETLW  22
0131:  RETLW  41
0132:  RETLW  7F
0133:  RETLW  40
0134:  RETLW  40
0135:  RETLW  40
0136:  RETLW  40
0137:  RETLW  7F
0138:  RETLW  02
0139:  RETLW  1C
013A:  RETLW  02
013B:  RETLW  7F
013C:  RETLW  7F
013D:  RETLW  04
013E:  RETLW  08
013F:  RETLW  10
0140:  RETLW  7F
0141:  RETLW  3E
0142:  RETLW  41
0143:  RETLW  41
0144:  RETLW  41
0145:  RETLW  3E
0146:  RETLW  7F
0147:  RETLW  09
0148:  RETLW  09
0149:  RETLW  09
014A:  RETLW  06
014B:  RETLW  3E
014C:  RETLW  41
014D:  RETLW  51
014E:  RETLW  21
014F:  RETLW  5E
0150:  RETLW  7F
0151:  RETLW  09
0152:  RETLW  19
0153:  RETLW  29
0154:  RETLW  46
0155:  BSF    0A.0
0156:  BCF    0A.1
0157:  BCF    0A.2
0158:  ADDLW  5C
0159:  BTFSC  03.0
015A:  INCF   0A,F
015B:  MOVWF  02
015C:  RETLW  26
015D:  RETLW  49
015E:  RETLW  49
015F:  RETLW  49
0160:  RETLW  32
0161:  RETLW  03
0162:  RETLW  01
0163:  RETLW  7F
0164:  RETLW  01
0165:  RETLW  03
0166:  RETLW  3F
0167:  RETLW  40
0168:  RETLW  40
0169:  RETLW  40
016A:  RETLW  3F
016B:  RETLW  1F
016C:  RETLW  20
016D:  RETLW  40
016E:  RETLW  20
016F:  RETLW  1F
0170:  RETLW  3F
0171:  RETLW  40
0172:  RETLW  38
0173:  RETLW  40
0174:  RETLW  3F
0175:  RETLW  63
0176:  RETLW  14
0177:  RETLW  08
0178:  RETLW  14
0179:  RETLW  63
017A:  RETLW  03
017B:  RETLW  04
017C:  RETLW  78
017D:  RETLW  04
017E:  RETLW  03
017F:  RETLW  61
0180:  RETLW  59
0181:  RETLW  49
0182:  RETLW  4D
0183:  RETLW  43
0184:  RETLW  00
0185:  RETLW  7F
0186:  RETLW  41
0187:  RETLW  41
0188:  RETLW  41
0189:  RETLW  02
018A:  RETLW  04
018B:  RETLW  08
018C:  RETLW  10
018D:  RETLW  20
018E:  RETLW  00
018F:  RETLW  41
0190:  RETLW  41
0191:  RETLW  41
0192:  RETLW  7F
0193:  RETLW  04
0194:  RETLW  02
0195:  RETLW  01
0196:  RETLW  02
0197:  RETLW  04
0198:  RETLW  40
0199:  RETLW  40
019A:  RETLW  40
019B:  RETLW  40
019C:  RETLW  40
019D:  RETLW  00
019E:  RETLW  03
019F:  RETLW  07
01A0:  RETLW  08
01A1:  RETLW  00
01A2:  RETLW  20
01A3:  RETLW  54
01A4:  RETLW  54
01A5:  RETLW  78
01A6:  RETLW  40
01A7:  RETLW  7F
01A8:  RETLW  28
01A9:  RETLW  44
01AA:  RETLW  44
01AB:  RETLW  38
01AC:  RETLW  38
01AD:  RETLW  44
01AE:  RETLW  44
01AF:  RETLW  44
01B0:  RETLW  28
01B1:  RETLW  38
01B2:  RETLW  44
01B3:  RETLW  44
01B4:  RETLW  28
01B5:  RETLW  7F
01B6:  RETLW  38
01B7:  RETLW  54
01B8:  RETLW  54
01B9:  RETLW  54
01BA:  RETLW  18
01BB:  RETLW  00
01BC:  RETLW  08
01BD:  RETLW  7E
01BE:  RETLW  09
01BF:  RETLW  02
01C0:  RETLW  18
01C1:  RETLW  A4
01C2:  RETLW  A4
01C3:  RETLW  9C
01C4:  RETLW  78
01C5:  RETLW  7F
01C6:  RETLW  08
01C7:  RETLW  04
01C8:  RETLW  04
01C9:  RETLW  78
01CA:  RETLW  00
01CB:  RETLW  44
01CC:  RETLW  7D
01CD:  RETLW  40
01CE:  RETLW  00
01CF:  RETLW  20
01D0:  RETLW  40
01D1:  RETLW  40
01D2:  RETLW  3D
01D3:  RETLW  00
01D4:  RETLW  7F
01D5:  RETLW  10
01D6:  RETLW  28
01D7:  RETLW  44
01D8:  RETLW  00
01D9:  RETLW  00
01DA:  RETLW  41
01DB:  RETLW  7F
01DC:  RETLW  40
01DD:  RETLW  00
01DE:  RETLW  7C
01DF:  RETLW  04
01E0:  RETLW  78
01E1:  RETLW  04
01E2:  RETLW  78
01E3:  RETLW  7C
01E4:  RETLW  08
01E5:  RETLW  04
01E6:  RETLW  04
01E7:  RETLW  78
01E8:  RETLW  38
01E9:  RETLW  44
01EA:  RETLW  44
01EB:  RETLW  44
01EC:  RETLW  38
01ED:  RETLW  FC
01EE:  RETLW  18
01EF:  RETLW  24
01F0:  RETLW  24
01F1:  RETLW  18
01F2:  RETLW  18
01F3:  RETLW  24
01F4:  RETLW  24
01F5:  RETLW  18
01F6:  RETLW  FC
01F7:  RETLW  7C
01F8:  RETLW  08
01F9:  RETLW  04
01FA:  RETLW  04
01FB:  RETLW  08
01FC:  RETLW  48
01FD:  RETLW  54
01FE:  RETLW  54
01FF:  RETLW  54
0200:  RETLW  24
0201:  RETLW  04
0202:  RETLW  04
0203:  RETLW  3F
0204:  RETLW  44
0205:  RETLW  24
0206:  RETLW  3C
0207:  RETLW  40
0208:  RETLW  40
0209:  RETLW  20
020A:  RETLW  7C
020B:  RETLW  1C
020C:  RETLW  20
020D:  RETLW  40
020E:  RETLW  20
020F:  RETLW  1C
0210:  RETLW  3C
0211:  RETLW  40
0212:  RETLW  30
0213:  RETLW  40
0214:  RETLW  3C
0215:  RETLW  44
0216:  RETLW  28
0217:  RETLW  10
0218:  RETLW  28
0219:  RETLW  44
021A:  RETLW  4C
021B:  RETLW  90
021C:  RETLW  90
021D:  RETLW  90
021E:  RETLW  7C
021F:  RETLW  44
0220:  RETLW  64
0221:  RETLW  54
0222:  RETLW  4C
0223:  RETLW  44
0224:  RETLW  00
0225:  RETLW  08
0226:  RETLW  36
0227:  RETLW  41
0228:  RETLW  00
0229:  RETLW  00
022A:  RETLW  00
022B:  RETLW  77
022C:  RETLW  00
022D:  RETLW  00
022E:  RETLW  00
022F:  RETLW  41
0230:  RETLW  36
0231:  RETLW  08
0232:  RETLW  00
0233:  RETLW  02
0234:  RETLW  01
0235:  RETLW  02
0236:  RETLW  04
0237:  RETLW  02
*
0293:  DATA CD,34
0294:  DATA EE,34
0295:  DATA ED,30
0296:  DATA 6C,10
0297:  DATA D2,30
0298:  DATA E4,30
0299:  DATA 72,10
029A:  DATA C4,34
029B:  DATA 73,38
029C:  DATA EC,30
029D:  DATA 79,00
029E:  DATA A8,31
029F:  DATA ED,14
02A0:  DATA 00,01
02A1:  DATA 6F,00
*
0388:  CLRF   77
0389:  CLRF   78
038A:  MOVF   50,W
038B:  BCF    03.0
038C:  BTFSC  51.0
038D:  ADDWF  77,F
038E:  RRF    77,F
038F:  RRF    78,F
0390:  BTFSC  51.1
0391:  ADDWF  77,F
0392:  RRF    77,F
0393:  RRF    78,F
0394:  BTFSC  51.2
0395:  ADDWF  77,F
0396:  RRF    77,F
0397:  RRF    78,F
0398:  BTFSC  51.3
0399:  ADDWF  77,F
039A:  RRF    77,F
039B:  RRF    78,F
039C:  BTFSC  51.4
039D:  ADDWF  77,F
039E:  RRF    77,F
039F:  RRF    78,F
03A0:  BTFSC  51.5
03A1:  ADDWF  77,F
03A2:  RRF    77,F
03A3:  RRF    78,F
03A4:  BTFSC  51.6
03A5:  ADDWF  77,F
03A6:  RRF    77,F
03A7:  RRF    78,F
03A8:  BTFSC  51.7
03A9:  ADDWF  77,F
03AA:  RRF    77,F
03AB:  RRF    78,F
03AC:  RETURN
03AD:  MOVF   4F,W
03AE:  CLRF   78
03AF:  SUBWF  4E,W
03B0:  BTFSC  03.0
03B1:  GOTO   3B5
03B2:  MOVF   4E,W
03B3:  MOVWF  77
03B4:  GOTO   3C1
03B5:  CLRF   77
03B6:  MOVLW  08
03B7:  MOVWF  50
03B8:  RLF    4E,F
03B9:  RLF    77,F
03BA:  MOVF   4F,W
03BB:  SUBWF  77,W
03BC:  BTFSC  03.0
03BD:  MOVWF  77
03BE:  RLF    78,F
03BF:  DECFSZ 50,F
03C0:  GOTO   3B8
03C1:  RETURN
*
043D:  MOVF   0B,W
043E:  MOVWF  48
043F:  BCF    0B.7
0440:  BSF    03.5
0441:  BSF    03.6
0442:  BSF    0C.7
0443:  BSF    0C.0
0444:  NOP
0445:  NOP
0446:  BCF    03.5
0447:  BCF    03.6
0448:  BTFSC  48.7
0449:  BSF    0B.7
044A:  BSF    03.6
044B:  MOVF   0C,W
044C:  ANDLW  7F
044D:  BTFSC  03.2
044E:  GOTO   491
044F:  BCF    03.6
0450:  MOVWF  48
0451:  BSF    03.6
0452:  MOVF   0D,W
0453:  BCF    03.6
0454:  MOVWF  49
0455:  BSF    03.6
0456:  MOVF   0F,W
0457:  BCF    03.6
0458:  MOVWF  4A
0459:  MOVF   48,W
045A:  MOVWF  4B
045B:  CALL   3C2
045C:  MOVF   49,W
045D:  BSF    03.6
045E:  MOVWF  0D
045F:  BCF    03.6
0460:  MOVF   4A,W
0461:  BSF    03.6
0462:  MOVWF  0F
0463:  BCF    03.6
0464:  MOVF   0B,W
0465:  MOVWF  4B
0466:  BCF    0B.7
0467:  BSF    03.5
0468:  BSF    03.6
0469:  BSF    0C.7
046A:  BSF    0C.0
046B:  NOP
046C:  NOP
046D:  BCF    03.5
046E:  BCF    03.6
046F:  BTFSC  4B.7
0470:  BSF    0B.7
0471:  BSF    03.6
0472:  RLF    0C,W
0473:  RLF    0E,W
0474:  ANDLW  7F
0475:  BTFSC  03.2
0476:  GOTO   491
0477:  BCF    03.6
0478:  MOVWF  48
0479:  BSF    03.6
047A:  MOVF   0D,W
047B:  BCF    03.6
047C:  MOVWF  49
047D:  BSF    03.6
047E:  MOVF   0F,W
047F:  BCF    03.6
0480:  MOVWF  4A
0481:  MOVF   48,W
0482:  MOVWF  4B
0483:  CALL   3C2
0484:  MOVF   49,W
0485:  BSF    03.6
0486:  MOVWF  0D
0487:  BCF    03.6
0488:  MOVF   4A,W
0489:  BSF    03.6
048A:  MOVWF  0F
048B:  INCF   0D,F
048C:  BTFSC  03.2
048D:  INCF   0F,F
048E:  BCF    03.6
048F:  GOTO   43D
0490:  BSF    03.6
0491:  BCF    03.6
0492:  RETURN
0493:  MOVLW  10
0494:  MOVWF  4C
0495:  CLRF   77
0496:  CLRF   7A
0497:  RRF    49,F
0498:  RRF    48,F
0499:  BTFSS  03.0
049A:  GOTO   4A1
049B:  MOVF   4A,W
049C:  ADDWF  77,F
049D:  BTFSC  03.0
049E:  INCF   7A,F
049F:  MOVF   4B,W
04A0:  ADDWF  7A,F
04A1:  RRF    7A,F
04A2:  RRF    77,F
04A3:  RRF    79,F
04A4:  RRF    78,F
04A5:  DECFSZ 4C,F
04A6:  GOTO   497
04A7:  BSF    0A.3
04A8:  BCF    0A.4
04A9:  GOTO   376 (RETURN)
04AA:  CLRF   78
04AB:  CLRF   79
04AC:  CLRF   77
04AD:  CLRF   7A
04AE:  MOVF   4D,W
04AF:  BTFSS  03.2
04B0:  GOTO   4B4
04B1:  MOVF   4C,W
04B2:  BTFSC  03.2
04B3:  GOTO   4CE
04B4:  MOVLW  10
04B5:  MOVWF  4E
04B6:  BCF    03.0
04B7:  RLF    4A,F
04B8:  RLF    4B,F
04B9:  RLF    77,F
04BA:  RLF    7A,F
04BB:  MOVF   4D,W
04BC:  SUBWF  7A,W
04BD:  BTFSS  03.2
04BE:  GOTO   4C1
04BF:  MOVF   4C,W
04C0:  SUBWF  77,W
04C1:  BTFSS  03.0
04C2:  GOTO   4CA
04C3:  MOVF   4C,W
04C4:  SUBWF  77,F
04C5:  BTFSS  03.0
04C6:  DECF   7A,F
04C7:  MOVF   4D,W
04C8:  SUBWF  7A,F
04C9:  BSF    03.0
04CA:  RLF    78,F
04CB:  RLF    79,F
04CC:  DECFSZ 4E,F
04CD:  GOTO   4B6
04CE:  BSF    0A.3
04CF:  BCF    0A.4
04D0:  GOTO   384 (RETURN)
04D1:  MOVLW  8E
04D2:  MOVWF  77
04D3:  MOVF   49,W
04D4:  MOVWF  78
04D5:  MOVF   48,W
04D6:  MOVWF  79
04D7:  CLRF   7A
04D8:  BTFSS  49.7
04D9:  GOTO   4DF
04DA:  COMF   78,F
04DB:  COMF   79,F
04DC:  INCF   79,F
04DD:  BTFSC  03.2
04DE:  INCF   78,F
04DF:  MOVF   78,F
04E0:  BTFSS  03.2
04E1:  GOTO   4EC
04E2:  MOVF   79,W
04E3:  MOVWF  78
04E4:  CLRF   79
04E5:  MOVLW  08
04E6:  SUBWF  77,F
04E7:  MOVF   78,F
04E8:  BTFSS  03.2
04E9:  GOTO   4EC
04EA:  CLRF   77
04EB:  GOTO   4F5
04EC:  BCF    03.0
04ED:  BTFSC  78.7
04EE:  GOTO   4F3
04EF:  RLF    79,F
04F0:  RLF    78,F
04F1:  DECF   77,F
04F2:  GOTO   4EC
04F3:  BTFSS  49.7
04F4:  BCF    78.7
04F5:  BSF    0A.3
04F6:  BCF    0A.4
04F7:  GOTO   3B0 (RETURN)
04F8:  BSF    03.5
04F9:  MOVF   38,W
04FA:  BTFSC  03.2
04FB:  GOTO   569
04FC:  MOVWF  40
04FD:  MOVF   3C,W
04FE:  BTFSC  03.2
04FF:  GOTO   569
0500:  ADDWF  40,F
0501:  BTFSC  03.0
0502:  GOTO   50A
0503:  MOVLW  7F
0504:  SUBWF  40,F
0505:  BTFSS  03.0
0506:  GOTO   569
0507:  BTFSC  03.2
0508:  GOTO   569
0509:  GOTO   50E
050A:  MOVLW  81
050B:  ADDWF  40,F
050C:  BTFSC  03.0
050D:  GOTO   569
050E:  MOVF   40,W
050F:  MOVWF  77
0510:  CLRF   78
0511:  CLRF   79
0512:  CLRF   7A
0513:  MOVF   39,W
0514:  MOVWF  44
0515:  BSF    44.7
0516:  MOVF   3A,W
0517:  MOVWF  43
0518:  MOVF   3B,W
0519:  MOVWF  42
051A:  MOVLW  18
051B:  MOVWF  40
051C:  CLRF   41
051D:  BTFSS  42.0
051E:  GOTO   537
051F:  MOVF   3F,W
0520:  ADDWF  7A,F
0521:  BTFSS  03.0
0522:  GOTO   529
0523:  INCF   79,F
0524:  BTFSS  03.2
0525:  GOTO   529
0526:  INCF   78,F
0527:  BTFSC  03.2
0528:  BSF    41.7
0529:  MOVF   3E,W
052A:  ADDWF  79,F
052B:  BTFSS  03.0
052C:  GOTO   530
052D:  INCF   78,F
052E:  BTFSC  03.2
052F:  BSF    41.7
0530:  MOVF   3D,W
0531:  MOVWF  3A
0532:  BSF    3A.7
0533:  MOVF   3A,W
0534:  ADDWF  78,F
0535:  BTFSC  03.0
0536:  BSF    41.7
0537:  RLF    41,F
0538:  RRF    78,F
0539:  RRF    79,F
053A:  RRF    7A,F
053B:  RRF    44,F
053C:  RRF    43,F
053D:  RRF    42,F
053E:  BCF    03.0
053F:  DECFSZ 40,F
0540:  GOTO   51C
0541:  MOVLW  01
0542:  ADDWF  77,F
0543:  BTFSC  03.0
0544:  GOTO   569
0545:  BTFSC  78.7
0546:  GOTO   54E
0547:  RLF    44,F
0548:  RLF    7A,F
0549:  RLF    79,F
054A:  RLF    78,F
054B:  DECF   77,F
054C:  BTFSC  03.2
054D:  GOTO   569
054E:  BTFSS  44.7
054F:  GOTO   55F
0550:  INCF   7A,F
0551:  BTFSS  03.2
0552:  GOTO   55F
0553:  INCF   79,F
0554:  BTFSS  03.2
0555:  GOTO   55F
0556:  INCF   78,F
0557:  BTFSS  03.2
0558:  GOTO   55F
0559:  RRF    78,F
055A:  RRF    79,F
055B:  RRF    7A,F
055C:  INCF   77,F
055D:  BTFSC  03.2
055E:  GOTO   569
055F:  MOVF   39,W
0560:  MOVWF  41
0561:  MOVF   3D,W
0562:  XORWF  41,F
0563:  BTFSS  41.7
0564:  GOTO   567
0565:  BSF    78.7
0566:  GOTO   56D
0567:  BCF    78.7
0568:  GOTO   56D
0569:  CLRF   77
056A:  CLRF   78
056B:  CLRF   79
056C:  CLRF   7A
056D:  BCF    03.5
056E:  RETURN
056F:  MOVLW  80
0570:  BTFSS  03.1
0571:  GOTO   575
0572:  BSF    03.5
0573:  XORWF  3D,F
0574:  BCF    03.5
0575:  BSF    03.5
0576:  CLRF   42
0577:  CLRF   43
0578:  MOVF   39,W
0579:  MOVWF  41
057A:  MOVF   3D,W
057B:  XORWF  41,F
057C:  MOVF   38,W
057D:  BTFSC  03.2
057E:  GOTO   663
057F:  MOVWF  40
0580:  MOVWF  77
0581:  MOVF   3C,W
0582:  BTFSC  03.2
0583:  GOTO   66C
0584:  SUBWF  40,F
0585:  BTFSC  03.2
0586:  GOTO   608
0587:  BTFSS  03.0
0588:  GOTO   5C6
0589:  MOVF   3D,W
058A:  MOVWF  46
058B:  BSF    46.7
058C:  MOVF   3E,W
058D:  MOVWF  45
058E:  MOVF   3F,W
058F:  MOVWF  44
0590:  CLRF   43
0591:  BCF    03.0
0592:  RRF    46,F
0593:  RRF    45,F
0594:  RRF    44,F
0595:  RRF    43,F
0596:  DECFSZ 40,F
0597:  GOTO   590
0598:  BTFSS  41.7
0599:  GOTO   59D
059A:  BSF    42.0
059B:  GOTO   680
059C:  BCF    42.0
059D:  BCF    40.0
059E:  BSF    42.4
059F:  MOVLW  BB
05A0:  MOVWF  04
05A1:  BCF    03.7
05A2:  GOTO   695
05A3:  BCF    42.4
05A4:  BTFSC  41.7
05A5:  GOTO   5B0
05A6:  BTFSS  40.0
05A7:  GOTO   5BB
05A8:  RRF    46,F
05A9:  RRF    45,F
05AA:  RRF    44,F
05AB:  RRF    43,F
05AC:  INCF   77,F
05AD:  BTFSC  03.2
05AE:  GOTO   67B
05AF:  GOTO   5BB
05B0:  BTFSC  46.7
05B1:  GOTO   5BE
05B2:  BCF    03.0
05B3:  RLF    43,F
05B4:  RLF    44,F
05B5:  RLF    45,F
05B6:  RLF    46,F
05B7:  DECF   77,F
05B8:  BTFSC  03.2
05B9:  GOTO   67B
05BA:  GOTO   5B0
05BB:  BSF    42.6
05BC:  GOTO   628
05BD:  BCF    42.6
05BE:  MOVF   39,W
05BF:  MOVWF  41
05C0:  BTFSS  41.7
05C1:  GOTO   5C4
05C2:  BSF    46.7
05C3:  GOTO   674
05C4:  BCF    46.7
05C5:  GOTO   674
05C6:  MOVF   3C,W
05C7:  MOVWF  40
05C8:  MOVWF  77
05C9:  MOVF   38,W
05CA:  SUBWF  40,F
05CB:  MOVF   39,W
05CC:  MOVWF  46
05CD:  BSF    46.7
05CE:  MOVF   3A,W
05CF:  MOVWF  45
05D0:  MOVF   3B,W
05D1:  MOVWF  44
05D2:  CLRF   43
05D3:  BCF    03.0
05D4:  RRF    46,F
05D5:  RRF    45,F
05D6:  RRF    44,F
05D7:  RRF    43,F
05D8:  DECFSZ 40,F
05D9:  GOTO   5D2
05DA:  BTFSS  41.7
05DB:  GOTO   5DF
05DC:  BSF    42.1
05DD:  GOTO   680
05DE:  BCF    42.1
05DF:  BCF    40.0
05E0:  BSF    42.5
05E1:  MOVLW  BF
05E2:  MOVWF  04
05E3:  BCF    03.7
05E4:  GOTO   695
05E5:  BCF    42.5
05E6:  BTFSC  41.7
05E7:  GOTO   5F2
05E8:  BTFSS  40.0
05E9:  GOTO   5FD
05EA:  RRF    46,F
05EB:  RRF    45,F
05EC:  RRF    44,F
05ED:  RRF    43,F
05EE:  INCF   77,F
05EF:  BTFSC  03.2
05F0:  GOTO   67B
05F1:  GOTO   5FD
05F2:  BTFSC  46.7
05F3:  GOTO   600
05F4:  BCF    03.0
05F5:  RLF    43,F
05F6:  RLF    44,F
05F7:  RLF    45,F
05F8:  RLF    46,F
05F9:  DECF   77,F
05FA:  BTFSC  03.2
05FB:  GOTO   67B
05FC:  GOTO   5F2
05FD:  BSF    42.7
05FE:  GOTO   628
05FF:  BCF    42.7
0600:  MOVF   3D,W
0601:  MOVWF  41
0602:  BTFSS  41.7
0603:  GOTO   606
0604:  BSF    46.7
0605:  GOTO   674
0606:  BCF    46.7
0607:  GOTO   674
0608:  MOVF   3D,W
0609:  MOVWF  46
060A:  BSF    46.7
060B:  MOVF   3E,W
060C:  MOVWF  45
060D:  MOVF   3F,W
060E:  MOVWF  44
060F:  BTFSS  41.7
0610:  GOTO   615
0611:  BCF    46.7
0612:  BSF    42.2
0613:  GOTO   680
0614:  BCF    42.2
0615:  CLRF   43
0616:  BCF    40.0
0617:  MOVLW  BB
0618:  MOVWF  04
0619:  BCF    03.7
061A:  GOTO   695
061B:  BTFSC  41.7
061C:  GOTO   63E
061D:  MOVF   39,W
061E:  MOVWF  41
061F:  BTFSS  40.0
0620:  GOTO   628
0621:  RRF    46,F
0622:  RRF    45,F
0623:  RRF    44,F
0624:  RRF    43,F
0625:  INCF   77,F
0626:  BTFSC  03.2
0627:  GOTO   67B
0628:  BTFSS  43.7
0629:  GOTO   639
062A:  INCF   44,F
062B:  BTFSS  03.2
062C:  GOTO   639
062D:  INCF   45,F
062E:  BTFSS  03.2
062F:  GOTO   639
0630:  INCF   46,F
0631:  BTFSS  03.2
0632:  GOTO   639
0633:  RRF    46,F
0634:  RRF    45,F
0635:  RRF    44,F
0636:  INCF   77,F
0637:  BTFSC  03.2
0638:  GOTO   67B
0639:  BTFSC  42.6
063A:  GOTO   5BD
063B:  BTFSC  42.7
063C:  GOTO   5FF
063D:  GOTO   65D
063E:  MOVLW  80
063F:  XORWF  46,F
0640:  BTFSS  46.7
0641:  GOTO   646
0642:  GOTO   680
0643:  MOVF   3D,W
0644:  MOVWF  41
0645:  GOTO   653
0646:  MOVF   39,W
0647:  MOVWF  41
0648:  MOVF   46,F
0649:  BTFSS  03.2
064A:  GOTO   653
064B:  MOVF   45,F
064C:  BTFSS  03.2
064D:  GOTO   653
064E:  MOVF   44,F
064F:  BTFSS  03.2
0650:  GOTO   653
0651:  CLRF   77
0652:  GOTO   674
0653:  BTFSC  46.7
0654:  GOTO   65D
0655:  BCF    03.0
0656:  RLF    43,F
0657:  RLF    44,F
0658:  RLF    45,F
0659:  RLF    46,F
065A:  DECFSZ 77,F
065B:  GOTO   653
065C:  GOTO   67B
065D:  BTFSS  41.7
065E:  GOTO   661
065F:  BSF    46.7
0660:  GOTO   674
0661:  BCF    46.7
0662:  GOTO   674
0663:  MOVF   3C,W
0664:  MOVWF  77
0665:  MOVF   3D,W
0666:  MOVWF  46
0667:  MOVF   3E,W
0668:  MOVWF  45
0669:  MOVF   3F,W
066A:  MOVWF  44
066B:  GOTO   674
066C:  MOVF   38,W
066D:  MOVWF  77
066E:  MOVF   39,W
066F:  MOVWF  46
0670:  MOVF   3A,W
0671:  MOVWF  45
0672:  MOVF   3B,W
0673:  MOVWF  44
0674:  MOVF   46,W
0675:  MOVWF  78
0676:  MOVF   45,W
0677:  MOVWF  79
0678:  MOVF   44,W
0679:  MOVWF  7A
067A:  GOTO   6B3
067B:  CLRF   77
067C:  CLRF   78
067D:  CLRF   79
067E:  CLRF   7A
067F:  GOTO   6B3
0680:  CLRF   43
0681:  COMF   44,F
0682:  COMF   45,F
0683:  COMF   46,F
0684:  COMF   43,F
0685:  INCF   43,F
0686:  BTFSS  03.2
0687:  GOTO   68E
0688:  INCF   44,F
0689:  BTFSS  03.2
068A:  GOTO   68E
068B:  INCF   45,F
068C:  BTFSC  03.2
068D:  INCF   46,F
068E:  BTFSC  42.0
068F:  GOTO   59C
0690:  BTFSC  42.1
0691:  GOTO   5DE
0692:  BTFSC  42.2
0693:  GOTO   614
0694:  GOTO   643
0695:  MOVF   00,W
0696:  ADDWF  44,F
0697:  BTFSS  03.0
0698:  GOTO   69F
0699:  INCF   45,F
069A:  BTFSS  03.2
069B:  GOTO   69F
069C:  INCF   46,F
069D:  BTFSC  03.2
069E:  BSF    40.0
069F:  DECF   04,F
06A0:  MOVF   00,W
06A1:  ADDWF  45,F
06A2:  BTFSS  03.0
06A3:  GOTO   6A7
06A4:  INCF   46,F
06A5:  BTFSC  03.2
06A6:  BSF    40.0
06A7:  DECF   04,F
06A8:  MOVF   00,W
06A9:  BTFSS  00.7
06AA:  XORLW  80
06AB:  ADDWF  46,F
06AC:  BTFSC  03.0
06AD:  BSF    40.0
06AE:  BTFSC  42.4
06AF:  GOTO   5A3
06B0:  BTFSC  42.5
06B1:  GOTO   5E5
06B2:  GOTO   61B
06B3:  BCF    03.5
06B4:  RETURN
06B5:  MOVLW  8E
06B6:  MOVWF  77
06B7:  BSF    03.5
06B8:  MOVF   34,W
06B9:  SUBWF  77,F
06BA:  MOVF   35,W
06BB:  MOVWF  79
06BC:  MOVF   36,W
06BD:  MOVWF  78
06BE:  BSF    79.7
06BF:  MOVF   77,F
06C0:  BTFSC  03.2
06C1:  GOTO   6CD
06C2:  BCF    03.0
06C3:  MOVF   79,F
06C4:  BTFSS  03.2
06C5:  GOTO   6C9
06C6:  MOVF   78,F
06C7:  BTFSC  03.2
06C8:  GOTO   6CD
06C9:  RRF    79,F
06CA:  RRF    78,F
06CB:  DECFSZ 77,F
06CC:  GOTO   6C2
06CD:  BTFSS  35.7
06CE:  GOTO   6D4
06CF:  COMF   78,F
06D0:  COMF   79,F
06D1:  INCF   78,F
06D2:  BTFSC  03.2
06D3:  INCF   79,F
06D4:  BCF    03.5
06D5:  RETURN
06D6:  MOVLW  8E
06D7:  MOVWF  77
06D8:  BSF    03.5
06D9:  MOVF   39,W
06DA:  MOVWF  78
06DB:  MOVF   38,W
06DC:  MOVWF  79
06DD:  CLRF   7A
06DE:  MOVF   78,F
06DF:  BTFSS  03.2
06E0:  GOTO   6EB
06E1:  MOVF   79,W
06E2:  MOVWF  78
06E3:  CLRF   79
06E4:  MOVLW  08
06E5:  SUBWF  77,F
06E6:  MOVF   78,F
06E7:  BTFSS  03.2
06E8:  GOTO   6EB
06E9:  CLRF   77
06EA:  GOTO   6F3
06EB:  BCF    03.0
06EC:  BTFSC  78.7
06ED:  GOTO   6F2
06EE:  RLF    79,F
06EF:  RLF    78,F
06F0:  DECF   77,F
06F1:  GOTO   6EB
06F2:  BCF    78.7
06F3:  BCF    03.5
06F4:  RETURN
*
0725:  MOVF   4C,W
0726:  BTFSC  03.2
0727:  GOTO   7EA
0728:  MOVWF  58
0729:  MOVF   50,W
072A:  BTFSC  03.2
072B:  GOTO   7EA
072C:  SUBWF  58,F
072D:  BTFSS  03.0
072E:  GOTO   734
072F:  MOVLW  7F
0730:  ADDWF  58,F
0731:  BTFSC  03.0
0732:  GOTO   7EA
0733:  GOTO   73A
0734:  MOVLW  81
0735:  SUBWF  58,F
0736:  BTFSS  03.0
0737:  GOTO   7EA
0738:  BTFSC  03.2
0739:  GOTO   7EA
073A:  MOVF   58,W
073B:  MOVWF  77
073C:  CLRF   78
073D:  CLRF   79
073E:  CLRF   7A
073F:  CLRF   57
0740:  MOVF   4D,W
0741:  MOVWF  56
0742:  BSF    56.7
0743:  MOVF   4E,W
0744:  MOVWF  55
0745:  MOVF   4F,W
0746:  MOVWF  54
0747:  MOVLW  19
0748:  MOVWF  58
0749:  MOVF   53,W
074A:  SUBWF  54,F
074B:  BTFSC  03.0
074C:  GOTO   75D
074D:  MOVLW  01
074E:  SUBWF  55,F
074F:  BTFSC  03.0
0750:  GOTO   75D
0751:  SUBWF  56,F
0752:  BTFSC  03.0
0753:  GOTO   75D
0754:  SUBWF  57,F
0755:  BTFSC  03.0
0756:  GOTO   75D
0757:  INCF   57,F
0758:  INCF   56,F
0759:  INCF   55,F
075A:  MOVF   53,W
075B:  ADDWF  54,F
075C:  GOTO   78F
075D:  MOVF   52,W
075E:  SUBWF  55,F
075F:  BTFSC  03.0
0760:  GOTO   778
0761:  MOVLW  01
0762:  SUBWF  56,F
0763:  BTFSC  03.0
0764:  GOTO   778
0765:  SUBWF  57,F
0766:  BTFSC  03.0
0767:  GOTO   778
0768:  INCF   57,F
0769:  INCF   56,F
076A:  MOVF   52,W
076B:  ADDWF  55,F
076C:  MOVF   53,W
076D:  ADDWF  54,F
076E:  BTFSS  03.0
076F:  GOTO   78F
0770:  INCF   55,F
0771:  BTFSS  03.2
0772:  GOTO   78F
0773:  INCF   56,F
0774:  BTFSS  03.2
0775:  GOTO   78F
0776:  INCF   57,F
0777:  GOTO   78F
0778:  MOVF   51,W
0779:  IORLW  80
077A:  SUBWF  56,F
077B:  BTFSC  03.0
077C:  GOTO   78E
077D:  MOVLW  01
077E:  SUBWF  57,F
077F:  BTFSC  03.0
0780:  GOTO   78E
0781:  INCF   57,F
0782:  MOVF   51,W
0783:  IORLW  80
0784:  ADDWF  56,F
0785:  MOVF   52,W
0786:  ADDWF  55,F
0787:  BTFSS  03.0
0788:  GOTO   76C
0789:  INCF   56,F
078A:  BTFSS  03.2
078B:  GOTO   76C
078C:  INCF   57,F
078D:  GOTO   76C
078E:  BSF    7A.0
078F:  DECFSZ 58,F
0790:  GOTO   792
0791:  GOTO   79D
0792:  BCF    03.0
0793:  RLF    54,F
0794:  RLF    55,F
0795:  RLF    56,F
0796:  RLF    57,F
0797:  BCF    03.0
0798:  RLF    7A,F
0799:  RLF    79,F
079A:  RLF    78,F
079B:  RLF    59,F
079C:  GOTO   749
079D:  BTFSS  59.0
079E:  GOTO   7A5
079F:  BCF    03.0
07A0:  RRF    78,F
07A1:  RRF    79,F
07A2:  RRF    7A,F
07A3:  RRF    59,F
07A4:  GOTO   7A8
07A5:  DECF   77,F
07A6:  BTFSC  03.2
07A7:  GOTO   7EA
07A8:  BTFSC  59.7
07A9:  GOTO   7D1
07AA:  BCF    03.0
07AB:  RLF    54,F
07AC:  RLF    55,F
07AD:  RLF    56,F
07AE:  RLF    57,F
07AF:  MOVF   53,W
07B0:  SUBWF  54,F
07B1:  BTFSC  03.0
07B2:  GOTO   7BD
07B3:  MOVLW  01
07B4:  SUBWF  55,F
07B5:  BTFSC  03.0
07B6:  GOTO   7BD
07B7:  SUBWF  56,F
07B8:  BTFSC  03.0
07B9:  GOTO   7BD
07BA:  SUBWF  57,F
07BB:  BTFSS  03.0
07BC:  GOTO   7E0
07BD:  MOVF   52,W
07BE:  SUBWF  55,F
07BF:  BTFSC  03.0
07C0:  GOTO   7C8
07C1:  MOVLW  01
07C2:  SUBWF  56,F
07C3:  BTFSC  03.0
07C4:  GOTO   7C8
07C5:  SUBWF  57,F
07C6:  BTFSS  03.0
07C7:  GOTO   7E0
07C8:  MOVF   51,W
07C9:  IORLW  80
07CA:  SUBWF  56,F
07CB:  BTFSC  03.0
07CC:  GOTO   7D1
07CD:  MOVLW  01
07CE:  SUBWF  57,F
07CF:  BTFSS  03.0
07D0:  GOTO   7E0
07D1:  INCF   7A,F
07D2:  BTFSS  03.2
07D3:  GOTO   7E0
07D4:  INCF   79,F
07D5:  BTFSS  03.2
07D6:  GOTO   7E0
07D7:  INCF   78,F
07D8:  BTFSS  03.2
07D9:  GOTO   7E0
07DA:  INCF   77,F
07DB:  BTFSC  03.2
07DC:  GOTO   7EA
07DD:  RRF    78,F
07DE:  RRF    79,F
07DF:  RRF    7A,F
07E0:  MOVF   4D,W
07E1:  MOVWF  58
07E2:  MOVF   51,W
07E3:  XORWF  58,F
07E4:  BTFSS  58.7
07E5:  GOTO   7E8
07E6:  BSF    78.7
07E7:  GOTO   7EE
07E8:  BCF    78.7
07E9:  GOTO   7EE
07EA:  CLRF   77
07EB:  CLRF   78
07EC:  CLRF   79
07ED:  CLRF   7A
07EE:  RETURN
*
0840:  MOVF   35,W
0841:  MOVWF  3C
0842:  MOVF   39,W
0843:  XORWF  3C,F
0844:  BTFSS  3C.7
0845:  GOTO   04B
0846:  BCF    03.2
0847:  BCF    03.0
0848:  BTFSC  35.7
0849:  BSF    03.0
084A:  GOTO   07E
084B:  MOVF   35,W
084C:  MOVWF  3C
084D:  MOVF   38,W
084E:  MOVWF  3D
084F:  MOVF   34,W
0850:  SUBWF  3D,F
0851:  BTFSC  03.2
0852:  GOTO   059
0853:  BTFSS  3C.7
0854:  GOTO   07E
0855:  MOVF   03,W
0856:  XORLW  01
0857:  MOVWF  03
0858:  GOTO   07E
0859:  MOVF   39,W
085A:  MOVWF  3D
085B:  MOVF   35,W
085C:  SUBWF  3D,F
085D:  BTFSC  03.2
085E:  GOTO   065
085F:  BTFSS  3C.7
0860:  GOTO   07E
0861:  MOVF   03,W
0862:  XORLW  01
0863:  MOVWF  03
0864:  GOTO   07E
0865:  MOVF   3A,W
0866:  MOVWF  3D
0867:  MOVF   36,W
0868:  SUBWF  3D,F
0869:  BTFSC  03.2
086A:  GOTO   071
086B:  BTFSS  3C.7
086C:  GOTO   07E
086D:  MOVF   03,W
086E:  XORLW  01
086F:  MOVWF  03
0870:  GOTO   07E
0871:  MOVF   3B,W
0872:  MOVWF  3D
0873:  MOVF   37,W
0874:  SUBWF  3D,F
0875:  BTFSC  03.2
0876:  GOTO   07D
0877:  BTFSS  3C.7
0878:  GOTO   07E
0879:  MOVF   03,W
087A:  XORLW  01
087B:  MOVWF  03
087C:  GOTO   07E
087D:  BCF    03.0
*
0A94:  MOVF   78,W
0A95:  MOVF   48,W
0A96:  MOVWF  4E
0A97:  MOVLW  64
0A98:  MOVWF  4F
0A99:  BCF    0A.3
0A9A:  CALL   3AD
0A9B:  BSF    0A.3
0A9C:  MOVF   77,W
0A9D:  MOVWF  48
0A9E:  MOVF   78,W
0A9F:  MOVLW  30
0AA0:  BTFSS  03.2
0AA1:  GOTO   2A9
0AA2:  BTFSS  49.1
0AA3:  GOTO   2B2
0AA4:  BTFSC  49.3
0AA5:  GOTO   2B2
0AA6:  BTFSC  49.4
0AA7:  MOVLW  20
0AA8:  GOTO   2AC
0AA9:  BCF    49.3
0AAA:  BCF    49.4
0AAB:  BSF    49.0
0AAC:  ADDWF  78,F
0AAD:  MOVF   78,W
0AAE:  MOVWF  4B
0AAF:  BCF    0A.3
0AB0:  CALL   3C2
0AB1:  BSF    0A.3
0AB2:  MOVF   48,W
0AB3:  MOVWF  4E
0AB4:  MOVLW  0A
0AB5:  MOVWF  4F
0AB6:  BCF    0A.3
0AB7:  CALL   3AD
0AB8:  BSF    0A.3
0AB9:  MOVF   77,W
0ABA:  MOVWF  48
0ABB:  MOVF   78,W
0ABC:  MOVLW  30
0ABD:  BTFSS  03.2
0ABE:  GOTO   2C5
0ABF:  BTFSC  49.3
0AC0:  GOTO   2CB
0AC1:  BTFSS  49.0
0AC2:  GOTO   2CB
0AC3:  BTFSC  49.4
0AC4:  MOVLW  20
0AC5:  ADDWF  78,F
0AC6:  MOVF   78,W
0AC7:  MOVWF  4B
0AC8:  BCF    0A.3
0AC9:  CALL   3C2
0ACA:  BSF    0A.3
0ACB:  MOVLW  30
0ACC:  ADDWF  48,F
0ACD:  MOVF   48,W
0ACE:  MOVWF  4B
0ACF:  BCF    0A.3
0AD0:  CALL   3C2
0AD1:  BSF    0A.3
0AD2:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=20MHz)
*
02A2:  MOVLW  4A
02A3:  MOVWF  04
02A4:  BCF    03.7
02A5:  MOVF   00,W
02A6:  BTFSC  03.2
02A7:  GOTO   2B5
02A8:  MOVLW  06
02A9:  MOVWF  78
02AA:  CLRF   77
02AB:  DECFSZ 77,F
02AC:  GOTO   2AB
02AD:  DECFSZ 78,F
02AE:  GOTO   2AA
02AF:  MOVLW  7B
02B0:  MOVWF  77
02B1:  DECFSZ 77,F
02B2:  GOTO   2B1
02B3:  DECFSZ 00,F
02B4:  GOTO   2A8
02B5:  RETURN
.................... 
.................... 
.................... #include <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
*
0800:  CLRF   5F
0801:  CLRF   5E
0802:  CLRF   5D
0803:  MOVLW  7F
0804:  MOVWF  5C
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
0805:  MOVLW  7E
0806:  BSF    03.5
0807:  MOVWF  20
0808:  MOVLW  80
0809:  MOVWF  21
080A:  CLRF   22
080B:  CLRF   23
080C:  MOVLW  7A
080D:  MOVWF  24
080E:  MOVLW  2A
080F:  MOVWF  25
0810:  MOVLW  AA
0811:  MOVWF  26
0812:  MOVLW  A3
0813:  MOVWF  27
0814:  MOVLW  75
0815:  MOVWF  28
0816:  MOVLW  B6
0817:  MOVWF  29
0818:  MOVLW  09
0819:  MOVWF  2A
081A:  MOVLW  B4
081B:  MOVWF  2B
081C:  MOVLW  6F
081D:  MOVWF  2C
081E:  MOVLW  4F
081F:  MOVWF  2D
0820:  MOVLW  B6
0821:  MOVWF  2E
0822:  MOVLW  AA
0823:  MOVWF  2F
0824:  MOVLW  69
0825:  MOVWF  30
0826:  MOVLW  8B
0827:  MOVWF  31
0828:  MOVLW  F6
0829:  MOVWF  32
082A:  MOVLW  E8
082B:  MOVWF  33
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
082C:  BCF    03.5
082D:  MOVF   53,W
082E:  BSF    03.5
082F:  MOVWF  37
0830:  BCF    03.5
0831:  MOVF   52,W
0832:  BSF    03.5
0833:  MOVWF  36
0834:  BCF    03.5
0835:  MOVF   51,W
0836:  BSF    03.5
0837:  MOVWF  35
0838:  BCF    03.5
0839:  MOVF   50,W
083A:  BSF    03.5
083B:  MOVWF  34
083C:  CLRF   3B
083D:  CLRF   3A
083E:  CLRF   39
083F:  CLRF   38
*
087E:  BTFSS  03.0
087F:  GOTO   085
0880:  BCF    03.5
0881:  MOVF   51,W
0882:  XORLW  80
0883:  MOVWF  51
0884:  BSF    03.5
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
0885:  BCF    03.5
0886:  MOVF   53,W
0887:  BSF    03.5
0888:  MOVWF  3B
0889:  BCF    03.5
088A:  MOVF   52,W
088B:  BSF    03.5
088C:  MOVWF  3A
088D:  BCF    03.5
088E:  MOVF   51,W
088F:  BSF    03.5
0890:  MOVWF  39
0891:  BCF    03.5
0892:  MOVF   50,W
0893:  BSF    03.5
0894:  MOVWF  38
0895:  MOVLW  83
0896:  MOVWF  3F
0897:  MOVLW  F9
0898:  MOVWF  3E
0899:  MOVLW  22
089A:  MOVWF  3D
089B:  MOVLW  7E
089C:  MOVWF  3C
089D:  BCF    0A.3
089E:  BCF    03.5
089F:  CALL   4F8
08A0:  BSF    0A.3
08A1:  MOVF   7A,W
08A2:  BSF    03.5
08A3:  MOVWF  37
08A4:  MOVF   79,W
08A5:  MOVWF  36
08A6:  MOVF   78,W
08A7:  MOVWF  35
08A8:  MOVF   77,W
08A9:  MOVWF  34
08AA:  BCF    0A.3
08AB:  BCF    03.5
08AC:  CALL   6B5
08AD:  BSF    0A.3
08AE:  MOVF   78,W
08AF:  MOVWF  60
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
08B0:  MOVF   53,W
08B1:  BSF    03.5
08B2:  MOVWF  3B
08B3:  BCF    03.5
08B4:  MOVF   52,W
08B5:  BSF    03.5
08B6:  MOVWF  3A
08B7:  BCF    03.5
08B8:  MOVF   51,W
08B9:  BSF    03.5
08BA:  MOVWF  39
08BB:  BCF    03.5
08BC:  MOVF   50,W
08BD:  BSF    03.5
08BE:  MOVWF  38
08BF:  MOVLW  83
08C0:  MOVWF  3F
08C1:  MOVLW  F9
08C2:  MOVWF  3E
08C3:  MOVLW  22
08C4:  MOVWF  3D
08C5:  MOVLW  7E
08C6:  MOVWF  3C
08C7:  BCF    0A.3
08C8:  BCF    03.5
08C9:  CALL   4F8
08CA:  BSF    0A.3
08CB:  MOVF   7A,W
08CC:  MOVWF  69
08CD:  MOVF   79,W
08CE:  MOVWF  68
08CF:  MOVF   78,W
08D0:  MOVWF  67
08D1:  MOVF   77,W
08D2:  MOVWF  66
08D3:  BSF    03.5
08D4:  CLRF   39
08D5:  BCF    03.5
08D6:  MOVF   60,W
08D7:  BSF    03.5
08D8:  MOVWF  38
08D9:  BCF    0A.3
08DA:  BCF    03.5
08DB:  CALL   6D6
08DC:  BSF    0A.3
08DD:  BSF    03.1
08DE:  MOVF   69,W
08DF:  BSF    03.5
08E0:  MOVWF  3B
08E1:  BCF    03.5
08E2:  MOVF   68,W
08E3:  BSF    03.5
08E4:  MOVWF  3A
08E5:  BCF    03.5
08E6:  MOVF   67,W
08E7:  BSF    03.5
08E8:  MOVWF  39
08E9:  BCF    03.5
08EA:  MOVF   66,W
08EB:  BSF    03.5
08EC:  MOVWF  38
08ED:  MOVF   7A,W
08EE:  MOVWF  3F
08EF:  MOVF   79,W
08F0:  MOVWF  3E
08F1:  MOVF   78,W
08F2:  MOVWF  3D
08F3:  MOVF   77,W
08F4:  MOVWF  3C
08F5:  BCF    0A.3
08F6:  BCF    03.5
08F7:  CALL   56F
08F8:  BSF    0A.3
08F9:  MOVF   7A,W
08FA:  MOVWF  65
08FB:  MOVF   79,W
08FC:  MOVWF  64
08FD:  MOVF   78,W
08FE:  MOVWF  63
08FF:  MOVF   77,W
0900:  MOVWF  62
....................    quad = quad % 4;                    // quadrant (0 to 3)
0901:  MOVLW  03
0902:  ANDWF  60,F
.................... 
....................    if (quad == 0 || quad == 2)
0903:  MOVF   60,F
0904:  BTFSC  03.2
0905:  GOTO   10A
0906:  MOVF   60,W
0907:  SUBLW  02
0908:  BTFSS  03.2
0909:  GOTO   12E
....................       t = frac * PI_DIV_BY_TWO;
090A:  MOVF   65,W
090B:  BSF    03.5
090C:  MOVWF  3B
090D:  BCF    03.5
090E:  MOVF   64,W
090F:  BSF    03.5
0910:  MOVWF  3A
0911:  BCF    03.5
0912:  MOVF   63,W
0913:  BSF    03.5
0914:  MOVWF  39
0915:  BCF    03.5
0916:  MOVF   62,W
0917:  BSF    03.5
0918:  MOVWF  38
0919:  MOVLW  DB
091A:  MOVWF  3F
091B:  MOVLW  0F
091C:  MOVWF  3E
091D:  MOVLW  49
091E:  MOVWF  3D
091F:  MOVLW  7F
0920:  MOVWF  3C
0921:  BCF    0A.3
0922:  BCF    03.5
0923:  CALL   4F8
0924:  BSF    0A.3
0925:  MOVF   7A,W
0926:  MOVWF  5B
0927:  MOVF   79,W
0928:  MOVWF  5A
0929:  MOVF   78,W
092A:  MOVWF  59
092B:  MOVF   77,W
092C:  MOVWF  58
092D:  GOTO   1BB
....................    else if (quad == 1)
092E:  DECFSZ 60,W
092F:  GOTO   177
....................       t = (1-frac) * PI_DIV_BY_TWO;
0930:  BSF    03.1
0931:  BSF    03.5
0932:  CLRF   3B
0933:  CLRF   3A
0934:  CLRF   39
0935:  MOVLW  7F
0936:  MOVWF  38
0937:  BCF    03.5
0938:  MOVF   65,W
0939:  BSF    03.5
093A:  MOVWF  3F
093B:  BCF    03.5
093C:  MOVF   64,W
093D:  BSF    03.5
093E:  MOVWF  3E
093F:  BCF    03.5
0940:  MOVF   63,W
0941:  BSF    03.5
0942:  MOVWF  3D
0943:  BCF    03.5
0944:  MOVF   62,W
0945:  BSF    03.5
0946:  MOVWF  3C
0947:  BCF    0A.3
0948:  BCF    03.5
0949:  CALL   56F
094A:  BSF    0A.3
094B:  MOVF   7A,W
094C:  MOVWF  69
094D:  MOVF   79,W
094E:  MOVWF  68
094F:  MOVF   78,W
0950:  MOVWF  67
0951:  MOVF   77,W
0952:  MOVWF  66
0953:  MOVF   69,W
0954:  BSF    03.5
0955:  MOVWF  3B
0956:  BCF    03.5
0957:  MOVF   68,W
0958:  BSF    03.5
0959:  MOVWF  3A
095A:  BCF    03.5
095B:  MOVF   67,W
095C:  BSF    03.5
095D:  MOVWF  39
095E:  BCF    03.5
095F:  MOVF   66,W
0960:  BSF    03.5
0961:  MOVWF  38
0962:  MOVLW  DB
0963:  MOVWF  3F
0964:  MOVLW  0F
0965:  MOVWF  3E
0966:  MOVLW  49
0967:  MOVWF  3D
0968:  MOVLW  7F
0969:  MOVWF  3C
096A:  BCF    0A.3
096B:  BCF    03.5
096C:  CALL   4F8
096D:  BSF    0A.3
096E:  MOVF   7A,W
096F:  MOVWF  5B
0970:  MOVF   79,W
0971:  MOVWF  5A
0972:  MOVF   78,W
0973:  MOVWF  59
0974:  MOVF   77,W
0975:  MOVWF  58
0976:  GOTO   1BB
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
0977:  BSF    03.1
0978:  MOVF   65,W
0979:  BSF    03.5
097A:  MOVWF  3B
097B:  BCF    03.5
097C:  MOVF   64,W
097D:  BSF    03.5
097E:  MOVWF  3A
097F:  BCF    03.5
0980:  MOVF   63,W
0981:  BSF    03.5
0982:  MOVWF  39
0983:  BCF    03.5
0984:  MOVF   62,W
0985:  BSF    03.5
0986:  MOVWF  38
0987:  CLRF   3F
0988:  CLRF   3E
0989:  CLRF   3D
098A:  MOVLW  7F
098B:  MOVWF  3C
098C:  BCF    0A.3
098D:  BCF    03.5
098E:  CALL   56F
098F:  BSF    0A.3
0990:  MOVF   7A,W
0991:  MOVWF  69
0992:  MOVF   79,W
0993:  MOVWF  68
0994:  MOVF   78,W
0995:  MOVWF  67
0996:  MOVF   77,W
0997:  MOVWF  66
0998:  MOVF   69,W
0999:  BSF    03.5
099A:  MOVWF  3B
099B:  BCF    03.5
099C:  MOVF   68,W
099D:  BSF    03.5
099E:  MOVWF  3A
099F:  BCF    03.5
09A0:  MOVF   67,W
09A1:  BSF    03.5
09A2:  MOVWF  39
09A3:  BCF    03.5
09A4:  MOVF   66,W
09A5:  BSF    03.5
09A6:  MOVWF  38
09A7:  MOVLW  DB
09A8:  MOVWF  3F
09A9:  MOVLW  0F
09AA:  MOVWF  3E
09AB:  MOVLW  49
09AC:  MOVWF  3D
09AD:  MOVLW  7F
09AE:  MOVWF  3C
09AF:  BCF    0A.3
09B0:  BCF    03.5
09B1:  CALL   4F8
09B2:  BSF    0A.3
09B3:  MOVF   7A,W
09B4:  MOVWF  5B
09B5:  MOVF   79,W
09B6:  MOVWF  5A
09B7:  MOVF   78,W
09B8:  MOVWF  59
09B9:  MOVF   77,W
09BA:  MOVWF  58
.................... 
....................    y = 1.0;
09BB:  CLRF   57
09BC:  CLRF   56
09BD:  CLRF   55
09BE:  MOVLW  7F
09BF:  MOVWF  54
....................    t = t * t;
09C0:  MOVF   5B,W
09C1:  BSF    03.5
09C2:  MOVWF  3B
09C3:  BCF    03.5
09C4:  MOVF   5A,W
09C5:  BSF    03.5
09C6:  MOVWF  3A
09C7:  BCF    03.5
09C8:  MOVF   59,W
09C9:  BSF    03.5
09CA:  MOVWF  39
09CB:  BCF    03.5
09CC:  MOVF   58,W
09CD:  BSF    03.5
09CE:  MOVWF  38
09CF:  BCF    03.5
09D0:  MOVF   5B,W
09D1:  BSF    03.5
09D2:  MOVWF  3F
09D3:  BCF    03.5
09D4:  MOVF   5A,W
09D5:  BSF    03.5
09D6:  MOVWF  3E
09D7:  BCF    03.5
09D8:  MOVF   59,W
09D9:  BSF    03.5
09DA:  MOVWF  3D
09DB:  BCF    03.5
09DC:  MOVF   58,W
09DD:  BSF    03.5
09DE:  MOVWF  3C
09DF:  BCF    0A.3
09E0:  BCF    03.5
09E1:  CALL   4F8
09E2:  BSF    0A.3
09E3:  MOVF   7A,W
09E4:  MOVWF  5B
09E5:  MOVF   79,W
09E6:  MOVWF  5A
09E7:  MOVF   78,W
09E8:  MOVWF  59
09E9:  MOVF   77,W
09EA:  MOVWF  58
....................    for (i = 0; i <= 4; i++)
09EB:  CLRF   61
09EC:  MOVF   61,W
09ED:  SUBLW  04
09EE:  BTFSS  03.0
09EF:  GOTO   282
....................    {
....................       t2 = t2 * t;
09F0:  MOVF   5F,W
09F1:  BSF    03.5
09F2:  MOVWF  3B
09F3:  BCF    03.5
09F4:  MOVF   5E,W
09F5:  BSF    03.5
09F6:  MOVWF  3A
09F7:  BCF    03.5
09F8:  MOVF   5D,W
09F9:  BSF    03.5
09FA:  MOVWF  39
09FB:  BCF    03.5
09FC:  MOVF   5C,W
09FD:  BSF    03.5
09FE:  MOVWF  38
09FF:  BCF    03.5
0A00:  MOVF   5B,W
0A01:  BSF    03.5
0A02:  MOVWF  3F
0A03:  BCF    03.5
0A04:  MOVF   5A,W
0A05:  BSF    03.5
0A06:  MOVWF  3E
0A07:  BCF    03.5
0A08:  MOVF   59,W
0A09:  BSF    03.5
0A0A:  MOVWF  3D
0A0B:  BCF    03.5
0A0C:  MOVF   58,W
0A0D:  BSF    03.5
0A0E:  MOVWF  3C
0A0F:  BCF    0A.3
0A10:  BCF    03.5
0A11:  CALL   4F8
0A12:  BSF    0A.3
0A13:  MOVF   7A,W
0A14:  MOVWF  5F
0A15:  MOVF   79,W
0A16:  MOVWF  5E
0A17:  MOVF   78,W
0A18:  MOVWF  5D
0A19:  MOVF   77,W
0A1A:  MOVWF  5C
....................       y = y + p[i] * t2;
0A1B:  RLF    61,W
0A1C:  MOVWF  77
0A1D:  RLF    77,F
0A1E:  MOVLW  FC
0A1F:  ANDWF  77,F
0A20:  MOVF   77,W
0A21:  ADDLW  A0
0A22:  MOVWF  04
0A23:  BCF    03.7
0A24:  MOVF   00,W
0A25:  MOVWF  66
0A26:  INCF   04,F
0A27:  MOVF   00,W
0A28:  MOVWF  67
0A29:  INCF   04,F
0A2A:  MOVF   00,W
0A2B:  MOVWF  68
0A2C:  INCF   04,F
0A2D:  MOVF   00,W
0A2E:  MOVWF  69
0A2F:  BSF    03.5
0A30:  MOVWF  3B
0A31:  BCF    03.5
0A32:  MOVF   68,W
0A33:  BSF    03.5
0A34:  MOVWF  3A
0A35:  BCF    03.5
0A36:  MOVF   67,W
0A37:  BSF    03.5
0A38:  MOVWF  39
0A39:  BCF    03.5
0A3A:  MOVF   66,W
0A3B:  BSF    03.5
0A3C:  MOVWF  38
0A3D:  BCF    03.5
0A3E:  MOVF   5F,W
0A3F:  BSF    03.5
0A40:  MOVWF  3F
0A41:  BCF    03.5
0A42:  MOVF   5E,W
0A43:  BSF    03.5
0A44:  MOVWF  3E
0A45:  BCF    03.5
0A46:  MOVF   5D,W
0A47:  BSF    03.5
0A48:  MOVWF  3D
0A49:  BCF    03.5
0A4A:  MOVF   5C,W
0A4B:  BSF    03.5
0A4C:  MOVWF  3C
0A4D:  BCF    0A.3
0A4E:  BCF    03.5
0A4F:  CALL   4F8
0A50:  BSF    0A.3
0A51:  CLRF   67
0A52:  MOVF   04,W
0A53:  MOVWF  66
0A54:  BCF    67.0
0A55:  BTFSC  03.7
0A56:  BSF    67.0
0A57:  BCF    03.1
0A58:  MOVF   57,W
0A59:  BSF    03.5
0A5A:  MOVWF  3B
0A5B:  BCF    03.5
0A5C:  MOVF   56,W
0A5D:  BSF    03.5
0A5E:  MOVWF  3A
0A5F:  BCF    03.5
0A60:  MOVF   55,W
0A61:  BSF    03.5
0A62:  MOVWF  39
0A63:  BCF    03.5
0A64:  MOVF   54,W
0A65:  BSF    03.5
0A66:  MOVWF  38
0A67:  MOVF   7A,W
0A68:  MOVWF  3F
0A69:  MOVF   79,W
0A6A:  MOVWF  3E
0A6B:  MOVF   78,W
0A6C:  MOVWF  3D
0A6D:  MOVF   77,W
0A6E:  MOVWF  3C
0A6F:  BCF    0A.3
0A70:  BCF    03.5
0A71:  CALL   56F
0A72:  BSF    0A.3
0A73:  MOVF   66,W
0A74:  MOVWF  04
0A75:  BCF    03.7
0A76:  BTFSC  67.0
0A77:  BSF    03.7
0A78:  MOVF   7A,W
0A79:  MOVWF  57
0A7A:  MOVF   79,W
0A7B:  MOVWF  56
0A7C:  MOVF   78,W
0A7D:  MOVWF  55
0A7E:  MOVF   77,W
0A7F:  MOVWF  54
0A80:  INCF   61,F
0A81:  GOTO   1EC
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
0A82:  MOVF   60,W
0A83:  SUBLW  02
0A84:  BTFSC  03.2
0A85:  GOTO   288
0A86:  DECFSZ 60,W
0A87:  GOTO   28B
....................       y = -y;  // correct sign
0A88:  MOVF   55,W
0A89:  XORLW  80
0A8A:  MOVWF  55
.................... 
....................    return (y);
0A8B:  MOVF   54,W
0A8C:  MOVWF  77
0A8D:  MOVF   55,W
0A8E:  MOVWF  78
0A8F:  MOVF   56,W
0A90:  MOVWF  79
0A91:  MOVF   57,W
0A92:  MOVWF  7A
0A93:  RETURN
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
*
06F5:  BSF    03.1
06F6:  MOVF   4B,W
06F7:  BSF    03.5
06F8:  MOVWF  3B
06F9:  BCF    03.5
06FA:  MOVF   4A,W
06FB:  BSF    03.5
06FC:  MOVWF  3A
06FD:  BCF    03.5
06FE:  MOVF   49,W
06FF:  BSF    03.5
0700:  MOVWF  39
0701:  BCF    03.5
0702:  MOVF   48,W
0703:  BSF    03.5
0704:  MOVWF  38
0705:  MOVLW  DB
0706:  MOVWF  3F
0707:  MOVLW  0F
0708:  MOVWF  3E
0709:  MOVLW  49
070A:  MOVWF  3D
070B:  MOVLW  7F
070C:  MOVWF  3C
070D:  BCF    03.5
070E:  CALL   56F
070F:  MOVF   7A,W
0710:  MOVWF  4F
0711:  MOVF   79,W
0712:  MOVWF  4E
0713:  MOVF   78,W
0714:  MOVWF  4D
0715:  MOVF   77,W
0716:  MOVWF  4C
0717:  MOVF   4F,W
0718:  MOVWF  53
0719:  MOVF   4E,W
071A:  MOVWF  52
071B:  MOVF   4D,W
071C:  MOVWF  51
071D:  MOVF   4C,W
071E:  MOVWF  50
071F:  BSF    0A.3
0720:  CALL   000
0721:  BCF    0A.3
0722:  BSF    0A.3
0723:  BCF    0A.4
0724:  GOTO   3D8 (RETURN)
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... 
.................... // Interfacing PIC16F877A with SSD1306 OLED display (128x64 Pixel)
.................... // http://simple-circuit.com/
.................... 
.................... #define SSD1306_RST   PIN_D4
.................... 
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP
.................... #use I2C(MASTER, I2C1, FAST = 400000, stream = SSD1306_STREAM)  // Initialize I2C
*
02B6:  BCF    14.7
02B7:  BCF    0C.3
02B8:  MOVF   51,W
02B9:  MOVWF  13
02BA:  MOVLW  02
02BB:  BTFSC  14.7
02BC:  GOTO   2C4
02BD:  BSF    03.5
02BE:  BTFSC  14.2
02BF:  GOTO   2BE
02C0:  MOVLW  00
02C1:  BTFSC  11.6
02C2:  MOVLW  01
02C3:  BCF    03.5
02C4:  MOVWF  78
02C5:  RETURN
.................... 
.................... #byte porta = 0x05
.................... 
.................... // Include SSD1306 OLED driver source code
.................... #include <SSD1306.c>
.................... /******************************************************************************
....................  SSD1306 OLED driver for CCS PIC C compiler (SSD1306.c)                       *
....................                                                                               *
....................  The driver is for I2C mode only.                                             *
....................                                                                               *
....................  http://simple-circuit.com/                                                   *
....................                                                                               *
.................... *******************************************************************************/
.................... 
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... //------------------------------ Definitions ---------------------------------//
.................... 
.................... #define SSD1306_I2C_ADDRESS   0x7A
.................... 
.................... #if !defined SSD1306_128_32 && !defined SSD1306_96_16
.................... #define SSD1306_128_64
.................... #endif
.................... #if defined SSD1306_128_32 && defined SSD1306_96_16
....................   #error "Only one SSD1306 display can be specified at once"
.................... #endif
.................... 
.................... #if defined SSD1306_128_64
....................   #define SSD1306_LCDWIDTH            128
....................   #define SSD1306_LCDHEIGHT            64
.................... #endif
.................... #if defined SSD1306_128_32
....................   #define SSD1306_LCDWIDTH            128
....................   #define SSD1306_LCDHEIGHT            32
.................... #endif
.................... #if defined SSD1306_96_16
....................   #define SSD1306_LCDWIDTH             96
....................   #define SSD1306_LCDHEIGHT            16
.................... #endif
.................... 
.................... #define SSD1306_SETCONTRAST          0x81
.................... #define SSD1306_DISPLAYALLON_RESUME  0xA4
.................... #define SSD1306_DISPLAYALLON         0xA5
.................... #define SSD1306_NORMALDISPLAY        0xA6
.................... #define SSD1306_INVERTDISPLAY_       0xA7
.................... #define SSD1306_DISPLAYOFF           0xAE
.................... #define SSD1306_DISPLAYON            0xAF
.................... #define SSD1306_SETDISPLAYOFFSET     0xD3
.................... #define SSD1306_SETCOMPINS           0xDA
.................... #define SSD1306_SETVCOMDETECT        0xDB
.................... #define SSD1306_SETDISPLAYCLOCKDIV   0xD5
.................... #define SSD1306_SETPRECHARGE         0xD9
.................... #define SSD1306_SETMULTIPLEX         0xA8
.................... #define SSD1306_SETLOWCOLUMN         0x00
.................... #define SSD1306_SETHIGHCOLUMN        0x10
.................... #define SSD1306_SETSTARTLINE         0x40
.................... #define SSD1306_MEMORYMODE           0x20
.................... #define SSD1306_COLUMNADDR           0x21
.................... #define SSD1306_PAGEADDR             0x22
.................... #define SSD1306_COMSCANINC           0xC0
.................... #define SSD1306_COMSCANDEC           0xC8
.................... #define SSD1306_SEGREMAP             0xA0
.................... #define SSD1306_CHARGEPUMP           0x8D
.................... #define SSD1306_EXTERNALVCC          0x01
.................... #define SSD1306_SWITCHCAPVCC         0x02
.................... 
.................... // Scrolling #defines
.................... #define SSD1306_ACTIVATE_SCROLL                      0x2F
.................... #define SSD1306_DEACTIVATE_SCROLL                    0x2E
.................... #define SSD1306_SET_VERTICAL_SCROLL_AREA             0xA3
.................... #define SSD1306_RIGHT_HORIZONTAL_SCROLL              0x26
.................... #define SSD1306_LEFT_HORIZONTAL_SCROLL               0x27
.................... #define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
.................... #define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL  0x2A
.................... 
.................... 
.................... uint8_t _i2caddr, _vccstate, x_pos = 1, y_pos = 1;
.................... 
.................... //--------------------------------------------------------------------------//
.................... 
.................... int1 wrap = TRUE;
.................... 
.................... const char Font[] = {
.................... 0x00, 0x00, 0x00, 0x00, 0x00,
.................... 0x00, 0x00, 0x5F, 0x00, 0x00,
.................... 0x00, 0x07, 0x00, 0x07, 0x00,
.................... 0x14, 0x7F, 0x14, 0x7F, 0x14,
.................... 0x24, 0x2A, 0x7F, 0x2A, 0x12,
.................... 0x23, 0x13, 0x08, 0x64, 0x62,
.................... 0x36, 0x49, 0x56, 0x20, 0x50,
.................... 0x00, 0x08, 0x07, 0x03, 0x00,
.................... 0x00, 0x1C, 0x22, 0x41, 0x00,
.................... 0x00, 0x41, 0x22, 0x1C, 0x00,
.................... 0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
.................... 0x08, 0x08, 0x3E, 0x08, 0x08,
.................... 0x00, 0x80, 0x70, 0x30, 0x00,
.................... 0x08, 0x08, 0x08, 0x08, 0x08,
.................... 0x00, 0x00, 0x60, 0x60, 0x00,
.................... 0x20, 0x10, 0x08, 0x04, 0x02,
.................... 0x3E, 0x51, 0x49, 0x45, 0x3E,
.................... 0x00, 0x42, 0x7F, 0x40, 0x00,
.................... 0x72, 0x49, 0x49, 0x49, 0x46,
.................... 0x21, 0x41, 0x49, 0x4D, 0x33,
.................... 0x18, 0x14, 0x12, 0x7F, 0x10,
.................... 0x27, 0x45, 0x45, 0x45, 0x39,
.................... 0x3C, 0x4A, 0x49, 0x49, 0x31,
.................... 0x41, 0x21, 0x11, 0x09, 0x07,
.................... 0x36, 0x49, 0x49, 0x49, 0x36,
.................... 0x46, 0x49, 0x49, 0x29, 0x1E,
.................... 0x00, 0x00, 0x14, 0x00, 0x00,
.................... 0x00, 0x40, 0x34, 0x00, 0x00,
.................... 0x00, 0x08, 0x14, 0x22, 0x41,
.................... 0x14, 0x14, 0x14, 0x14, 0x14,
.................... 0x00, 0x41, 0x22, 0x14, 0x08,
.................... 0x02, 0x01, 0x59, 0x09, 0x06,
.................... 0x3E, 0x41, 0x5D, 0x59, 0x4E,
.................... 0x7C, 0x12, 0x11, 0x12, 0x7C,
.................... 0x7F, 0x49, 0x49, 0x49, 0x36,
.................... 0x3E, 0x41, 0x41, 0x41, 0x22,
.................... 0x7F, 0x41, 0x41, 0x41, 0x3E,
.................... 0x7F, 0x49, 0x49, 0x49, 0x41,
.................... 0x7F, 0x09, 0x09, 0x09, 0x01,
.................... 0x3E, 0x41, 0x41, 0x51, 0x73,
.................... 0x7F, 0x08, 0x08, 0x08, 0x7F,
.................... 0x00, 0x41, 0x7F, 0x41, 0x00,
.................... 0x20, 0x40, 0x41, 0x3F, 0x01,
.................... 0x7F, 0x08, 0x14, 0x22, 0x41,
.................... 0x7F, 0x40, 0x40, 0x40, 0x40,
.................... 0x7F, 0x02, 0x1C, 0x02, 0x7F,
.................... 0x7F, 0x04, 0x08, 0x10, 0x7F,
.................... 0x3E, 0x41, 0x41, 0x41, 0x3E,
.................... 0x7F, 0x09, 0x09, 0x09, 0x06,
.................... 0x3E, 0x41, 0x51, 0x21, 0x5E,
.................... 0x7F, 0x09, 0x19, 0x29, 0x46
.................... };
.................... const char Font2[] = {
.................... 0x26, 0x49, 0x49, 0x49, 0x32,
.................... 0x03, 0x01, 0x7F, 0x01, 0x03,
.................... 0x3F, 0x40, 0x40, 0x40, 0x3F,
.................... 0x1F, 0x20, 0x40, 0x20, 0x1F,
.................... 0x3F, 0x40, 0x38, 0x40, 0x3F,
.................... 0x63, 0x14, 0x08, 0x14, 0x63,
.................... 0x03, 0x04, 0x78, 0x04, 0x03,
.................... 0x61, 0x59, 0x49, 0x4D, 0x43,
.................... 0x00, 0x7F, 0x41, 0x41, 0x41,
.................... 0x02, 0x04, 0x08, 0x10, 0x20,
.................... 0x00, 0x41, 0x41, 0x41, 0x7F,
.................... 0x04, 0x02, 0x01, 0x02, 0x04,
.................... 0x40, 0x40, 0x40, 0x40, 0x40,
.................... 0x00, 0x03, 0x07, 0x08, 0x00,
.................... 0x20, 0x54, 0x54, 0x78, 0x40,
.................... 0x7F, 0x28, 0x44, 0x44, 0x38,
.................... 0x38, 0x44, 0x44, 0x44, 0x28,
.................... 0x38, 0x44, 0x44, 0x28, 0x7F,
.................... 0x38, 0x54, 0x54, 0x54, 0x18,
.................... 0x00, 0x08, 0x7E, 0x09, 0x02,
.................... 0x18, 0xA4, 0xA4, 0x9C, 0x78,
.................... 0x7F, 0x08, 0x04, 0x04, 0x78,
.................... 0x00, 0x44, 0x7D, 0x40, 0x00,
.................... 0x20, 0x40, 0x40, 0x3D, 0x00,
.................... 0x7F, 0x10, 0x28, 0x44, 0x00,
.................... 0x00, 0x41, 0x7F, 0x40, 0x00,
.................... 0x7C, 0x04, 0x78, 0x04, 0x78,
.................... 0x7C, 0x08, 0x04, 0x04, 0x78,
.................... 0x38, 0x44, 0x44, 0x44, 0x38,
.................... 0xFC, 0x18, 0x24, 0x24, 0x18,
.................... 0x18, 0x24, 0x24, 0x18, 0xFC,
.................... 0x7C, 0x08, 0x04, 0x04, 0x08,
.................... 0x48, 0x54, 0x54, 0x54, 0x24,
.................... 0x04, 0x04, 0x3F, 0x44, 0x24,
.................... 0x3C, 0x40, 0x40, 0x20, 0x7C,
.................... 0x1C, 0x20, 0x40, 0x20, 0x1C,
.................... 0x3C, 0x40, 0x30, 0x40, 0x3C,
.................... 0x44, 0x28, 0x10, 0x28, 0x44,
.................... 0x4C, 0x90, 0x90, 0x90, 0x7C,
.................... 0x44, 0x64, 0x54, 0x4C, 0x44,
.................... 0x00, 0x08, 0x36, 0x41, 0x00,
.................... 0x00, 0x00, 0x77, 0x00, 0x00,
.................... 0x00, 0x41, 0x36, 0x08, 0x00,
.................... 0x02, 0x01, 0x02, 0x04, 0x02
.................... };
.................... 
.................... 
.................... void ssd1306_command(uint8_t c) {
02C6:  CLRF   50
....................     uint8_t control = 0x00;   // Co = 0, D/C = 0
....................     I2C_Start(SSD1306_STREAM);
02C7:  BSF    03.5
02C8:  BSF    11.0
02C9:  BTFSC  11.0
02CA:  GOTO   2C9
....................     I2C_Write(SSD1306_STREAM, _i2caddr);
02CB:  BCF    03.5
02CC:  MOVF   2C,W
02CD:  MOVWF  51
02CE:  CALL   2B6
....................     I2C_Write(SSD1306_STREAM, control);
02CF:  MOVF   50,W
02D0:  MOVWF  51
02D1:  CALL   2B6
....................     I2C_Write(SSD1306_STREAM, c);
02D2:  MOVF   4F,W
02D3:  MOVWF  51
02D4:  CALL   2B6
....................     I2C_Stop(SSD1306_STREAM);
02D5:  BSF    03.5
02D6:  BSF    11.2
02D7:  BTFSC  11.2
02D8:  GOTO   2D7
02D9:  BCF    03.5
02DA:  RETURN
.................... }
.................... 
.................... void SSD1306_Init(uint8_t vccstate = SSD1306_SWITCHCAPVCC, uint8_t i2caddr = SSD1306_I2C_ADDRESS) {
....................   _vccstate = vccstate;
02DB:  MOVF   48,W
02DC:  MOVWF  2D
....................   _i2caddr  = i2caddr;
02DD:  MOVF   49,W
02DE:  MOVWF  2C
....................   #ifdef SSD1306_RST
....................     output_low(SSD1306_RST);
02DF:  BSF    03.5
02E0:  BCF    08.4
02E1:  BCF    03.5
02E2:  BCF    08.4
....................     output_drive(SSD1306_RST);
02E3:  BSF    03.5
02E4:  BCF    08.4
....................     delay_ms(10);
02E5:  MOVLW  0A
02E6:  BCF    03.5
02E7:  MOVWF  4A
02E8:  CALL   2A2
....................     output_high(SSD1306_RST);
02E9:  BSF    03.5
02EA:  BCF    08.4
02EB:  BCF    03.5
02EC:  BSF    08.4
....................   #endif
....................   // Init sequence
....................   ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
02ED:  MOVLW  AE
02EE:  MOVWF  4F
02EF:  CALL   2C6
....................   ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
02F0:  MOVLW  D5
02F1:  MOVWF  4F
02F2:  CALL   2C6
....................   ssd1306_command(0x80);                                  // the suggested ratio 0x80
02F3:  MOVLW  80
02F4:  MOVWF  4F
02F5:  CALL   2C6
.................... 
....................   ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
02F6:  MOVLW  A8
02F7:  MOVWF  4F
02F8:  CALL   2C6
....................   ssd1306_command(SSD1306_LCDHEIGHT - 1);
02F9:  MOVLW  3F
02FA:  MOVWF  4F
02FB:  CALL   2C6
.................... 
....................   ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
02FC:  MOVLW  D3
02FD:  MOVWF  4F
02FE:  CALL   2C6
....................   ssd1306_command(0x0);                                   // no offset
02FF:  CLRF   4F
0300:  CALL   2C6
....................   ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
0301:  MOVLW  40
0302:  MOVWF  4F
0303:  CALL   2C6
....................   ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
0304:  MOVLW  8D
0305:  MOVWF  4F
0306:  CALL   2C6
....................   if (vccstate == SSD1306_EXTERNALVCC)
0307:  DECFSZ 48,W
0308:  GOTO   30D
....................     { ssd1306_command(0x10); }
0309:  MOVLW  10
030A:  MOVWF  4F
030B:  CALL   2C6
030C:  GOTO   310
....................   else
....................     { ssd1306_command(0x14); }
030D:  MOVLW  14
030E:  MOVWF  4F
030F:  CALL   2C6
....................   ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
0310:  MOVLW  20
0311:  MOVWF  4F
0312:  CALL   2C6
....................   ssd1306_command(0x00);                                  // 0x0 act like ks0108
0313:  CLRF   4F
0314:  CALL   2C6
....................   ssd1306_command(SSD1306_SEGREMAP | 0x1);
0315:  MOVLW  A1
0316:  MOVWF  4F
0317:  CALL   2C6
....................   ssd1306_command(SSD1306_COMSCANDEC);
0318:  MOVLW  C8
0319:  MOVWF  4F
031A:  CALL   2C6
.................... 
....................  #if defined SSD1306_128_32
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
....................   ssd1306_command(0x02);
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
....................   ssd1306_command(0x8F);
.................... 
.................... #elif defined SSD1306_128_64
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
031B:  MOVLW  DA
031C:  MOVWF  4F
031D:  CALL   2C6
....................   ssd1306_command(0x12);
031E:  MOVLW  12
031F:  MOVWF  4F
0320:  CALL   2C6
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
0321:  MOVLW  81
0322:  MOVWF  4F
0323:  CALL   2C6
....................   if (vccstate == SSD1306_EXTERNALVCC)
0324:  DECFSZ 48,W
0325:  GOTO   32A
....................     { ssd1306_command(0x9F); }
0326:  MOVLW  9F
0327:  MOVWF  4F
0328:  CALL   2C6
0329:  GOTO   32D
....................   else
....................     { ssd1306_command(0xCF); }
032A:  MOVLW  CF
032B:  MOVWF  4F
032C:  CALL   2C6
.................... 
.................... #elif defined SSD1306_96_16
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
....................   ssd1306_command(0x2);   //ada x12
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
....................   if (vccstate == SSD1306_EXTERNALVCC)
....................     { ssd1306_command(0x10); }
....................   else
....................     { ssd1306_command(0xAF); }
.................... 
.................... #endif
.................... 
....................   ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
032D:  MOVLW  D9
032E:  MOVWF  4F
032F:  CALL   2C6
....................   if (vccstate == SSD1306_EXTERNALVCC)
0330:  DECFSZ 48,W
0331:  GOTO   336
....................     { ssd1306_command(0x22); }
0332:  MOVLW  22
0333:  MOVWF  4F
0334:  CALL   2C6
0335:  GOTO   339
....................   else
....................     { ssd1306_command(0xF1); }
0336:  MOVLW  F1
0337:  MOVWF  4F
0338:  CALL   2C6
....................   ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
0339:  MOVLW  DB
033A:  MOVWF  4F
033B:  CALL   2C6
....................   ssd1306_command(0x40);
033C:  MOVLW  40
033D:  MOVWF  4F
033E:  CALL   2C6
....................   ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
033F:  MOVLW  A4
0340:  MOVWF  4F
0341:  CALL   2C6
....................   ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
0342:  MOVLW  A6
0343:  MOVWF  4F
0344:  CALL   2C6
.................... 
....................   ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
0345:  MOVLW  2E
0346:  MOVWF  4F
0347:  CALL   2C6
.................... 
....................   ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
0348:  MOVLW  AF
0349:  MOVWF  4F
034A:  CALL   2C6
034B:  BSF    0A.3
034C:  BCF    0A.4
034D:  GOTO   323 (RETURN)
.................... }
.................... 
.................... void SSD1306_StartScrollRight(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_RIGHT_HORIZONTAL_SCROLL);
....................   ssd1306_command(0X00);
....................   ssd1306_command(start);  // start page
....................   ssd1306_command(0X00);
....................   ssd1306_command(stop);   // end page
....................   ssd1306_command(0X00);
....................   ssd1306_command(0XFF);
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_StartScrollLeft(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_LEFT_HORIZONTAL_SCROLL);
....................   ssd1306_command(0X00);
....................   ssd1306_command(start);
....................   ssd1306_command(0X00);
....................   ssd1306_command(stop);
....................   ssd1306_command(0X00);
....................   ssd1306_command(0XFF);
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_StartScrollDiagRight(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA);
....................   ssd1306_command(0X00);
....................   ssd1306_command(SSD1306_LCDHEIGHT);
....................   ssd1306_command(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL);
....................   ssd1306_command(0X00);
....................   ssd1306_command(start);
....................   ssd1306_command(0X00);
....................   ssd1306_command(stop);
....................   ssd1306_command(0X01);
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_StartScrollDiagLeft(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA);
....................   ssd1306_command(0X00);
....................   ssd1306_command(SSD1306_LCDHEIGHT);
....................   ssd1306_command(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL);
....................   ssd1306_command(0X00);
....................   ssd1306_command(start);
....................   ssd1306_command(0X00);
....................   ssd1306_command(stop);
....................   ssd1306_command(0X01);
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_StopScroll(void) {
....................   ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_Dim(int1 dim) {
....................   uint8_t contrast;
....................   if (dim)
....................     contrast = 0; // Dimmed display
....................   else {
....................     if (_vccstate == SSD1306_EXTERNALVCC)
....................       contrast = 0x9F;
....................     else
....................       contrast = 0xCF;
....................   }
....................   // the range of contrast to too small to be really useful
....................   // it is useful to dim the display
....................   ssd1306_command(SSD1306_SETCONTRAST);
....................   ssd1306_command(contrast);
.................... }
.................... 
.................... void SSD1306_SetTextWrap(int1 w) {
....................   wrap = w;
.................... }
.................... 
.................... void SSD1306_InvertDisplay(int1 i) {
....................   if (i)
....................     ssd1306_command(SSD1306_INVERTDISPLAY_);
....................   else
....................     ssd1306_command(SSD1306_NORMALDISPLAY);
.................... }
.................... 
.................... void SSD1306_GotoXY(uint8_t x, uint8_t y) {
....................   if((x > 21) || y > 8)
*
037B:  MOVF   48,W
037C:  SUBLW  15
037D:  BTFSS  03.0
037E:  GOTO   382
037F:  MOVF   49,W
0380:  SUBLW  08
0381:  BTFSS  03.0
....................     return;
0382:  GOTO   387
....................   x_pos = x;
0383:  MOVF   48,W
0384:  MOVWF  2E
....................   y_pos = y;
0385:  MOVF   49,W
0386:  MOVWF  2F
0387:  RETURN
.................... }
.................... 
.................... void SSD1306_PutC(uint8_t c) {
....................   uint8_t font_c;
....................   if((c < ' ') || (c > '~'))
*
03C2:  MOVF   4B,W
03C3:  SUBLW  1F
03C4:  BTFSC  03.0
03C5:  GOTO   3CA
03C6:  MOVF   4B,W
03C7:  SUBLW  7E
03C8:  BTFSC  03.0
03C9:  GOTO   3CC
....................     c = '?';
03CA:  MOVLW  3F
03CB:  MOVWF  4B
....................   ssd1306_command(SSD1306_COLUMNADDR);
03CC:  MOVLW  21
03CD:  MOVWF  4F
03CE:  CALL   2C6
....................   ssd1306_command(6 * (x_pos - 1));
03CF:  MOVLW  01
03D0:  SUBWF  2E,W
03D1:  MOVWF  4E
03D2:  MOVLW  06
03D3:  MOVWF  50
03D4:  MOVF   4E,W
03D5:  MOVWF  51
03D6:  CALL   388
03D7:  MOVF   78,W
03D8:  MOVWF  4E
03D9:  MOVWF  4F
03DA:  CALL   2C6
....................   ssd1306_command(6 * (x_pos - 1) + 4); // Column end address (127 = reset)
03DB:  MOVLW  01
03DC:  SUBWF  2E,W
03DD:  MOVWF  4E
03DE:  MOVLW  06
03DF:  MOVWF  50
03E0:  MOVF   4E,W
03E1:  MOVWF  51
03E2:  CALL   388
03E3:  MOVLW  04
03E4:  ADDWF  78,W
03E5:  MOVWF  4E
03E6:  MOVWF  4F
03E7:  CALL   2C6
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
03E8:  MOVLW  22
03E9:  MOVWF  4F
03EA:  CALL   2C6
....................   ssd1306_command(y_pos - 1); // Page start address (0 = reset)
03EB:  MOVLW  01
03EC:  SUBWF  2F,W
03ED:  MOVWF  4E
03EE:  MOVWF  4F
03EF:  CALL   2C6
....................   ssd1306_command(y_pos - 1); // Page end address
03F0:  MOVLW  01
03F1:  SUBWF  2F,W
03F2:  MOVWF  4E
03F3:  MOVWF  4F
03F4:  CALL   2C6
....................   
....................   I2C_Start(SSD1306_STREAM);
03F5:  BSF    03.5
03F6:  BSF    11.0
03F7:  BTFSC  11.0
03F8:  GOTO   3F7
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
03F9:  BCF    03.5
03FA:  MOVF   2C,W
03FB:  MOVWF  51
03FC:  CALL   2B6
....................   I2C_Write(SSD1306_STREAM, 0x40);
03FD:  MOVLW  40
03FE:  MOVWF  51
03FF:  CALL   2B6
....................   
....................   for(uint8_t i = 0; i < 5; i++ ) {
0400:  CLRF   4D
0401:  MOVF   4D,W
0402:  SUBLW  04
0403:  BTFSS  03.0
0404:  GOTO   427
....................     if(c < 'S')
0405:  MOVF   4B,W
0406:  SUBLW  52
0407:  BTFSS  03.0
0408:  GOTO   416
....................       font_c = font[(c - 32) * 5 + i];
0409:  MOVLW  20
040A:  SUBWF  4B,W
040B:  MOVWF  4F
040C:  MOVWF  50
040D:  MOVLW  05
040E:  MOVWF  51
040F:  CALL   388
0410:  MOVF   4D,W
0411:  ADDWF  78,W
0412:  CALL   04F
0413:  MOVWF  78
0414:  MOVWF  4C
0415:  GOTO   422
....................     else
....................       font_c = font2[(c - 'S') * 5 + i];
0416:  MOVLW  53
0417:  SUBWF  4B,W
0418:  MOVWF  4F
0419:  MOVWF  50
041A:  MOVLW  05
041B:  MOVWF  51
041C:  CALL   388
041D:  MOVF   4D,W
041E:  ADDWF  78,W
041F:  CALL   155
0420:  MOVWF  78
0421:  MOVWF  4C
....................   
....................     I2C_Write(SSD1306_STREAM, font_c);
0422:  MOVF   4C,W
0423:  MOVWF  51
0424:  CALL   2B6
0425:  INCF   4D,F
0426:  GOTO   401
....................   }
....................   I2C_Stop(SSD1306_STREAM);
0427:  BSF    03.5
0428:  BSF    11.2
0429:  BTFSC  11.2
042A:  GOTO   429
.................... 
....................   x_pos = x_pos % 21 + 1;
042B:  BCF    03.5
042C:  MOVF   2E,W
042D:  MOVWF  4E
042E:  MOVLW  15
042F:  MOVWF  4F
0430:  CALL   3AD
0431:  MOVLW  01
0432:  ADDWF  77,W
0433:  MOVWF  2E
....................   if (wrap && (x_pos == 1))
0434:  BTFSS  30.0
0435:  GOTO   43C
0436:  DECFSZ 2E,W
0437:  GOTO   43C
....................     y_pos = y_pos % 8 + 1;
0438:  MOVF   2F,W
0439:  ANDLW  07
043A:  ADDLW  01
043B:  MOVWF  2F
043C:  RETURN
.................... 
.................... }
.................... 
.................... void SSD1306_PutCustomC(char *c) {
....................   uint8_t line;
....................   ssd1306_command(SSD1306_COLUMNADDR);
....................   ssd1306_command(6 * (x_pos - 1));
....................   ssd1306_command(6 * (x_pos - 1) + 4); // Column end address (127 = reset)
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
....................   ssd1306_command(y_pos - 1); // Page start address (0 = reset)
....................   ssd1306_command(y_pos - 1); // Page end address
....................   
....................   I2C_Start(SSD1306_STREAM);
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
....................   I2C_Write(SSD1306_STREAM, 0x40);
....................   
....................   for(uint8_t i = 0; i < 5; i++ ) {
....................     line = c[i];
....................     I2C_Write(SSD1306_STREAM, line);
....................   }
....................   I2C_Stop(SSD1306_STREAM);
.................... 
....................   x_pos = x_pos % 21 + 1;
....................   if (wrap && (x_pos == 1))
....................     y_pos = y_pos % 8 + 1;
.................... 
.................... }
.................... 
.................... void SSD1306_ClearDisplay() {
.................... 
....................   ssd1306_command(SSD1306_COLUMNADDR);
*
034E:  MOVLW  21
034F:  MOVWF  4F
0350:  CALL   2C6
....................   ssd1306_command(0);    // Column start address
0351:  CLRF   4F
0352:  CALL   2C6
....................   #if defined SSD1306_128_64 || defined SSD1306_128_32
....................   ssd1306_command(127);  // Column end address
0353:  MOVLW  7F
0354:  MOVWF  4F
0355:  CALL   2C6
....................   #else
....................     ssd1306_command(95); // Column end address
....................   #endif
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
0356:  MOVLW  22
0357:  MOVWF  4F
0358:  CALL   2C6
....................   ssd1306_command(0);   // Page start address (0 = reset)
0359:  CLRF   4F
035A:  CALL   2C6
....................   #if defined SSD1306_128_64
....................   ssd1306_command(7);   // Page end address
035B:  MOVLW  07
035C:  MOVWF  4F
035D:  CALL   2C6
....................   #elif defined SSD1306_128_32
....................   ssd1306_command(3);   // Page end address
....................   #elif defined SSD1306_96_16
....................   ssd1306_command(1);   // Page end address
....................   #endif
.................... 
....................   I2C_Start(SSD1306_STREAM);
035E:  BSF    03.5
035F:  BSF    11.0
0360:  BTFSC  11.0
0361:  GOTO   360
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
0362:  BCF    03.5
0363:  MOVF   2C,W
0364:  MOVWF  51
0365:  CALL   2B6
....................   I2C_Write(SSD1306_STREAM, 0x40);
0366:  MOVLW  40
0367:  MOVWF  51
0368:  CALL   2B6
.................... 
....................   for(uint16_t i = 0; i < SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8; i++ )
0369:  CLRF   49
036A:  CLRF   48
036B:  MOVF   49,W
036C:  SUBLW  03
036D:  BTFSS  03.0
036E:  GOTO   375
....................     I2C_Write(SSD1306_STREAM, 0);
036F:  CLRF   51
0370:  CALL   2B6
0371:  INCF   48,F
0372:  BTFSC  03.2
0373:  INCF   49,F
0374:  GOTO   36B
.................... 
....................   I2C_Stop(SSD1306_STREAM);
0375:  BSF    03.5
0376:  BSF    11.2
0377:  BTFSC  11.2
0378:  GOTO   377
0379:  BCF    03.5
037A:  RETURN
.................... 
.................... }
.................... 
.................... void SSD1306_FillScreen() {
.................... 
....................   ssd1306_command(SSD1306_COLUMNADDR);
....................   ssd1306_command(0);    // Column start address
....................   #if defined SSD1306_128_64 || defined SSD1306_128_32
....................   ssd1306_command(127);  // Column end address
....................   #else
....................     ssd1306_command(95); // Column end address
....................   #endif
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
....................   ssd1306_command(0);   // Page start address (0 = reset)
....................   #if defined SSD1306_128_64
....................   ssd1306_command(7);   // Page end address
....................   #elif defined SSD1306_128_32
....................   ssd1306_command(3);   // Page end address
....................   #elif defined SSD1306_96_16
....................   ssd1306_command(1);   // Page end address
....................   #endif
.................... 
....................   I2C_Start(SSD1306_STREAM);
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
....................   I2C_Write(SSD1306_STREAM, 0x40);
.................... 
....................   for(uint16_t i = 0; i < SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8; i++ )
....................     I2C_Write(SSD1306_STREAM, 0xFF);
.................... 
....................   I2C_Stop(SSD1306_STREAM);
.................... 
.................... }
.................... 
.................... #bit trig = porta.0
.................... #bit echo = porta.1
.................... 
.................... 
.................... int16 loop0 = 0;
.................... int16 loop1 = 0;
.................... int rdir = 1;
.................... 
.................... int8 angle = 27;
.................... 
.................... int clear = 0;
.................... 
.................... int16 duration = 0;
.................... int8 distance = 0;
.................... 
.................... int measure = 0;
.................... 
.................... signed int rad = 0;
.................... float radf = 0;
.................... unsigned int8 posx = 0, posy = 0;
.................... unsigned int8 oledx = 0, oledy = 0;
.................... 
.................... int leftside = 0;
.................... 
.................... 
.................... 
.................... #INT_TIMER0                   //0.05ms timer interrupt
.................... void timer0_ovf()
.................... {
....................   set_timer0(0x06);
*
0238:  MOVLW  06
0239:  MOVWF  01
....................   if(loop0 == 0)
023A:  MOVF   31,F
023B:  BTFSS  03.2
023C:  GOTO   245
023D:  MOVF   32,F
023E:  BTFSS  03.2
023F:  GOTO   245
....................   {
....................    output_high(PIN_E0);
0240:  BSF    03.5
0241:  BCF    09.0
0242:  BCF    03.5
0243:  BSF    09.0
....................   } else if(loop0 == angle)
0244:  GOTO   250
0245:  MOVF   36,W
0246:  SUBWF  31,W
0247:  BTFSS  03.2
0248:  GOTO   250
0249:  MOVF   32,F
024A:  BTFSS  03.2
024B:  GOTO   250
....................   {
....................    output_low(PIN_E0);
024C:  BSF    03.5
024D:  BCF    09.0
024E:  BCF    03.5
024F:  BCF    09.0
....................   } 
....................   
....................   
....................   if(loop0 < 400)
0250:  MOVF   32,W
0251:  SUBLW  01
0252:  BTFSS  03.0
0253:  GOTO   25E
0254:  BTFSS  03.2
0255:  GOTO   25A
0256:  MOVF   31,W
0257:  SUBLW  8F
0258:  BTFSS  03.0
0259:  GOTO   25E
....................   {
....................    loop0++;
025A:  INCF   31,F
025B:  BTFSC  03.2
025C:  INCF   32,F
....................   } else {
025D:  GOTO   260
....................    loop0 = 0;
025E:  CLRF   32
025F:  CLRF   31
....................   }
....................   
....................   
....................   
....................   if(loop1 < 5000)
0260:  MOVF   34,W
0261:  SUBLW  13
0262:  BTFSS  03.0
0263:  GOTO   26E
0264:  BTFSS  03.2
0265:  GOTO   26A
0266:  MOVF   33,W
0267:  SUBLW  87
0268:  BTFSS  03.0
0269:  GOTO   26E
....................   {
....................    loop1++;
026A:  INCF   33,F
026B:  BTFSC  03.2
026C:  INCF   34,F
....................   } else {
026D:  GOTO   28A
....................    if (rdir == 1 && angle < 42) {
026E:  DECFSZ 35,W
026F:  GOTO   276
0270:  MOVF   36,W
0271:  SUBLW  29
0272:  BTFSS  03.0
0273:  GOTO   276
....................       angle++;
0274:  INCF   36,F
....................    } else if (rdir == 0 && angle > 12) {
0275:  GOTO   288
0276:  MOVF   35,F
0277:  BTFSS  03.2
0278:  GOTO   27F
0279:  MOVF   36,W
027A:  SUBLW  0C
027B:  BTFSC  03.0
027C:  GOTO   27F
....................       angle--;
027D:  DECF   36,F
....................    } else {
027E:  GOTO   288
....................       if(rdir == 0)
027F:  MOVF   35,F
0280:  BTFSS  03.2
0281:  GOTO   285
....................       {
....................          rdir = 1;
0282:  MOVLW  01
0283:  MOVWF  35
....................       } else {
0284:  GOTO   286
....................          rdir = 0;
0285:  CLRF   35
....................       }
....................       clear = 1;
0286:  MOVLW  01
0287:  MOVWF  37
....................    }
....................    loop1 = 0;
0288:  CLRF   34
0289:  CLRF   33
....................   }
....................   
....................   if(measure == 1)
028A:  DECFSZ 3B,W
028B:  GOTO   28F
....................   {
....................    duration++;
028C:  INCF   38,F
028D:  BTFSC  03.2
028E:  INCF   39,F
....................   }
028F:  BCF    0B.2
0290:  BCF    0A.3
0291:  BCF    0A.4
0292:  GOTO   02B
.................... }
.................... 
.................... 
.................... void main() {
*
0AD3:  MOVF   03,W
0AD4:  ANDLW  1F
0AD5:  MOVWF  03
0AD6:  MOVLW  FF
0AD7:  MOVWF  2B
0AD8:  BSF    2B.3
0AD9:  MOVF   2B,W
0ADA:  BSF    03.5
0ADB:  MOVWF  07
0ADC:  BCF    03.5
0ADD:  BSF    2B.4
0ADE:  MOVF   2B,W
0ADF:  BSF    03.5
0AE0:  MOVWF  07
0AE1:  MOVLW  0C
0AE2:  MOVWF  13
0AE3:  MOVLW  28
0AE4:  BCF    03.5
0AE5:  MOVWF  14
0AE6:  BSF    03.5
0AE7:  BCF    14.7
0AE8:  BCF    14.6
0AE9:  MOVLW  01
0AEA:  BCF    03.5
0AEB:  MOVWF  2E
0AEC:  MOVWF  2F
0AED:  BSF    30.0
0AEE:  CLRF   32
0AEF:  CLRF   31
0AF0:  CLRF   34
0AF1:  CLRF   33
0AF2:  MOVWF  35
0AF3:  MOVLW  1B
0AF4:  MOVWF  36
0AF5:  CLRF   37
0AF6:  CLRF   39
0AF7:  CLRF   38
0AF8:  CLRF   3A
0AF9:  CLRF   3B
0AFA:  CLRF   3C
0AFB:  CLRF   40
0AFC:  CLRF   3F
0AFD:  CLRF   3E
0AFE:  CLRF   3D
0AFF:  CLRF   41
0B00:  CLRF   42
0B01:  CLRF   43
0B02:  CLRF   44
0B03:  CLRF   45
0B04:  CLRF   47
0B05:  CLRF   46
0B06:  BSF    03.5
0B07:  BSF    1F.0
0B08:  BSF    1F.1
0B09:  BSF    1F.2
0B0A:  BCF    1F.3
0B0B:  MOVLW  07
0B0C:  MOVWF  1C
0B0D:  BCF    03.7
....................   set_tris_a(0x02);
0B0E:  MOVLW  02
0B0F:  MOVWF  05
....................   
....................   
....................   enable_interrupts(INT_TIMER0);
0B10:  BCF    03.5
0B11:  BSF    0B.5
....................   enable_interrupts(global);
0B12:  MOVLW  C0
0B13:  IORWF  0B,F
....................   
....................   
....................   delay_ms(500);
0B14:  MOVLW  02
0B15:  MOVWF  48
0B16:  MOVLW  FA
0B17:  MOVWF  4A
0B18:  BCF    0A.3
0B19:  CALL   2A2
0B1A:  BSF    0A.3
0B1B:  DECFSZ 48,F
0B1C:  GOTO   316
....................   
....................   // Initialize the SSD1306 OLED with an I2C addr = 0x7A (default address)
....................   SSD1306_Init(SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS);
0B1D:  MOVLW  02
0B1E:  MOVWF  48
0B1F:  MOVLW  7A
0B20:  MOVWF  49
0B21:  BCF    0A.3
0B22:  GOTO   2DB
0B23:  BSF    0A.3
....................   
....................   // clear the display
....................   SSD1306_ClearDisplay();
0B24:  BCF    0A.3
0B25:  CALL   34E
0B26:  BSF    0A.3
.................... 
....................   SSD1306_GotoXY(1, 1);
0B27:  MOVLW  01
0B28:  MOVWF  48
0B29:  MOVWF  49
0B2A:  BCF    0A.3
0B2B:  CALL   37B
0B2C:  BSF    0A.3
....................   SSD1306_PutC("Minimal Radar Display");
0B2D:  MOVLW  93
0B2E:  BSF    03.6
0B2F:  MOVWF  0D
0B30:  MOVLW  02
0B31:  MOVWF  0F
0B32:  BCF    0A.3
0B33:  BCF    03.6
0B34:  CALL   43D
0B35:  BSF    0A.3
....................   delay_ms(5000);
0B36:  MOVLW  14
0B37:  MOVWF  48
0B38:  MOVLW  FA
0B39:  MOVWF  4A
0B3A:  BCF    0A.3
0B3B:  CALL   2A2
0B3C:  BSF    0A.3
0B3D:  DECFSZ 48,F
0B3E:  GOTO   338
....................   
....................   
....................   set_timer0(0x06);
0B3F:  MOVLW  06
0B40:  MOVWF  01
....................   setup_timer_0(T0_INTERNAL|T0_DIV_1);
0B41:  BSF    03.5
0B42:  MOVF   01,W
0B43:  ANDLW  C7
0B44:  IORLW  08
0B45:  MOVWF  01
....................   
....................   SSD1306_ClearDisplay();
0B46:  BCF    0A.3
0B47:  BCF    03.5
0B48:  CALL   34E
0B49:  BSF    0A.3
.................... 
....................   while(TRUE) {
....................     
....................     if(clear == 1)
0B4A:  DECFSZ 37,W
0B4B:  GOTO   350
....................     {
....................       SSD1306_ClearDisplay();
0B4C:  BCF    0A.3
0B4D:  CALL   34E
0B4E:  BSF    0A.3
....................       clear = 0;
0B4F:  CLRF   37
....................     }
....................     
....................     output_high(PIN_A0);
0B50:  BSF    03.5
0B51:  BCF    05.0
0B52:  BCF    03.5
0B53:  BSF    05.0
....................     delay_us(10);
0B54:  MOVLW  10
0B55:  MOVWF  77
0B56:  DECFSZ 77,F
0B57:  GOTO   356
0B58:  NOP
....................     output_low(PIN_A0);
0B59:  BSF    03.5
0B5A:  BCF    05.0
0B5B:  BCF    03.5
0B5C:  BCF    05.0
....................     
....................     while(!input(PIN_A1));
0B5D:  BSF    03.5
0B5E:  BSF    05.1
0B5F:  BCF    03.5
0B60:  BTFSS  05.1
0B61:  GOTO   35D
....................     duration = 0;
0B62:  CLRF   39
0B63:  CLRF   38
....................     distance = 0;
0B64:  CLRF   3A
....................     measure = 1;
0B65:  MOVLW  01
0B66:  MOVWF  3B
....................     while(input(PIN_A1));
0B67:  BSF    03.5
0B68:  BSF    05.1
0B69:  BCF    03.5
0B6A:  BTFSC  05.1
0B6B:  GOTO   367
....................     measure = 0;
0B6C:  CLRF   3B
....................     
....................     distance = (duration * 50)/58;     //distance (cm)
0B6D:  MOVF   39,W
0B6E:  MOVWF  49
0B6F:  MOVF   38,W
0B70:  MOVWF  48
0B71:  CLRF   4B
0B72:  MOVLW  32
0B73:  MOVWF  4A
0B74:  BCF    0A.3
0B75:  GOTO   493
0B76:  BSF    0A.3
0B77:  MOVF   79,W
0B78:  MOVWF  49
0B79:  MOVF   78,W
0B7A:  MOVWF  48
0B7B:  MOVF   79,W
0B7C:  MOVWF  4B
0B7D:  MOVF   78,W
0B7E:  MOVWF  4A
0B7F:  CLRF   4D
0B80:  MOVLW  3A
0B81:  MOVWF  4C
0B82:  BCF    0A.3
0B83:  GOTO   4AA
0B84:  BSF    0A.3
0B85:  MOVF   78,W
0B86:  MOVWF  3A
....................     
....................     if(distance < 24 && distance > 3)
0B87:  MOVF   3A,W
0B88:  SUBLW  17
0B89:  BTFSS  03.0
0B8A:  GOTO   4EE
0B8B:  MOVF   3A,W
0B8C:  SUBLW  03
0B8D:  BTFSC  03.0
0B8E:  GOTO   4EE
....................     {
....................       
....................       
....................       rad = (angle - 27)*6;
0B8F:  MOVLW  1B
0B90:  SUBWF  36,W
0B91:  MOVWF  49
0B92:  MOVWF  50
0B93:  MOVLW  06
0B94:  MOVWF  51
0B95:  BCF    0A.3
0B96:  CALL   388
0B97:  BSF    0A.3
0B98:  MOVF   78,W
0B99:  MOVWF  3C
....................       if(rad < 0)
0B9A:  BTFSS  3C.7
0B9B:  GOTO   3A7
....................       {
....................          rad *= -1;
0B9C:  MOVF   3C,W
0B9D:  MOVWF  50
0B9E:  MOVLW  FF
0B9F:  MOVWF  51
0BA0:  BCF    0A.3
0BA1:  CALL   388
0BA2:  BSF    0A.3
0BA3:  MOVF   78,W
0BA4:  MOVWF  3C
....................          leftside = 0;
0BA5:  CLRF   45
....................       } else {
0BA6:  GOTO   3A9
....................          leftside = 1;
0BA7:  MOVLW  01
0BA8:  MOVWF  45
....................       }
....................       
....................       radf = pi / 180 * rad;
0BA9:  CLRF   49
0BAA:  MOVF   3C,W
0BAB:  MOVWF  48
0BAC:  BTFSC  48.7
0BAD:  DECF   49,F
0BAE:  BCF    0A.3
0BAF:  GOTO   4D1
0BB0:  BSF    0A.3
0BB1:  MOVLW  35
0BB2:  BSF    03.5
0BB3:  MOVWF  3B
0BB4:  MOVLW  FA
0BB5:  MOVWF  3A
0BB6:  MOVLW  0E
0BB7:  MOVWF  39
0BB8:  MOVLW  79
0BB9:  MOVWF  38
0BBA:  MOVF   7A,W
0BBB:  MOVWF  3F
0BBC:  MOVF   79,W
0BBD:  MOVWF  3E
0BBE:  MOVF   78,W
0BBF:  MOVWF  3D
0BC0:  MOVF   77,W
0BC1:  MOVWF  3C
0BC2:  BCF    0A.3
0BC3:  BCF    03.5
0BC4:  CALL   4F8
0BC5:  BSF    0A.3
0BC6:  MOVF   7A,W
0BC7:  MOVWF  40
0BC8:  MOVF   79,W
0BC9:  MOVWF  3F
0BCA:  MOVF   78,W
0BCB:  MOVWF  3E
0BCC:  MOVF   77,W
0BCD:  MOVWF  3D
....................       
....................       posx = sin(radf) * distance / 3;
0BCE:  MOVF   40,W
0BCF:  MOVWF  4B
0BD0:  MOVF   3F,W
0BD1:  MOVWF  4A
0BD2:  MOVF   3E,W
0BD3:  MOVWF  49
0BD4:  MOVF   3D,W
0BD5:  MOVWF  48
0BD6:  BCF    0A.3
0BD7:  GOTO   6F5
0BD8:  BSF    0A.3
0BD9:  MOVF   7A,W
0BDA:  MOVWF  4B
0BDB:  MOVF   79,W
0BDC:  MOVWF  4A
0BDD:  MOVF   78,W
0BDE:  MOVWF  49
0BDF:  MOVF   77,W
0BE0:  MOVWF  48
0BE1:  BSF    03.5
0BE2:  CLRF   39
0BE3:  BCF    03.5
0BE4:  MOVF   3A,W
0BE5:  BSF    03.5
0BE6:  MOVWF  38
0BE7:  BCF    0A.3
0BE8:  BCF    03.5
0BE9:  CALL   6D6
0BEA:  BSF    0A.3
0BEB:  MOVF   4B,W
0BEC:  BSF    03.5
0BED:  MOVWF  3B
0BEE:  BCF    03.5
0BEF:  MOVF   4A,W
0BF0:  BSF    03.5
0BF1:  MOVWF  3A
0BF2:  BCF    03.5
0BF3:  MOVF   49,W
0BF4:  BSF    03.5
0BF5:  MOVWF  39
0BF6:  BCF    03.5
0BF7:  MOVF   48,W
0BF8:  BSF    03.5
0BF9:  MOVWF  38
0BFA:  MOVF   7A,W
0BFB:  MOVWF  3F
0BFC:  MOVF   79,W
0BFD:  MOVWF  3E
0BFE:  MOVF   78,W
0BFF:  MOVWF  3D
0C00:  MOVF   77,W
0C01:  MOVWF  3C
0C02:  BCF    0A.3
0C03:  BCF    03.5
0C04:  CALL   4F8
0C05:  BSF    0A.3
0C06:  MOVF   7A,W
0C07:  MOVWF  4B
0C08:  MOVF   79,W
0C09:  MOVWF  4A
0C0A:  MOVF   78,W
0C0B:  MOVWF  49
0C0C:  MOVF   77,W
0C0D:  MOVWF  48
0C0E:  MOVF   7A,W
0C0F:  MOVWF  4F
0C10:  MOVF   79,W
0C11:  MOVWF  4E
0C12:  MOVF   78,W
0C13:  MOVWF  4D
0C14:  MOVF   77,W
0C15:  MOVWF  4C
0C16:  CLRF   53
0C17:  CLRF   52
0C18:  MOVLW  40
0C19:  MOVWF  51
0C1A:  MOVLW  80
0C1B:  MOVWF  50
0C1C:  BCF    0A.3
0C1D:  CALL   725
0C1E:  BSF    0A.3
0C1F:  MOVF   7A,W
0C20:  BSF    03.5
0C21:  MOVWF  37
0C22:  MOVF   79,W
0C23:  MOVWF  36
0C24:  MOVF   78,W
0C25:  MOVWF  35
0C26:  MOVF   77,W
0C27:  MOVWF  34
0C28:  BCF    0A.3
0C29:  BCF    03.5
0C2A:  CALL   6B5
0C2B:  BSF    0A.3
0C2C:  MOVF   78,W
0C2D:  MOVWF  41
....................       posy = cos(radf) * distance / 3;
0C2E:  MOVF   40,W
0C2F:  MOVWF  53
0C30:  MOVF   3F,W
0C31:  MOVWF  52
0C32:  MOVF   3E,W
0C33:  MOVWF  51
0C34:  MOVF   3D,W
0C35:  MOVWF  50
0C36:  CALL   000
0C37:  MOVF   7A,W
0C38:  MOVWF  4B
0C39:  MOVF   79,W
0C3A:  MOVWF  4A
0C3B:  MOVF   78,W
0C3C:  MOVWF  49
0C3D:  MOVF   77,W
0C3E:  MOVWF  48
0C3F:  BSF    03.5
0C40:  CLRF   39
0C41:  BCF    03.5
0C42:  MOVF   3A,W
0C43:  BSF    03.5
0C44:  MOVWF  38
0C45:  BCF    0A.3
0C46:  BCF    03.5
0C47:  CALL   6D6
0C48:  BSF    0A.3
0C49:  MOVF   4B,W
0C4A:  BSF    03.5
0C4B:  MOVWF  3B
0C4C:  BCF    03.5
0C4D:  MOVF   4A,W
0C4E:  BSF    03.5
0C4F:  MOVWF  3A
0C50:  BCF    03.5
0C51:  MOVF   49,W
0C52:  BSF    03.5
0C53:  MOVWF  39
0C54:  BCF    03.5
0C55:  MOVF   48,W
0C56:  BSF    03.5
0C57:  MOVWF  38
0C58:  MOVF   7A,W
0C59:  MOVWF  3F
0C5A:  MOVF   79,W
0C5B:  MOVWF  3E
0C5C:  MOVF   78,W
0C5D:  MOVWF  3D
0C5E:  MOVF   77,W
0C5F:  MOVWF  3C
0C60:  BCF    0A.3
0C61:  BCF    03.5
0C62:  CALL   4F8
0C63:  BSF    0A.3
0C64:  MOVF   7A,W
0C65:  MOVWF  4B
0C66:  MOVF   79,W
0C67:  MOVWF  4A
0C68:  MOVF   78,W
0C69:  MOVWF  49
0C6A:  MOVF   77,W
0C6B:  MOVWF  48
0C6C:  MOVF   7A,W
0C6D:  MOVWF  4F
0C6E:  MOVF   79,W
0C6F:  MOVWF  4E
0C70:  MOVF   78,W
0C71:  MOVWF  4D
0C72:  MOVF   77,W
0C73:  MOVWF  4C
0C74:  CLRF   53
0C75:  CLRF   52
0C76:  MOVLW  40
0C77:  MOVWF  51
0C78:  MOVLW  80
0C79:  MOVWF  50
0C7A:  BCF    0A.3
0C7B:  CALL   725
0C7C:  BSF    0A.3
0C7D:  MOVF   7A,W
0C7E:  BSF    03.5
0C7F:  MOVWF  37
0C80:  MOVF   79,W
0C81:  MOVWF  36
0C82:  MOVF   78,W
0C83:  MOVWF  35
0C84:  MOVF   77,W
0C85:  MOVWF  34
0C86:  BCF    0A.3
0C87:  BCF    03.5
0C88:  CALL   6B5
0C89:  BSF    0A.3
0C8A:  MOVF   78,W
0C8B:  MOVWF  42
....................       
....................       if(leftside == 1) {
0C8C:  DECFSZ 45,W
0C8D:  GOTO   492
....................          oledx = 11 - posx;
0C8E:  MOVF   41,W
0C8F:  SUBLW  0B
0C90:  MOVWF  43
....................       } else {
0C91:  GOTO   495
....................          oledx = 11 + posx;
0C92:  MOVLW  0B
0C93:  ADDWF  41,W
0C94:  MOVWF  43
....................       }
....................       oledy = 8 - posy;
0C95:  MOVF   42,W
0C96:  SUBLW  08
0C97:  MOVWF  44
....................       
....................       SSD1306_GotoXY(1, 1);
0C98:  MOVLW  01
0C99:  MOVWF  48
0C9A:  MOVWF  49
0C9B:  BCF    0A.3
0C9C:  CALL   37B
0C9D:  BSF    0A.3
....................       printf(SSD1306_PutC, "%02u", distance);
0C9E:  MOVF   3A,W
0C9F:  MOVWF  48
0CA0:  MOVLW  01
0CA1:  MOVWF  49
0CA2:  CALL   294
....................     
....................       SSD1306_GotoXY(1, 2);
0CA3:  MOVLW  01
0CA4:  MOVWF  48
0CA5:  MOVLW  02
0CA6:  MOVWF  49
0CA7:  BCF    0A.3
0CA8:  CALL   37B
0CA9:  BSF    0A.3
....................       SSD1306_PutC("(cm)");
0CAA:  MOVLW  9E
0CAB:  BSF    03.6
0CAC:  MOVWF  0D
0CAD:  MOVLW  02
0CAE:  MOVWF  0F
0CAF:  BCF    0A.3
0CB0:  BCF    03.6
0CB1:  CALL   43D
0CB2:  BSF    0A.3
....................       
....................       SSD1306_GotoXY(oledx, oledy);
0CB3:  MOVF   43,W
0CB4:  MOVWF  48
0CB5:  MOVF   44,W
0CB6:  MOVWF  49
0CB7:  BCF    0A.3
0CB8:  CALL   37B
0CB9:  BSF    0A.3
....................       SSD1306_PutC("o");
0CBA:  MOVLW  A1
0CBB:  BSF    03.6
0CBC:  MOVWF  0D
0CBD:  MOVLW  02
0CBE:  MOVWF  0F
0CBF:  BCF    0A.3
0CC0:  BCF    03.6
0CC1:  CALL   43D
0CC2:  BSF    0A.3
....................       
....................       
....................       
....................       SSD1306_GotoXY(10, 1);
0CC3:  MOVLW  0A
0CC4:  MOVWF  48
0CC5:  MOVLW  01
0CC6:  MOVWF  49
0CC7:  BCF    0A.3
0CC8:  CALL   37B
0CC9:  BSF    0A.3
....................       printf(SSD1306_PutC, "%02u %02u %02u %02u", oledx, oledy, posx, posy);
0CCA:  MOVF   43,W
0CCB:  MOVWF  48
0CCC:  MOVLW  01
0CCD:  MOVWF  49
0CCE:  CALL   294
0CCF:  MOVLW  20
0CD0:  MOVWF  4B
0CD1:  BCF    0A.3
0CD2:  CALL   3C2
0CD3:  BSF    0A.3
0CD4:  MOVF   44,W
0CD5:  MOVWF  48
0CD6:  MOVLW  01
0CD7:  MOVWF  49
0CD8:  CALL   294
0CD9:  MOVLW  20
0CDA:  MOVWF  4B
0CDB:  BCF    0A.3
0CDC:  CALL   3C2
0CDD:  BSF    0A.3
0CDE:  MOVF   41,W
0CDF:  MOVWF  48
0CE0:  MOVLW  01
0CE1:  MOVWF  49
0CE2:  CALL   294
0CE3:  MOVLW  20
0CE4:  MOVWF  4B
0CE5:  BCF    0A.3
0CE6:  CALL   3C2
0CE7:  BSF    0A.3
0CE8:  MOVF   42,W
0CE9:  MOVWF  48
0CEA:  MOVLW  01
0CEB:  MOVWF  49
0CEC:  CALL   294
....................       
....................     } else {
0CED:  GOTO   4EF
....................       distance = 0;
0CEE:  CLRF   3A
....................     }
0CEF:  GOTO   34A
....................     
....................     
....................   }
.................... 
.................... }
.................... // End of code
0CF0:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
