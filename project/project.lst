CCS PCM C Compiler, Version 5.105Pd, 1               17-11-21 17:17
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\dhkim\Documents\GitHub\pic16f877a_SSD1306_i2c_radar_project\project\project.lst

               ROM used:   1410 words (17%)
                           Largest free fragment is 2048
               RAM used:   36 (10%) at main() level
                           46 (12%) worst case
               Stack used: 5 locations (4 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4FD
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   052
002B:  MOVLW  8C
002C:  MOVWF  04
002D:  BTFSS  00.1
002E:  GOTO   031
002F:  BTFSC  0C.1
0030:  GOTO   055
0031:  MOVF   22,W
0032:  MOVWF  04
0033:  MOVF   23,W
0034:  MOVWF  77
0035:  MOVF   24,W
0036:  MOVWF  78
0037:  MOVF   25,W
0038:  MOVWF  79
0039:  MOVF   26,W
003A:  MOVWF  7A
003B:  MOVF   27,W
003C:  BSF    03.6
003D:  MOVWF  0D
003E:  BCF    03.6
003F:  MOVF   28,W
0040:  BSF    03.6
0041:  MOVWF  0F
0042:  BCF    03.6
0043:  MOVF   29,W
0044:  BSF    03.6
0045:  MOVWF  0C
0046:  BCF    03.6
0047:  MOVF   2A,W
0048:  BSF    03.6
0049:  MOVWF  0E
004A:  BCF    03.6
004B:  MOVF   20,W
004C:  MOVWF  0A
004D:  SWAPF  21,W
004E:  MOVWF  03
004F:  SWAPF  7F,F
0050:  SWAPF  7F,W
0051:  RETFIE
0052:  BCF    0A.3
0053:  BCF    0A.4
0054:  GOTO   241
0055:  BCF    0A.3
0056:  BCF    0A.4
0057:  GOTO   28B
.................... #include <project.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0058:  BCF    0A.0
0059:  BCF    0A.1
005A:  BCF    0A.2
005B:  ADDLW  5F
005C:  BTFSC  03.0
005D:  INCF   0A,F
005E:  MOVWF  02
005F:  RETLW  00
0060:  RETLW  00
0061:  RETLW  00
0062:  RETLW  00
0063:  RETLW  00
0064:  RETLW  00
0065:  RETLW  00
0066:  RETLW  5F
0067:  RETLW  00
0068:  RETLW  00
0069:  RETLW  00
006A:  RETLW  07
006B:  RETLW  00
006C:  RETLW  07
006D:  RETLW  00
006E:  RETLW  14
006F:  RETLW  7F
0070:  RETLW  14
0071:  RETLW  7F
0072:  RETLW  14
0073:  RETLW  24
0074:  RETLW  2A
0075:  RETLW  7F
0076:  RETLW  2A
0077:  RETLW  12
0078:  RETLW  23
0079:  RETLW  13
007A:  RETLW  08
007B:  RETLW  64
007C:  RETLW  62
007D:  RETLW  36
007E:  RETLW  49
007F:  RETLW  56
0080:  RETLW  20
0081:  RETLW  50
0082:  RETLW  00
0083:  RETLW  08
0084:  RETLW  07
0085:  RETLW  03
0086:  RETLW  00
0087:  RETLW  00
0088:  RETLW  1C
0089:  RETLW  22
008A:  RETLW  41
008B:  RETLW  00
008C:  RETLW  00
008D:  RETLW  41
008E:  RETLW  22
008F:  RETLW  1C
0090:  RETLW  00
0091:  RETLW  2A
0092:  RETLW  1C
0093:  RETLW  7F
0094:  RETLW  1C
0095:  RETLW  2A
0096:  RETLW  08
0097:  RETLW  08
0098:  RETLW  3E
0099:  RETLW  08
009A:  RETLW  08
009B:  RETLW  00
009C:  RETLW  80
009D:  RETLW  70
009E:  RETLW  30
009F:  RETLW  00
00A0:  RETLW  08
00A1:  RETLW  08
00A2:  RETLW  08
00A3:  RETLW  08
00A4:  RETLW  08
00A5:  RETLW  00
00A6:  RETLW  00
00A7:  RETLW  60
00A8:  RETLW  60
00A9:  RETLW  00
00AA:  RETLW  20
00AB:  RETLW  10
00AC:  RETLW  08
00AD:  RETLW  04
00AE:  RETLW  02
00AF:  RETLW  3E
00B0:  RETLW  51
00B1:  RETLW  49
00B2:  RETLW  45
00B3:  RETLW  3E
00B4:  RETLW  00
00B5:  RETLW  42
00B6:  RETLW  7F
00B7:  RETLW  40
00B8:  RETLW  00
00B9:  RETLW  72
00BA:  RETLW  49
00BB:  RETLW  49
00BC:  RETLW  49
00BD:  RETLW  46
00BE:  RETLW  21
00BF:  RETLW  41
00C0:  RETLW  49
00C1:  RETLW  4D
00C2:  RETLW  33
00C3:  RETLW  18
00C4:  RETLW  14
00C5:  RETLW  12
00C6:  RETLW  7F
00C7:  RETLW  10
00C8:  RETLW  27
00C9:  RETLW  45
00CA:  RETLW  45
00CB:  RETLW  45
00CC:  RETLW  39
00CD:  RETLW  3C
00CE:  RETLW  4A
00CF:  RETLW  49
00D0:  RETLW  49
00D1:  RETLW  31
00D2:  RETLW  41
00D3:  RETLW  21
00D4:  RETLW  11
00D5:  RETLW  09
00D6:  RETLW  07
00D7:  RETLW  36
00D8:  RETLW  49
00D9:  RETLW  49
00DA:  RETLW  49
00DB:  RETLW  36
00DC:  RETLW  46
00DD:  RETLW  49
00DE:  RETLW  49
00DF:  RETLW  29
00E0:  RETLW  1E
00E1:  RETLW  00
00E2:  RETLW  00
00E3:  RETLW  14
00E4:  RETLW  00
00E5:  RETLW  00
00E6:  RETLW  00
00E7:  RETLW  40
00E8:  RETLW  34
00E9:  RETLW  00
00EA:  RETLW  00
00EB:  RETLW  00
00EC:  RETLW  08
00ED:  RETLW  14
00EE:  RETLW  22
00EF:  RETLW  41
00F0:  RETLW  14
00F1:  RETLW  14
00F2:  RETLW  14
00F3:  RETLW  14
00F4:  RETLW  14
00F5:  RETLW  00
00F6:  RETLW  41
00F7:  RETLW  22
00F8:  RETLW  14
00F9:  RETLW  08
00FA:  RETLW  02
00FB:  RETLW  01
00FC:  RETLW  59
00FD:  RETLW  09
00FE:  RETLW  06
00FF:  RETLW  3E
0100:  RETLW  41
0101:  RETLW  5D
0102:  RETLW  59
0103:  RETLW  4E
0104:  RETLW  7C
0105:  RETLW  12
0106:  RETLW  11
0107:  RETLW  12
0108:  RETLW  7C
0109:  RETLW  7F
010A:  RETLW  49
010B:  RETLW  49
010C:  RETLW  49
010D:  RETLW  36
010E:  RETLW  3E
010F:  RETLW  41
0110:  RETLW  41
0111:  RETLW  41
0112:  RETLW  22
0113:  RETLW  7F
0114:  RETLW  41
0115:  RETLW  41
0116:  RETLW  41
0117:  RETLW  3E
0118:  RETLW  7F
0119:  RETLW  49
011A:  RETLW  49
011B:  RETLW  49
011C:  RETLW  41
011D:  RETLW  7F
011E:  RETLW  09
011F:  RETLW  09
0120:  RETLW  09
0121:  RETLW  01
0122:  RETLW  3E
0123:  RETLW  41
0124:  RETLW  41
0125:  RETLW  51
0126:  RETLW  73
0127:  RETLW  7F
0128:  RETLW  08
0129:  RETLW  08
012A:  RETLW  08
012B:  RETLW  7F
012C:  RETLW  00
012D:  RETLW  41
012E:  RETLW  7F
012F:  RETLW  41
0130:  RETLW  00
0131:  RETLW  20
0132:  RETLW  40
0133:  RETLW  41
0134:  RETLW  3F
0135:  RETLW  01
0136:  RETLW  7F
0137:  RETLW  08
0138:  RETLW  14
0139:  RETLW  22
013A:  RETLW  41
013B:  RETLW  7F
013C:  RETLW  40
013D:  RETLW  40
013E:  RETLW  40
013F:  RETLW  40
0140:  RETLW  7F
0141:  RETLW  02
0142:  RETLW  1C
0143:  RETLW  02
0144:  RETLW  7F
0145:  RETLW  7F
0146:  RETLW  04
0147:  RETLW  08
0148:  RETLW  10
0149:  RETLW  7F
014A:  RETLW  3E
014B:  RETLW  41
014C:  RETLW  41
014D:  RETLW  41
014E:  RETLW  3E
014F:  RETLW  7F
0150:  RETLW  09
0151:  RETLW  09
0152:  RETLW  09
0153:  RETLW  06
0154:  RETLW  3E
0155:  RETLW  41
0156:  RETLW  51
0157:  RETLW  21
0158:  RETLW  5E
0159:  RETLW  7F
015A:  RETLW  09
015B:  RETLW  19
015C:  RETLW  29
015D:  RETLW  46
015E:  BSF    0A.0
015F:  BCF    0A.1
0160:  BCF    0A.2
0161:  ADDLW  65
0162:  BTFSC  03.0
0163:  INCF   0A,F
0164:  MOVWF  02
0165:  RETLW  26
0166:  RETLW  49
0167:  RETLW  49
0168:  RETLW  49
0169:  RETLW  32
016A:  RETLW  03
016B:  RETLW  01
016C:  RETLW  7F
016D:  RETLW  01
016E:  RETLW  03
016F:  RETLW  3F
0170:  RETLW  40
0171:  RETLW  40
0172:  RETLW  40
0173:  RETLW  3F
0174:  RETLW  1F
0175:  RETLW  20
0176:  RETLW  40
0177:  RETLW  20
0178:  RETLW  1F
0179:  RETLW  3F
017A:  RETLW  40
017B:  RETLW  38
017C:  RETLW  40
017D:  RETLW  3F
017E:  RETLW  63
017F:  RETLW  14
0180:  RETLW  08
0181:  RETLW  14
0182:  RETLW  63
0183:  RETLW  03
0184:  RETLW  04
0185:  RETLW  78
0186:  RETLW  04
0187:  RETLW  03
0188:  RETLW  61
0189:  RETLW  59
018A:  RETLW  49
018B:  RETLW  4D
018C:  RETLW  43
018D:  RETLW  00
018E:  RETLW  7F
018F:  RETLW  41
0190:  RETLW  41
0191:  RETLW  41
0192:  RETLW  02
0193:  RETLW  04
0194:  RETLW  08
0195:  RETLW  10
0196:  RETLW  20
0197:  RETLW  00
0198:  RETLW  41
0199:  RETLW  41
019A:  RETLW  41
019B:  RETLW  7F
019C:  RETLW  04
019D:  RETLW  02
019E:  RETLW  01
019F:  RETLW  02
01A0:  RETLW  04
01A1:  RETLW  40
01A2:  RETLW  40
01A3:  RETLW  40
01A4:  RETLW  40
01A5:  RETLW  40
01A6:  RETLW  00
01A7:  RETLW  03
01A8:  RETLW  07
01A9:  RETLW  08
01AA:  RETLW  00
01AB:  RETLW  20
01AC:  RETLW  54
01AD:  RETLW  54
01AE:  RETLW  78
01AF:  RETLW  40
01B0:  RETLW  7F
01B1:  RETLW  28
01B2:  RETLW  44
01B3:  RETLW  44
01B4:  RETLW  38
01B5:  RETLW  38
01B6:  RETLW  44
01B7:  RETLW  44
01B8:  RETLW  44
01B9:  RETLW  28
01BA:  RETLW  38
01BB:  RETLW  44
01BC:  RETLW  44
01BD:  RETLW  28
01BE:  RETLW  7F
01BF:  RETLW  38
01C0:  RETLW  54
01C1:  RETLW  54
01C2:  RETLW  54
01C3:  RETLW  18
01C4:  RETLW  00
01C5:  RETLW  08
01C6:  RETLW  7E
01C7:  RETLW  09
01C8:  RETLW  02
01C9:  RETLW  18
01CA:  RETLW  A4
01CB:  RETLW  A4
01CC:  RETLW  9C
01CD:  RETLW  78
01CE:  RETLW  7F
01CF:  RETLW  08
01D0:  RETLW  04
01D1:  RETLW  04
01D2:  RETLW  78
01D3:  RETLW  00
01D4:  RETLW  44
01D5:  RETLW  7D
01D6:  RETLW  40
01D7:  RETLW  00
01D8:  RETLW  20
01D9:  RETLW  40
01DA:  RETLW  40
01DB:  RETLW  3D
01DC:  RETLW  00
01DD:  RETLW  7F
01DE:  RETLW  10
01DF:  RETLW  28
01E0:  RETLW  44
01E1:  RETLW  00
01E2:  RETLW  00
01E3:  RETLW  41
01E4:  RETLW  7F
01E5:  RETLW  40
01E6:  RETLW  00
01E7:  RETLW  7C
01E8:  RETLW  04
01E9:  RETLW  78
01EA:  RETLW  04
01EB:  RETLW  78
01EC:  RETLW  7C
01ED:  RETLW  08
01EE:  RETLW  04
01EF:  RETLW  04
01F0:  RETLW  78
01F1:  RETLW  38
01F2:  RETLW  44
01F3:  RETLW  44
01F4:  RETLW  44
01F5:  RETLW  38
01F6:  RETLW  FC
01F7:  RETLW  18
01F8:  RETLW  24
01F9:  RETLW  24
01FA:  RETLW  18
01FB:  RETLW  18
01FC:  RETLW  24
01FD:  RETLW  24
01FE:  RETLW  18
01FF:  RETLW  FC
0200:  RETLW  7C
0201:  RETLW  08
0202:  RETLW  04
0203:  RETLW  04
0204:  RETLW  08
0205:  RETLW  48
0206:  RETLW  54
0207:  RETLW  54
0208:  RETLW  54
0209:  RETLW  24
020A:  RETLW  04
020B:  RETLW  04
020C:  RETLW  3F
020D:  RETLW  44
020E:  RETLW  24
020F:  RETLW  3C
0210:  RETLW  40
0211:  RETLW  40
0212:  RETLW  20
0213:  RETLW  7C
0214:  RETLW  1C
0215:  RETLW  20
0216:  RETLW  40
0217:  RETLW  20
0218:  RETLW  1C
0219:  RETLW  3C
021A:  RETLW  40
021B:  RETLW  30
021C:  RETLW  40
021D:  RETLW  3C
021E:  RETLW  44
021F:  RETLW  28
0220:  RETLW  10
0221:  RETLW  28
0222:  RETLW  44
0223:  RETLW  4C
0224:  RETLW  90
0225:  RETLW  90
0226:  RETLW  90
0227:  RETLW  7C
0228:  RETLW  44
0229:  RETLW  64
022A:  RETLW  54
022B:  RETLW  4C
022C:  RETLW  44
022D:  RETLW  00
022E:  RETLW  08
022F:  RETLW  36
0230:  RETLW  41
0231:  RETLW  00
0232:  RETLW  00
0233:  RETLW  00
0234:  RETLW  77
0235:  RETLW  00
0236:  RETLW  00
0237:  RETLW  00
0238:  RETLW  41
0239:  RETLW  36
023A:  RETLW  08
023B:  RETLW  00
023C:  RETLW  02
023D:  RETLW  01
023E:  RETLW  02
023F:  RETLW  04
0240:  RETLW  02
*
02C3:  DATA CD,34
02C4:  DATA EE,34
02C5:  DATA ED,30
02C6:  DATA 6C,10
02C7:  DATA D2,30
02C8:  DATA E4,30
02C9:  DATA 72,10
02CA:  DATA C4,34
02CB:  DATA 73,38
02CC:  DATA EC,30
02CD:  DATA 79,00
02CE:  DATA C8,32
02CF:  DATA 6C,36
02D0:  DATA 6F,10
02D1:  DATA F7,37
02D2:  DATA 72,36
02D3:  DATA E4,10
02D4:  DATA 00,01
*
03BB:  CLRF   77
03BC:  CLRF   78
03BD:  MOVF   46,W
03BE:  BCF    03.0
03BF:  BTFSC  47.0
03C0:  ADDWF  77,F
03C1:  RRF    77,F
03C2:  RRF    78,F
03C3:  BTFSC  47.1
03C4:  ADDWF  77,F
03C5:  RRF    77,F
03C6:  RRF    78,F
03C7:  BTFSC  47.2
03C8:  ADDWF  77,F
03C9:  RRF    77,F
03CA:  RRF    78,F
03CB:  BTFSC  47.3
03CC:  ADDWF  77,F
03CD:  RRF    77,F
03CE:  RRF    78,F
03CF:  BTFSC  47.4
03D0:  ADDWF  77,F
03D1:  RRF    77,F
03D2:  RRF    78,F
03D3:  BTFSC  47.5
03D4:  ADDWF  77,F
03D5:  RRF    77,F
03D6:  RRF    78,F
03D7:  BTFSC  47.6
03D8:  ADDWF  77,F
03D9:  RRF    77,F
03DA:  RRF    78,F
03DB:  BTFSC  47.7
03DC:  ADDWF  77,F
03DD:  RRF    77,F
03DE:  RRF    78,F
03DF:  RETURN
03E0:  MOVF   45,W
03E1:  CLRF   78
03E2:  SUBWF  44,W
03E3:  BTFSC  03.0
03E4:  GOTO   3E8
03E5:  MOVF   44,W
03E6:  MOVWF  77
03E7:  GOTO   3F4
03E8:  CLRF   77
03E9:  MOVLW  08
03EA:  MOVWF  46
03EB:  RLF    44,F
03EC:  RLF    77,F
03ED:  MOVF   45,W
03EE:  SUBWF  77,W
03EF:  BTFSC  03.0
03F0:  MOVWF  77
03F1:  RLF    78,F
03F2:  DECFSZ 46,F
03F3:  GOTO   3EB
03F4:  RETURN
*
0470:  MOVF   0B,W
0471:  MOVWF  3E
0472:  BCF    0B.7
0473:  BSF    03.5
0474:  BSF    03.6
0475:  BSF    0C.7
0476:  BSF    0C.0
0477:  NOP
0478:  NOP
0479:  BCF    03.5
047A:  BCF    03.6
047B:  BTFSC  3E.7
047C:  BSF    0B.7
047D:  BSF    03.6
047E:  MOVF   0C,W
047F:  ANDLW  7F
0480:  BTFSC  03.2
0481:  GOTO   4C4
0482:  BCF    03.6
0483:  MOVWF  3E
0484:  BSF    03.6
0485:  MOVF   0D,W
0486:  BCF    03.6
0487:  MOVWF  3F
0488:  BSF    03.6
0489:  MOVF   0F,W
048A:  BCF    03.6
048B:  MOVWF  40
048C:  MOVF   3E,W
048D:  MOVWF  41
048E:  CALL   3F5
048F:  MOVF   3F,W
0490:  BSF    03.6
0491:  MOVWF  0D
0492:  BCF    03.6
0493:  MOVF   40,W
0494:  BSF    03.6
0495:  MOVWF  0F
0496:  BCF    03.6
0497:  MOVF   0B,W
0498:  MOVWF  41
0499:  BCF    0B.7
049A:  BSF    03.5
049B:  BSF    03.6
049C:  BSF    0C.7
049D:  BSF    0C.0
049E:  NOP
049F:  NOP
04A0:  BCF    03.5
04A1:  BCF    03.6
04A2:  BTFSC  41.7
04A3:  BSF    0B.7
04A4:  BSF    03.6
04A5:  RLF    0C,W
04A6:  RLF    0E,W
04A7:  ANDLW  7F
04A8:  BTFSC  03.2
04A9:  GOTO   4C4
04AA:  BCF    03.6
04AB:  MOVWF  3E
04AC:  BSF    03.6
04AD:  MOVF   0D,W
04AE:  BCF    03.6
04AF:  MOVWF  3F
04B0:  BSF    03.6
04B1:  MOVF   0F,W
04B2:  BCF    03.6
04B3:  MOVWF  40
04B4:  MOVF   3E,W
04B5:  MOVWF  41
04B6:  CALL   3F5
04B7:  MOVF   3F,W
04B8:  BSF    03.6
04B9:  MOVWF  0D
04BA:  BCF    03.6
04BB:  MOVF   40,W
04BC:  BSF    03.6
04BD:  MOVWF  0F
04BE:  INCF   0D,F
04BF:  BTFSC  03.2
04C0:  INCF   0F,F
04C1:  BCF    03.6
04C2:  GOTO   470
04C3:  BSF    03.6
04C4:  BCF    03.6
04C5:  RETURN
04C6:  MOVF   78,W
04C7:  MOVF   3E,W
04C8:  MOVWF  44
04C9:  MOVLW  64
04CA:  MOVWF  45
04CB:  CALL   3E0
04CC:  MOVF   77,W
04CD:  MOVWF  3E
04CE:  MOVF   78,W
04CF:  MOVLW  30
04D0:  BTFSS  03.2
04D1:  GOTO   4D9
04D2:  BTFSS  3F.1
04D3:  GOTO   4E0
04D4:  BTFSC  3F.3
04D5:  GOTO   4E0
04D6:  BTFSC  3F.4
04D7:  MOVLW  20
04D8:  GOTO   4DC
04D9:  BCF    3F.3
04DA:  BCF    3F.4
04DB:  BSF    3F.0
04DC:  ADDWF  78,F
04DD:  MOVF   78,W
04DE:  MOVWF  41
04DF:  CALL   3F5
04E0:  MOVF   3E,W
04E1:  MOVWF  44
04E2:  MOVLW  0A
04E3:  MOVWF  45
04E4:  CALL   3E0
04E5:  MOVF   77,W
04E6:  MOVWF  3E
04E7:  MOVF   78,W
04E8:  MOVLW  30
04E9:  BTFSS  03.2
04EA:  GOTO   4F1
04EB:  BTFSC  3F.3
04EC:  GOTO   4F5
04ED:  BTFSS  3F.0
04EE:  GOTO   4F5
04EF:  BTFSC  3F.4
04F0:  MOVLW  20
04F1:  ADDWF  78,F
04F2:  MOVF   78,W
04F3:  MOVWF  41
04F4:  CALL   3F5
04F5:  MOVLW  30
04F6:  ADDWF  3E,F
04F7:  MOVF   3E,W
04F8:  MOVWF  41
04F9:  CALL   3F5
04FA:  BCF    0A.3
04FB:  BCF    0A.4
04FC:  GOTO   580 (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=20MHz)
*
02D5:  MOVLW  40
02D6:  MOVWF  04
02D7:  BCF    03.7
02D8:  MOVF   00,W
02D9:  BTFSC  03.2
02DA:  GOTO   2E8
02DB:  MOVLW  06
02DC:  MOVWF  78
02DD:  CLRF   77
02DE:  DECFSZ 77,F
02DF:  GOTO   2DE
02E0:  DECFSZ 78,F
02E1:  GOTO   2DD
02E2:  MOVLW  7B
02E3:  MOVWF  77
02E4:  DECFSZ 77,F
02E5:  GOTO   2E4
02E6:  DECFSZ 00,F
02E7:  GOTO   2DB
02E8:  RETURN
.................... 
.................... 
.................... 
.................... // Interfacing PIC16F877A with SSD1306 OLED display (128x64 Pixel)
.................... // http://simple-circuit.com/
.................... 
.................... #define SSD1306_RST   PIN_D4
.................... 
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP
.................... #use I2C(MASTER, I2C1, FAST = 400000, stream = SSD1306_STREAM)  // Initialize I2C
02E9:  BCF    14.7
02EA:  BCF    0C.3
02EB:  MOVF   47,W
02EC:  MOVWF  13
02ED:  MOVLW  02
02EE:  BTFSC  14.7
02EF:  GOTO   2F7
02F0:  BSF    03.5
02F1:  BTFSC  14.2
02F2:  GOTO   2F1
02F3:  MOVLW  00
02F4:  BTFSC  11.6
02F5:  MOVLW  01
02F6:  BCF    03.5
02F7:  MOVWF  78
02F8:  RETURN
.................... 
.................... #byte porta = 0x05
.................... 
.................... // Include SSD1306 OLED driver source code
.................... #include <SSD1306.c>
.................... /******************************************************************************
....................  SSD1306 OLED driver for CCS PIC C compiler (SSD1306.c)                       *
....................                                                                               *
....................  The driver is for I2C mode only.                                             *
....................                                                                               *
....................  http://simple-circuit.com/                                                   *
....................                                                                               *
.................... *******************************************************************************/
.................... 
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... //------------------------------ Definitions ---------------------------------//
.................... 
.................... #define SSD1306_I2C_ADDRESS   0x7A
.................... 
.................... #if !defined SSD1306_128_32 && !defined SSD1306_96_16
.................... #define SSD1306_128_64
.................... #endif
.................... #if defined SSD1306_128_32 && defined SSD1306_96_16
....................   #error "Only one SSD1306 display can be specified at once"
.................... #endif
.................... 
.................... #if defined SSD1306_128_64
....................   #define SSD1306_LCDWIDTH            128
....................   #define SSD1306_LCDHEIGHT            64
.................... #endif
.................... #if defined SSD1306_128_32
....................   #define SSD1306_LCDWIDTH            128
....................   #define SSD1306_LCDHEIGHT            32
.................... #endif
.................... #if defined SSD1306_96_16
....................   #define SSD1306_LCDWIDTH             96
....................   #define SSD1306_LCDHEIGHT            16
.................... #endif
.................... 
.................... #define SSD1306_SETCONTRAST          0x81
.................... #define SSD1306_DISPLAYALLON_RESUME  0xA4
.................... #define SSD1306_DISPLAYALLON         0xA5
.................... #define SSD1306_NORMALDISPLAY        0xA6
.................... #define SSD1306_INVERTDISPLAY_       0xA7
.................... #define SSD1306_DISPLAYOFF           0xAE
.................... #define SSD1306_DISPLAYON            0xAF
.................... #define SSD1306_SETDISPLAYOFFSET     0xD3
.................... #define SSD1306_SETCOMPINS           0xDA
.................... #define SSD1306_SETVCOMDETECT        0xDB
.................... #define SSD1306_SETDISPLAYCLOCKDIV   0xD5
.................... #define SSD1306_SETPRECHARGE         0xD9
.................... #define SSD1306_SETMULTIPLEX         0xA8
.................... #define SSD1306_SETLOWCOLUMN         0x00
.................... #define SSD1306_SETHIGHCOLUMN        0x10
.................... #define SSD1306_SETSTARTLINE         0x40
.................... #define SSD1306_MEMORYMODE           0x20
.................... #define SSD1306_COLUMNADDR           0x21
.................... #define SSD1306_PAGEADDR             0x22
.................... #define SSD1306_COMSCANINC           0xC0
.................... #define SSD1306_COMSCANDEC           0xC8
.................... #define SSD1306_SEGREMAP             0xA0
.................... #define SSD1306_CHARGEPUMP           0x8D
.................... #define SSD1306_EXTERNALVCC          0x01
.................... #define SSD1306_SWITCHCAPVCC         0x02
.................... 
.................... // Scrolling #defines
.................... #define SSD1306_ACTIVATE_SCROLL                      0x2F
.................... #define SSD1306_DEACTIVATE_SCROLL                    0x2E
.................... #define SSD1306_SET_VERTICAL_SCROLL_AREA             0xA3
.................... #define SSD1306_RIGHT_HORIZONTAL_SCROLL              0x26
.................... #define SSD1306_LEFT_HORIZONTAL_SCROLL               0x27
.................... #define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
.................... #define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL  0x2A
.................... 
.................... 
.................... uint8_t _i2caddr, _vccstate, x_pos = 1, y_pos = 1;
.................... 
.................... //--------------------------------------------------------------------------//
.................... 
.................... int1 wrap = TRUE;
.................... 
.................... const char Font[] = {
.................... 0x00, 0x00, 0x00, 0x00, 0x00,
.................... 0x00, 0x00, 0x5F, 0x00, 0x00,
.................... 0x00, 0x07, 0x00, 0x07, 0x00,
.................... 0x14, 0x7F, 0x14, 0x7F, 0x14,
.................... 0x24, 0x2A, 0x7F, 0x2A, 0x12,
.................... 0x23, 0x13, 0x08, 0x64, 0x62,
.................... 0x36, 0x49, 0x56, 0x20, 0x50,
.................... 0x00, 0x08, 0x07, 0x03, 0x00,
.................... 0x00, 0x1C, 0x22, 0x41, 0x00,
.................... 0x00, 0x41, 0x22, 0x1C, 0x00,
.................... 0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
.................... 0x08, 0x08, 0x3E, 0x08, 0x08,
.................... 0x00, 0x80, 0x70, 0x30, 0x00,
.................... 0x08, 0x08, 0x08, 0x08, 0x08,
.................... 0x00, 0x00, 0x60, 0x60, 0x00,
.................... 0x20, 0x10, 0x08, 0x04, 0x02,
.................... 0x3E, 0x51, 0x49, 0x45, 0x3E,
.................... 0x00, 0x42, 0x7F, 0x40, 0x00,
.................... 0x72, 0x49, 0x49, 0x49, 0x46,
.................... 0x21, 0x41, 0x49, 0x4D, 0x33,
.................... 0x18, 0x14, 0x12, 0x7F, 0x10,
.................... 0x27, 0x45, 0x45, 0x45, 0x39,
.................... 0x3C, 0x4A, 0x49, 0x49, 0x31,
.................... 0x41, 0x21, 0x11, 0x09, 0x07,
.................... 0x36, 0x49, 0x49, 0x49, 0x36,
.................... 0x46, 0x49, 0x49, 0x29, 0x1E,
.................... 0x00, 0x00, 0x14, 0x00, 0x00,
.................... 0x00, 0x40, 0x34, 0x00, 0x00,
.................... 0x00, 0x08, 0x14, 0x22, 0x41,
.................... 0x14, 0x14, 0x14, 0x14, 0x14,
.................... 0x00, 0x41, 0x22, 0x14, 0x08,
.................... 0x02, 0x01, 0x59, 0x09, 0x06,
.................... 0x3E, 0x41, 0x5D, 0x59, 0x4E,
.................... 0x7C, 0x12, 0x11, 0x12, 0x7C,
.................... 0x7F, 0x49, 0x49, 0x49, 0x36,
.................... 0x3E, 0x41, 0x41, 0x41, 0x22,
.................... 0x7F, 0x41, 0x41, 0x41, 0x3E,
.................... 0x7F, 0x49, 0x49, 0x49, 0x41,
.................... 0x7F, 0x09, 0x09, 0x09, 0x01,
.................... 0x3E, 0x41, 0x41, 0x51, 0x73,
.................... 0x7F, 0x08, 0x08, 0x08, 0x7F,
.................... 0x00, 0x41, 0x7F, 0x41, 0x00,
.................... 0x20, 0x40, 0x41, 0x3F, 0x01,
.................... 0x7F, 0x08, 0x14, 0x22, 0x41,
.................... 0x7F, 0x40, 0x40, 0x40, 0x40,
.................... 0x7F, 0x02, 0x1C, 0x02, 0x7F,
.................... 0x7F, 0x04, 0x08, 0x10, 0x7F,
.................... 0x3E, 0x41, 0x41, 0x41, 0x3E,
.................... 0x7F, 0x09, 0x09, 0x09, 0x06,
.................... 0x3E, 0x41, 0x51, 0x21, 0x5E,
.................... 0x7F, 0x09, 0x19, 0x29, 0x46
.................... };
.................... const char Font2[] = {
.................... 0x26, 0x49, 0x49, 0x49, 0x32,
.................... 0x03, 0x01, 0x7F, 0x01, 0x03,
.................... 0x3F, 0x40, 0x40, 0x40, 0x3F,
.................... 0x1F, 0x20, 0x40, 0x20, 0x1F,
.................... 0x3F, 0x40, 0x38, 0x40, 0x3F,
.................... 0x63, 0x14, 0x08, 0x14, 0x63,
.................... 0x03, 0x04, 0x78, 0x04, 0x03,
.................... 0x61, 0x59, 0x49, 0x4D, 0x43,
.................... 0x00, 0x7F, 0x41, 0x41, 0x41,
.................... 0x02, 0x04, 0x08, 0x10, 0x20,
.................... 0x00, 0x41, 0x41, 0x41, 0x7F,
.................... 0x04, 0x02, 0x01, 0x02, 0x04,
.................... 0x40, 0x40, 0x40, 0x40, 0x40,
.................... 0x00, 0x03, 0x07, 0x08, 0x00,
.................... 0x20, 0x54, 0x54, 0x78, 0x40,
.................... 0x7F, 0x28, 0x44, 0x44, 0x38,
.................... 0x38, 0x44, 0x44, 0x44, 0x28,
.................... 0x38, 0x44, 0x44, 0x28, 0x7F,
.................... 0x38, 0x54, 0x54, 0x54, 0x18,
.................... 0x00, 0x08, 0x7E, 0x09, 0x02,
.................... 0x18, 0xA4, 0xA4, 0x9C, 0x78,
.................... 0x7F, 0x08, 0x04, 0x04, 0x78,
.................... 0x00, 0x44, 0x7D, 0x40, 0x00,
.................... 0x20, 0x40, 0x40, 0x3D, 0x00,
.................... 0x7F, 0x10, 0x28, 0x44, 0x00,
.................... 0x00, 0x41, 0x7F, 0x40, 0x00,
.................... 0x7C, 0x04, 0x78, 0x04, 0x78,
.................... 0x7C, 0x08, 0x04, 0x04, 0x78,
.................... 0x38, 0x44, 0x44, 0x44, 0x38,
.................... 0xFC, 0x18, 0x24, 0x24, 0x18,
.................... 0x18, 0x24, 0x24, 0x18, 0xFC,
.................... 0x7C, 0x08, 0x04, 0x04, 0x08,
.................... 0x48, 0x54, 0x54, 0x54, 0x24,
.................... 0x04, 0x04, 0x3F, 0x44, 0x24,
.................... 0x3C, 0x40, 0x40, 0x20, 0x7C,
.................... 0x1C, 0x20, 0x40, 0x20, 0x1C,
.................... 0x3C, 0x40, 0x30, 0x40, 0x3C,
.................... 0x44, 0x28, 0x10, 0x28, 0x44,
.................... 0x4C, 0x90, 0x90, 0x90, 0x7C,
.................... 0x44, 0x64, 0x54, 0x4C, 0x44,
.................... 0x00, 0x08, 0x36, 0x41, 0x00,
.................... 0x00, 0x00, 0x77, 0x00, 0x00,
.................... 0x00, 0x41, 0x36, 0x08, 0x00,
.................... 0x02, 0x01, 0x02, 0x04, 0x02
.................... };
.................... 
.................... 
.................... void ssd1306_command(uint8_t c) {
02F9:  CLRF   46
....................     uint8_t control = 0x00;   // Co = 0, D/C = 0
....................     I2C_Start(SSD1306_STREAM);
02FA:  BSF    03.5
02FB:  BSF    11.0
02FC:  BTFSC  11.0
02FD:  GOTO   2FC
....................     I2C_Write(SSD1306_STREAM, _i2caddr);
02FE:  BCF    03.5
02FF:  MOVF   2C,W
0300:  MOVWF  47
0301:  CALL   2E9
....................     I2C_Write(SSD1306_STREAM, control);
0302:  MOVF   46,W
0303:  MOVWF  47
0304:  CALL   2E9
....................     I2C_Write(SSD1306_STREAM, c);
0305:  MOVF   45,W
0306:  MOVWF  47
0307:  CALL   2E9
....................     I2C_Stop(SSD1306_STREAM);
0308:  BSF    03.5
0309:  BSF    11.2
030A:  BTFSC  11.2
030B:  GOTO   30A
030C:  BCF    03.5
030D:  RETURN
.................... }
.................... 
.................... void SSD1306_Init(uint8_t vccstate = SSD1306_SWITCHCAPVCC, uint8_t i2caddr = SSD1306_I2C_ADDRESS) {
....................   _vccstate = vccstate;
030E:  MOVF   3E,W
030F:  MOVWF  2D
....................   _i2caddr  = i2caddr;
0310:  MOVF   3F,W
0311:  MOVWF  2C
....................   #ifdef SSD1306_RST
....................     output_low(SSD1306_RST);
0312:  BSF    03.5
0313:  BCF    08.4
0314:  BCF    03.5
0315:  BCF    08.4
....................     output_drive(SSD1306_RST);
0316:  BSF    03.5
0317:  BCF    08.4
....................     delay_ms(10);
0318:  MOVLW  0A
0319:  BCF    03.5
031A:  MOVWF  40
031B:  CALL   2D5
....................     output_high(SSD1306_RST);
031C:  BSF    03.5
031D:  BCF    08.4
031E:  BCF    03.5
031F:  BSF    08.4
....................   #endif
....................   // Init sequence
....................   ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
0320:  MOVLW  AE
0321:  MOVWF  45
0322:  CALL   2F9
....................   ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
0323:  MOVLW  D5
0324:  MOVWF  45
0325:  CALL   2F9
....................   ssd1306_command(0x80);                                  // the suggested ratio 0x80
0326:  MOVLW  80
0327:  MOVWF  45
0328:  CALL   2F9
.................... 
....................   ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
0329:  MOVLW  A8
032A:  MOVWF  45
032B:  CALL   2F9
....................   ssd1306_command(SSD1306_LCDHEIGHT - 1);
032C:  MOVLW  3F
032D:  MOVWF  45
032E:  CALL   2F9
.................... 
....................   ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
032F:  MOVLW  D3
0330:  MOVWF  45
0331:  CALL   2F9
....................   ssd1306_command(0x0);                                   // no offset
0332:  CLRF   45
0333:  CALL   2F9
....................   ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
0334:  MOVLW  40
0335:  MOVWF  45
0336:  CALL   2F9
....................   ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
0337:  MOVLW  8D
0338:  MOVWF  45
0339:  CALL   2F9
....................   if (vccstate == SSD1306_EXTERNALVCC)
033A:  DECFSZ 3E,W
033B:  GOTO   340
....................     { ssd1306_command(0x10); }
033C:  MOVLW  10
033D:  MOVWF  45
033E:  CALL   2F9
033F:  GOTO   343
....................   else
....................     { ssd1306_command(0x14); }
0340:  MOVLW  14
0341:  MOVWF  45
0342:  CALL   2F9
....................   ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
0343:  MOVLW  20
0344:  MOVWF  45
0345:  CALL   2F9
....................   ssd1306_command(0x00);                                  // 0x0 act like ks0108
0346:  CLRF   45
0347:  CALL   2F9
....................   ssd1306_command(SSD1306_SEGREMAP | 0x1);
0348:  MOVLW  A1
0349:  MOVWF  45
034A:  CALL   2F9
....................   ssd1306_command(SSD1306_COMSCANDEC);
034B:  MOVLW  C8
034C:  MOVWF  45
034D:  CALL   2F9
.................... 
....................  #if defined SSD1306_128_32
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
....................   ssd1306_command(0x02);
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
....................   ssd1306_command(0x8F);
.................... 
.................... #elif defined SSD1306_128_64
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
034E:  MOVLW  DA
034F:  MOVWF  45
0350:  CALL   2F9
....................   ssd1306_command(0x12);
0351:  MOVLW  12
0352:  MOVWF  45
0353:  CALL   2F9
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
0354:  MOVLW  81
0355:  MOVWF  45
0356:  CALL   2F9
....................   if (vccstate == SSD1306_EXTERNALVCC)
0357:  DECFSZ 3E,W
0358:  GOTO   35D
....................     { ssd1306_command(0x9F); }
0359:  MOVLW  9F
035A:  MOVWF  45
035B:  CALL   2F9
035C:  GOTO   360
....................   else
....................     { ssd1306_command(0xCF); }
035D:  MOVLW  CF
035E:  MOVWF  45
035F:  CALL   2F9
.................... 
.................... #elif defined SSD1306_96_16
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
....................   ssd1306_command(0x2);   //ada x12
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
....................   if (vccstate == SSD1306_EXTERNALVCC)
....................     { ssd1306_command(0x10); }
....................   else
....................     { ssd1306_command(0xAF); }
.................... 
.................... #endif
.................... 
....................   ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
0360:  MOVLW  D9
0361:  MOVWF  45
0362:  CALL   2F9
....................   if (vccstate == SSD1306_EXTERNALVCC)
0363:  DECFSZ 3E,W
0364:  GOTO   369
....................     { ssd1306_command(0x22); }
0365:  MOVLW  22
0366:  MOVWF  45
0367:  CALL   2F9
0368:  GOTO   36C
....................   else
....................     { ssd1306_command(0xF1); }
0369:  MOVLW  F1
036A:  MOVWF  45
036B:  CALL   2F9
....................   ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
036C:  MOVLW  DB
036D:  MOVWF  45
036E:  CALL   2F9
....................   ssd1306_command(0x40);
036F:  MOVLW  40
0370:  MOVWF  45
0371:  CALL   2F9
....................   ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
0372:  MOVLW  A4
0373:  MOVWF  45
0374:  CALL   2F9
....................   ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
0375:  MOVLW  A6
0376:  MOVWF  45
0377:  CALL   2F9
.................... 
....................   ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
0378:  MOVLW  2E
0379:  MOVWF  45
037A:  CALL   2F9
.................... 
....................   ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
037B:  MOVLW  AF
037C:  MOVWF  45
037D:  CALL   2F9
037E:  BCF    0A.3
037F:  BCF    0A.4
0380:  GOTO   54F (RETURN)
.................... }
.................... 
.................... void SSD1306_StartScrollRight(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_RIGHT_HORIZONTAL_SCROLL);
....................   ssd1306_command(0X00);
....................   ssd1306_command(start);  // start page
....................   ssd1306_command(0X00);
....................   ssd1306_command(stop);   // end page
....................   ssd1306_command(0X00);
....................   ssd1306_command(0XFF);
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_StartScrollLeft(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_LEFT_HORIZONTAL_SCROLL);
....................   ssd1306_command(0X00);
....................   ssd1306_command(start);
....................   ssd1306_command(0X00);
....................   ssd1306_command(stop);
....................   ssd1306_command(0X00);
....................   ssd1306_command(0XFF);
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_StartScrollDiagRight(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA);
....................   ssd1306_command(0X00);
....................   ssd1306_command(SSD1306_LCDHEIGHT);
....................   ssd1306_command(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL);
....................   ssd1306_command(0X00);
....................   ssd1306_command(start);
....................   ssd1306_command(0X00);
....................   ssd1306_command(stop);
....................   ssd1306_command(0X01);
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_StartScrollDiagLeft(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA);
....................   ssd1306_command(0X00);
....................   ssd1306_command(SSD1306_LCDHEIGHT);
....................   ssd1306_command(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL);
....................   ssd1306_command(0X00);
....................   ssd1306_command(start);
....................   ssd1306_command(0X00);
....................   ssd1306_command(stop);
....................   ssd1306_command(0X01);
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_StopScroll(void) {
....................   ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_Dim(int1 dim) {
....................   uint8_t contrast;
....................   if (dim)
....................     contrast = 0; // Dimmed display
....................   else {
....................     if (_vccstate == SSD1306_EXTERNALVCC)
....................       contrast = 0x9F;
....................     else
....................       contrast = 0xCF;
....................   }
....................   // the range of contrast to too small to be really useful
....................   // it is useful to dim the display
....................   ssd1306_command(SSD1306_SETCONTRAST);
....................   ssd1306_command(contrast);
.................... }
.................... 
.................... void SSD1306_SetTextWrap(int1 w) {
....................   wrap = w;
.................... }
.................... 
.................... void SSD1306_InvertDisplay(int1 i) {
....................   if (i)
....................     ssd1306_command(SSD1306_INVERTDISPLAY_);
....................   else
....................     ssd1306_command(SSD1306_NORMALDISPLAY);
.................... }
.................... 
.................... void SSD1306_GotoXY(uint8_t x, uint8_t y) {
....................   if((x > 21) || y > 8)
*
03AE:  MOVF   3E,W
03AF:  SUBLW  15
03B0:  BTFSS  03.0
03B1:  GOTO   3B5
03B2:  MOVF   3F,W
03B3:  SUBLW  08
03B4:  BTFSS  03.0
....................     return;
03B5:  GOTO   3BA
....................   x_pos = x;
03B6:  MOVF   3E,W
03B7:  MOVWF  2E
....................   y_pos = y;
03B8:  MOVF   3F,W
03B9:  MOVWF  2F
03BA:  RETURN
.................... }
.................... 
.................... void SSD1306_PutC(uint8_t c) {
....................   uint8_t font_c;
....................   if((c < ' ') || (c > '~'))
*
03F5:  MOVF   41,W
03F6:  SUBLW  1F
03F7:  BTFSC  03.0
03F8:  GOTO   3FD
03F9:  MOVF   41,W
03FA:  SUBLW  7E
03FB:  BTFSC  03.0
03FC:  GOTO   3FF
....................     c = '?';
03FD:  MOVLW  3F
03FE:  MOVWF  41
....................   ssd1306_command(SSD1306_COLUMNADDR);
03FF:  MOVLW  21
0400:  MOVWF  45
0401:  CALL   2F9
....................   ssd1306_command(6 * (x_pos - 1));
0402:  MOVLW  01
0403:  SUBWF  2E,W
0404:  MOVWF  44
0405:  MOVLW  06
0406:  MOVWF  46
0407:  MOVF   44,W
0408:  MOVWF  47
0409:  CALL   3BB
040A:  MOVF   78,W
040B:  MOVWF  44
040C:  MOVWF  45
040D:  CALL   2F9
....................   ssd1306_command(6 * (x_pos - 1) + 4); // Column end address (127 = reset)
040E:  MOVLW  01
040F:  SUBWF  2E,W
0410:  MOVWF  44
0411:  MOVLW  06
0412:  MOVWF  46
0413:  MOVF   44,W
0414:  MOVWF  47
0415:  CALL   3BB
0416:  MOVLW  04
0417:  ADDWF  78,W
0418:  MOVWF  44
0419:  MOVWF  45
041A:  CALL   2F9
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
041B:  MOVLW  22
041C:  MOVWF  45
041D:  CALL   2F9
....................   ssd1306_command(y_pos - 1); // Page start address (0 = reset)
041E:  MOVLW  01
041F:  SUBWF  2F,W
0420:  MOVWF  44
0421:  MOVWF  45
0422:  CALL   2F9
....................   ssd1306_command(y_pos - 1); // Page end address
0423:  MOVLW  01
0424:  SUBWF  2F,W
0425:  MOVWF  44
0426:  MOVWF  45
0427:  CALL   2F9
....................   
....................   I2C_Start(SSD1306_STREAM);
0428:  BSF    03.5
0429:  BSF    11.0
042A:  BTFSC  11.0
042B:  GOTO   42A
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
042C:  BCF    03.5
042D:  MOVF   2C,W
042E:  MOVWF  47
042F:  CALL   2E9
....................   I2C_Write(SSD1306_STREAM, 0x40);
0430:  MOVLW  40
0431:  MOVWF  47
0432:  CALL   2E9
....................   
....................   for(uint8_t i = 0; i < 5; i++ ) {
0433:  CLRF   43
0434:  MOVF   43,W
0435:  SUBLW  04
0436:  BTFSS  03.0
0437:  GOTO   45A
....................     if(c < 'S')
0438:  MOVF   41,W
0439:  SUBLW  52
043A:  BTFSS  03.0
043B:  GOTO   449
....................       font_c = font[(c - 32) * 5 + i];
043C:  MOVLW  20
043D:  SUBWF  41,W
043E:  MOVWF  45
043F:  MOVWF  46
0440:  MOVLW  05
0441:  MOVWF  47
0442:  CALL   3BB
0443:  MOVF   43,W
0444:  ADDWF  78,W
0445:  CALL   058
0446:  MOVWF  78
0447:  MOVWF  42
0448:  GOTO   455
....................     else
....................       font_c = font2[(c - 'S') * 5 + i];
0449:  MOVLW  53
044A:  SUBWF  41,W
044B:  MOVWF  45
044C:  MOVWF  46
044D:  MOVLW  05
044E:  MOVWF  47
044F:  CALL   3BB
0450:  MOVF   43,W
0451:  ADDWF  78,W
0452:  CALL   15E
0453:  MOVWF  78
0454:  MOVWF  42
....................   
....................     I2C_Write(SSD1306_STREAM, font_c);
0455:  MOVF   42,W
0456:  MOVWF  47
0457:  CALL   2E9
0458:  INCF   43,F
0459:  GOTO   434
....................   }
....................   I2C_Stop(SSD1306_STREAM);
045A:  BSF    03.5
045B:  BSF    11.2
045C:  BTFSC  11.2
045D:  GOTO   45C
.................... 
....................   x_pos = x_pos % 21 + 1;
045E:  BCF    03.5
045F:  MOVF   2E,W
0460:  MOVWF  44
0461:  MOVLW  15
0462:  MOVWF  45
0463:  CALL   3E0
0464:  MOVLW  01
0465:  ADDWF  77,W
0466:  MOVWF  2E
....................   if (wrap && (x_pos == 1))
0467:  BTFSS  30.0
0468:  GOTO   46F
0469:  DECFSZ 2E,W
046A:  GOTO   46F
....................     y_pos = y_pos % 8 + 1;
046B:  MOVF   2F,W
046C:  ANDLW  07
046D:  ADDLW  01
046E:  MOVWF  2F
046F:  RETURN
.................... 
.................... }
.................... 
.................... void SSD1306_PutCustomC(char *c) {
....................   uint8_t line;
....................   ssd1306_command(SSD1306_COLUMNADDR);
....................   ssd1306_command(6 * (x_pos - 1));
....................   ssd1306_command(6 * (x_pos - 1) + 4); // Column end address (127 = reset)
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
....................   ssd1306_command(y_pos - 1); // Page start address (0 = reset)
....................   ssd1306_command(y_pos - 1); // Page end address
....................   
....................   I2C_Start(SSD1306_STREAM);
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
....................   I2C_Write(SSD1306_STREAM, 0x40);
....................   
....................   for(uint8_t i = 0; i < 5; i++ ) {
....................     line = c[i];
....................     I2C_Write(SSD1306_STREAM, line);
....................   }
....................   I2C_Stop(SSD1306_STREAM);
.................... 
....................   x_pos = x_pos % 21 + 1;
....................   if (wrap && (x_pos == 1))
....................     y_pos = y_pos % 8 + 1;
.................... 
.................... }
.................... 
.................... void SSD1306_ClearDisplay() {
.................... 
....................   ssd1306_command(SSD1306_COLUMNADDR);
*
0381:  MOVLW  21
0382:  MOVWF  45
0383:  CALL   2F9
....................   ssd1306_command(0);    // Column start address
0384:  CLRF   45
0385:  CALL   2F9
....................   #if defined SSD1306_128_64 || defined SSD1306_128_32
....................   ssd1306_command(127);  // Column end address
0386:  MOVLW  7F
0387:  MOVWF  45
0388:  CALL   2F9
....................   #else
....................     ssd1306_command(95); // Column end address
....................   #endif
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
0389:  MOVLW  22
038A:  MOVWF  45
038B:  CALL   2F9
....................   ssd1306_command(0);   // Page start address (0 = reset)
038C:  CLRF   45
038D:  CALL   2F9
....................   #if defined SSD1306_128_64
....................   ssd1306_command(7);   // Page end address
038E:  MOVLW  07
038F:  MOVWF  45
0390:  CALL   2F9
....................   #elif defined SSD1306_128_32
....................   ssd1306_command(3);   // Page end address
....................   #elif defined SSD1306_96_16
....................   ssd1306_command(1);   // Page end address
....................   #endif
.................... 
....................   I2C_Start(SSD1306_STREAM);
0391:  BSF    03.5
0392:  BSF    11.0
0393:  BTFSC  11.0
0394:  GOTO   393
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
0395:  BCF    03.5
0396:  MOVF   2C,W
0397:  MOVWF  47
0398:  CALL   2E9
....................   I2C_Write(SSD1306_STREAM, 0x40);
0399:  MOVLW  40
039A:  MOVWF  47
039B:  CALL   2E9
.................... 
....................   for(uint16_t i = 0; i < SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8; i++ )
039C:  CLRF   3F
039D:  CLRF   3E
039E:  MOVF   3F,W
039F:  SUBLW  03
03A0:  BTFSS  03.0
03A1:  GOTO   3A8
....................     I2C_Write(SSD1306_STREAM, 0);
03A2:  CLRF   47
03A3:  CALL   2E9
03A4:  INCF   3E,F
03A5:  BTFSC  03.2
03A6:  INCF   3F,F
03A7:  GOTO   39E
.................... 
....................   I2C_Stop(SSD1306_STREAM);
03A8:  BSF    03.5
03A9:  BSF    11.2
03AA:  BTFSC  11.2
03AB:  GOTO   3AA
03AC:  BCF    03.5
03AD:  RETURN
.................... 
.................... }
.................... 
.................... void SSD1306_FillScreen() {
.................... 
....................   ssd1306_command(SSD1306_COLUMNADDR);
....................   ssd1306_command(0);    // Column start address
....................   #if defined SSD1306_128_64 || defined SSD1306_128_32
....................   ssd1306_command(127);  // Column end address
....................   #else
....................     ssd1306_command(95); // Column end address
....................   #endif
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
....................   ssd1306_command(0);   // Page start address (0 = reset)
....................   #if defined SSD1306_128_64
....................   ssd1306_command(7);   // Page end address
....................   #elif defined SSD1306_128_32
....................   ssd1306_command(3);   // Page end address
....................   #elif defined SSD1306_96_16
....................   ssd1306_command(1);   // Page end address
....................   #endif
.................... 
....................   I2C_Start(SSD1306_STREAM);
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
....................   I2C_Write(SSD1306_STREAM, 0x40);
.................... 
....................   for(uint16_t i = 0; i < SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8; i++ )
....................     I2C_Write(SSD1306_STREAM, 0xFF);
.................... 
....................   I2C_Stop(SSD1306_STREAM);
.................... 
.................... }
.................... 
.................... #bit trig = porta.0
.................... #bit echo = porta.1
.................... 
.................... 
.................... int8 loop0 = 0;
.................... int16 loop1 = 0;
.................... int mod1 = 1;
.................... 
.................... int8 angle = 15;
.................... 
.................... int test = 0;
.................... 
.................... 
.................... int measure = 0;     //0 : before send signal, 1 : after send signal, 2 : wait for response
.................... int16 responseloop = 0;
.................... int responsedelay = 0;
.................... int distance = 0;    //
.................... 
.................... #int_RTCC             //0.1ms timer interrupt
.................... void rtcc()
.................... {
....................   set_timer0(0x83);
*
0241:  MOVLW  83
0242:  MOVWF  01
....................   if(loop0 == 0)
0243:  MOVF   31,F
0244:  BTFSS  03.2
0245:  GOTO   24E
....................   {
....................    output_e(0x07);
0246:  BSF    03.5
0247:  BCF    09.0
0248:  BCF    09.1
0249:  BCF    09.2
024A:  MOVLW  07
024B:  BCF    03.5
024C:  MOVWF  09
....................   } else if(loop0 == angle)
024D:  GOTO   258
024E:  MOVF   35,W
024F:  SUBWF  31,W
0250:  BTFSS  03.2
0251:  GOTO   258
....................   {
....................    output_e(0);
0252:  BSF    03.5
0253:  BCF    09.0
0254:  BCF    09.1
0255:  BCF    09.2
0256:  BCF    03.5
0257:  CLRF   09
....................   } 
....................   
....................   
....................   if(loop0 < 200)
0258:  MOVF   31,W
0259:  SUBLW  C7
025A:  BTFSS  03.0
025B:  GOTO   25E
....................   {
....................    loop0++;
025C:  INCF   31,F
....................   } else {
025D:  GOTO   25F
....................    loop0 = 0;
025E:  CLRF   31
....................   }
....................   
....................   
....................   
....................   if(loop1 < 5000)
025F:  MOVF   33,W
0260:  SUBLW  13
0261:  BTFSS  03.0
0262:  GOTO   26D
0263:  BTFSS  03.2
0264:  GOTO   269
0265:  MOVF   32,W
0266:  SUBLW  87
0267:  BTFSS  03.0
0268:  GOTO   26D
....................   {
....................    loop1++;
0269:  INCF   32,F
026A:  BTFSC  03.2
026B:  INCF   33,F
....................   } else {
026C:  GOTO   287
....................    if (mod1 == 1 && angle < 20) {
026D:  DECFSZ 34,W
026E:  GOTO   275
026F:  MOVF   35,W
0270:  SUBLW  13
0271:  BTFSS  03.0
0272:  GOTO   275
....................       angle++;
0273:  INCF   35,F
....................    } else if (mod1 == 0 && angle > 10) {
0274:  GOTO   285
0275:  MOVF   34,F
0276:  BTFSS  03.2
0277:  GOTO   27E
0278:  MOVF   35,W
0279:  SUBLW  0A
027A:  BTFSC  03.0
027B:  GOTO   27E
....................       angle--;
027C:  DECF   35,F
....................    } else {
027D:  GOTO   285
....................       if(mod1 == 0)
027E:  MOVF   34,F
027F:  BTFSS  03.2
0280:  GOTO   284
....................       {
....................          mod1 = 1;
0281:  MOVLW  01
0282:  MOVWF  34
....................       } else {
0283:  GOTO   285
....................          mod1 = 0;
0284:  CLRF   34
....................       }
....................    }
....................    loop1 = 0;
0285:  CLRF   33
0286:  CLRF   32
....................   }
.................... }
.................... 
.................... 
0287:  BCF    0B.2
0288:  BCF    0A.3
0289:  BCF    0A.4
028A:  GOTO   031
.................... #int_timer2             //0.01ms timer interrupt
.................... void timer2()
.................... {
....................    if(measure == 0) {
028B:  MOVF   37,F
028C:  BTFSS  03.2
028D:  GOTO   292
....................       trig = 1;
028E:  BSF    05.0
....................       measure = 1;
028F:  MOVLW  01
0290:  MOVWF  37
....................    } else if (measure == 1) {
0291:  GOTO   2A0
0292:  DECFSZ 37,W
0293:  GOTO   299
....................       trig = 0;
0294:  BCF    05.0
....................       measure = 2;
0295:  MOVLW  02
0296:  MOVWF  37
....................       responsedelay = 0;
0297:  CLRF   3A
....................    } else {
0298:  GOTO   2A0
....................       if(echo != 0) {
0299:  BTFSS  05.1
029A:  GOTO   29F
....................          distance = responsedelay;
029B:  MOVF   3A,W
029C:  MOVWF  3B
....................          measure = 0;
029D:  CLRF   37
....................       } else {
029E:  GOTO   2A0
....................          responsedelay++;
029F:  INCF   3A,F
....................       }
....................    }
....................    
....................    
....................    
....................    if(responseloop < 10000)
02A0:  MOVF   39,W
02A1:  SUBLW  27
02A2:  BTFSS  03.0
02A3:  GOTO   2AE
02A4:  BTFSS  03.2
02A5:  GOTO   2AA
02A6:  MOVF   38,W
02A7:  SUBLW  0F
02A8:  BTFSS  03.0
02A9:  GOTO   2AE
....................    {
....................       responseloop++;
02AA:  INCF   38,F
02AB:  BTFSC  03.2
02AC:  INCF   39,F
....................    } else {
02AD:  GOTO   2BF
....................       responseloop = 0;
02AE:  CLRF   39
02AF:  CLRF   38
....................       if(test == 0) {
02B0:  MOVF   36,F
02B1:  BTFSS  03.2
02B2:  GOTO   2BA
....................          output_high(PIN_B0);
02B3:  BSF    03.5
02B4:  BCF    06.0
02B5:  BCF    03.5
02B6:  BSF    06.0
....................          test = 1;
02B7:  MOVLW  01
02B8:  MOVWF  36
....................       } else {
02B9:  GOTO   2BF
....................          output_low(PIN_B0);
02BA:  BSF    03.5
02BB:  BCF    06.0
02BC:  BCF    03.5
02BD:  BCF    06.0
....................          test = 0;
02BE:  CLRF   36
....................       }
....................    }
02BF:  BCF    0C.1
02C0:  BCF    0A.3
02C1:  BCF    0A.4
02C2:  GOTO   031
.................... }
.................... 
.................... void main() {
*
04FD:  MOVF   03,W
04FE:  ANDLW  1F
04FF:  MOVWF  03
0500:  MOVLW  FF
0501:  MOVWF  2B
0502:  BSF    2B.3
0503:  MOVF   2B,W
0504:  BSF    03.5
0505:  MOVWF  07
0506:  BCF    03.5
0507:  BSF    2B.4
0508:  MOVF   2B,W
0509:  BSF    03.5
050A:  MOVWF  07
050B:  MOVLW  0C
050C:  MOVWF  13
050D:  MOVLW  28
050E:  BCF    03.5
050F:  MOVWF  14
0510:  BSF    03.5
0511:  BCF    14.7
0512:  BCF    14.6
0513:  MOVLW  01
0514:  BCF    03.5
0515:  MOVWF  2E
0516:  MOVWF  2F
0517:  BSF    30.0
0518:  CLRF   31
0519:  CLRF   33
051A:  CLRF   32
051B:  MOVWF  34
051C:  MOVLW  0F
051D:  MOVWF  35
051E:  CLRF   36
051F:  CLRF   37
0520:  CLRF   39
0521:  CLRF   38
0522:  CLRF   3A
0523:  CLRF   3B
0524:  CLRF   3D
0525:  CLRF   3C
0526:  BSF    03.5
0527:  BSF    1F.0
0528:  BSF    1F.1
0529:  BSF    1F.2
052A:  BCF    1F.3
052B:  MOVLW  07
052C:  MOVWF  1C
052D:  BCF    03.7
....................   
....................   enable_interrupts(int_RTCC);
052E:  BCF    03.5
052F:  BSF    0B.5
....................   enable_interrupts(int_timer2);
0530:  BSF    03.5
0531:  BSF    0C.1
....................   enable_interrupts(global);
0532:  MOVLW  C0
0533:  BCF    03.5
0534:  IORWF  0B,F
....................   
....................   set_tris_b(0x02);
0535:  MOVLW  02
0536:  BSF    03.5
0537:  MOVWF  06
....................   
....................   set_timer0(0x83);
0538:  MOVLW  83
0539:  BCF    03.5
053A:  MOVWF  01
....................   set_timer2(0xCE);
053B:  MOVLW  CE
053C:  MOVWF  11
....................   setup_timer_0 (RTCC_internal|RTCC_div_4);
053D:  BSF    03.5
053E:  MOVF   01,W
053F:  ANDLW  C0
0540:  IORLW  01
0541:  MOVWF  01
....................   
....................   delay_ms(500);
0542:  MOVLW  02
0543:  BCF    03.5
0544:  MOVWF  3E
0545:  MOVLW  FA
0546:  MOVWF  40
0547:  CALL   2D5
0548:  DECFSZ 3E,F
0549:  GOTO   545
....................   
....................   // Initialize the SSD1306 OLED with an I2C addr = 0x7A (default address)
....................   SSD1306_Init(SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS);
054A:  MOVLW  02
054B:  MOVWF  3E
054C:  MOVLW  7A
054D:  MOVWF  3F
054E:  GOTO   30E
....................   
....................   // clear the display
....................   SSD1306_ClearDisplay();
054F:  CALL   381
.................... 
....................   SSD1306_GotoXY(1, 1);
0550:  MOVLW  01
0551:  MOVWF  3E
0552:  MOVWF  3F
0553:  CALL   3AE
....................   SSD1306_PutC("Minimal Radar Display");
0554:  MOVLW  C3
0555:  BSF    03.6
0556:  MOVWF  0D
0557:  MOVLW  02
0558:  MOVWF  0F
0559:  BCF    03.6
055A:  CALL   470
....................   delay_ms(5000);
055B:  MOVLW  14
055C:  MOVWF  3E
055D:  MOVLW  FA
055E:  MOVWF  40
055F:  CALL   2D5
0560:  DECFSZ 3E,F
0561:  GOTO   55D
....................   
....................   
....................   SSD1306_ClearDisplay();
0562:  CALL   381
.................... 
....................   SSD1306_GotoXY(6, 2);
0563:  MOVLW  06
0564:  MOVWF  3E
0565:  MOVLW  02
0566:  MOVWF  3F
0567:  CALL   3AE
....................   SSD1306_PutC("Hello world!");
0568:  MOVLW  CE
0569:  BSF    03.6
056A:  MOVWF  0D
056B:  MOVLW  02
056C:  MOVWF  0F
056D:  BCF    03.6
056E:  CALL   470
....................   delay_ms(2000);
056F:  MOVLW  08
0570:  MOVWF  3E
0571:  MOVLW  FA
0572:  MOVWF  40
0573:  CALL   2D5
0574:  DECFSZ 3E,F
0575:  GOTO   571
.................... 
....................   while(TRUE) {
....................     SSD1306_GotoXY(10, 5);
0576:  MOVLW  0A
0577:  MOVWF  3E
0578:  MOVLW  05
0579:  MOVWF  3F
057A:  CALL   3AE
....................     printf(SSD1306_PutC, "%03u", responsedelay);
057B:  MOVF   3A,W
057C:  MOVWF  3E
057D:  MOVLW  03
057E:  MOVWF  3F
057F:  GOTO   4C6
0580:  GOTO   576
.................... 
....................   }
.................... 
.................... }
.................... // End of code
0581:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
