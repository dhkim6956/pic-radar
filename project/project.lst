CCS PCM C Compiler, Version 5.105Pd, 1               29-11-21 17:08
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\dhkim\Documents\GitHub\pic16f877a_SSD1306_i2c_radar_project\project\project.lst

               ROM used:   4513 words (55%)
                           Largest free fragment is 2048
               RAM used:   114 (31%) at main() level
                           188 (51%) worst case
               Stack used: 5 locations (4 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  10
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   238
.................... #include <project.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
004F:  BCF    0A.0
0050:  BCF    0A.1
0051:  BCF    0A.2
0052:  ADDLW  56
0053:  BTFSC  03.0
0054:  INCF   0A,F
0055:  MOVWF  02
0056:  RETLW  00
0057:  RETLW  00
0058:  RETLW  00
0059:  RETLW  00
005A:  RETLW  00
005B:  RETLW  00
005C:  RETLW  00
005D:  RETLW  5F
005E:  RETLW  00
005F:  RETLW  00
0060:  RETLW  00
0061:  RETLW  07
0062:  RETLW  00
0063:  RETLW  07
0064:  RETLW  00
0065:  RETLW  14
0066:  RETLW  7F
0067:  RETLW  14
0068:  RETLW  7F
0069:  RETLW  14
006A:  RETLW  24
006B:  RETLW  2A
006C:  RETLW  7F
006D:  RETLW  2A
006E:  RETLW  12
006F:  RETLW  23
0070:  RETLW  13
0071:  RETLW  08
0072:  RETLW  64
0073:  RETLW  62
0074:  RETLW  36
0075:  RETLW  49
0076:  RETLW  56
0077:  RETLW  20
0078:  RETLW  50
0079:  RETLW  00
007A:  RETLW  08
007B:  RETLW  07
007C:  RETLW  03
007D:  RETLW  00
007E:  RETLW  00
007F:  RETLW  1C
0080:  RETLW  22
0081:  RETLW  41
0082:  RETLW  00
0083:  RETLW  00
0084:  RETLW  41
0085:  RETLW  22
0086:  RETLW  1C
0087:  RETLW  00
0088:  RETLW  2A
0089:  RETLW  1C
008A:  RETLW  7F
008B:  RETLW  1C
008C:  RETLW  2A
008D:  RETLW  08
008E:  RETLW  08
008F:  RETLW  3E
0090:  RETLW  08
0091:  RETLW  08
0092:  RETLW  00
0093:  RETLW  80
0094:  RETLW  70
0095:  RETLW  30
0096:  RETLW  00
0097:  RETLW  08
0098:  RETLW  08
0099:  RETLW  08
009A:  RETLW  08
009B:  RETLW  08
009C:  RETLW  00
009D:  RETLW  00
009E:  RETLW  60
009F:  RETLW  60
00A0:  RETLW  00
00A1:  RETLW  20
00A2:  RETLW  10
00A3:  RETLW  08
00A4:  RETLW  04
00A5:  RETLW  02
00A6:  RETLW  3E
00A7:  RETLW  51
00A8:  RETLW  49
00A9:  RETLW  45
00AA:  RETLW  3E
00AB:  RETLW  00
00AC:  RETLW  42
00AD:  RETLW  7F
00AE:  RETLW  40
00AF:  RETLW  00
00B0:  RETLW  72
00B1:  RETLW  49
00B2:  RETLW  49
00B3:  RETLW  49
00B4:  RETLW  46
00B5:  RETLW  21
00B6:  RETLW  41
00B7:  RETLW  49
00B8:  RETLW  4D
00B9:  RETLW  33
00BA:  RETLW  18
00BB:  RETLW  14
00BC:  RETLW  12
00BD:  RETLW  7F
00BE:  RETLW  10
00BF:  RETLW  27
00C0:  RETLW  45
00C1:  RETLW  45
00C2:  RETLW  45
00C3:  RETLW  39
00C4:  RETLW  3C
00C5:  RETLW  4A
00C6:  RETLW  49
00C7:  RETLW  49
00C8:  RETLW  31
00C9:  RETLW  41
00CA:  RETLW  21
00CB:  RETLW  11
00CC:  RETLW  09
00CD:  RETLW  07
00CE:  RETLW  36
00CF:  RETLW  49
00D0:  RETLW  49
00D1:  RETLW  49
00D2:  RETLW  36
00D3:  RETLW  46
00D4:  RETLW  49
00D5:  RETLW  49
00D6:  RETLW  29
00D7:  RETLW  1E
00D8:  RETLW  00
00D9:  RETLW  00
00DA:  RETLW  14
00DB:  RETLW  00
00DC:  RETLW  00
00DD:  RETLW  00
00DE:  RETLW  40
00DF:  RETLW  34
00E0:  RETLW  00
00E1:  RETLW  00
00E2:  RETLW  00
00E3:  RETLW  08
00E4:  RETLW  14
00E5:  RETLW  22
00E6:  RETLW  41
00E7:  RETLW  14
00E8:  RETLW  14
00E9:  RETLW  14
00EA:  RETLW  14
00EB:  RETLW  14
00EC:  RETLW  00
00ED:  RETLW  41
00EE:  RETLW  22
00EF:  RETLW  14
00F0:  RETLW  08
00F1:  RETLW  02
00F2:  RETLW  01
00F3:  RETLW  59
00F4:  RETLW  09
00F5:  RETLW  06
00F6:  RETLW  3E
00F7:  RETLW  41
00F8:  RETLW  5D
00F9:  RETLW  59
00FA:  RETLW  4E
00FB:  RETLW  7C
00FC:  RETLW  12
00FD:  RETLW  11
00FE:  RETLW  12
00FF:  RETLW  7C
0100:  RETLW  7F
0101:  RETLW  49
0102:  RETLW  49
0103:  RETLW  49
0104:  RETLW  36
0105:  RETLW  3E
0106:  RETLW  41
0107:  RETLW  41
0108:  RETLW  41
0109:  RETLW  22
010A:  RETLW  7F
010B:  RETLW  41
010C:  RETLW  41
010D:  RETLW  41
010E:  RETLW  3E
010F:  RETLW  7F
0110:  RETLW  49
0111:  RETLW  49
0112:  RETLW  49
0113:  RETLW  41
0114:  RETLW  7F
0115:  RETLW  09
0116:  RETLW  09
0117:  RETLW  09
0118:  RETLW  01
0119:  RETLW  3E
011A:  RETLW  41
011B:  RETLW  41
011C:  RETLW  51
011D:  RETLW  73
011E:  RETLW  7F
011F:  RETLW  08
0120:  RETLW  08
0121:  RETLW  08
0122:  RETLW  7F
0123:  RETLW  00
0124:  RETLW  41
0125:  RETLW  7F
0126:  RETLW  41
0127:  RETLW  00
0128:  RETLW  20
0129:  RETLW  40
012A:  RETLW  41
012B:  RETLW  3F
012C:  RETLW  01
012D:  RETLW  7F
012E:  RETLW  08
012F:  RETLW  14
0130:  RETLW  22
0131:  RETLW  41
0132:  RETLW  7F
0133:  RETLW  40
0134:  RETLW  40
0135:  RETLW  40
0136:  RETLW  40
0137:  RETLW  7F
0138:  RETLW  02
0139:  RETLW  1C
013A:  RETLW  02
013B:  RETLW  7F
013C:  RETLW  7F
013D:  RETLW  04
013E:  RETLW  08
013F:  RETLW  10
0140:  RETLW  7F
0141:  RETLW  3E
0142:  RETLW  41
0143:  RETLW  41
0144:  RETLW  41
0145:  RETLW  3E
0146:  RETLW  7F
0147:  RETLW  09
0148:  RETLW  09
0149:  RETLW  09
014A:  RETLW  06
014B:  RETLW  3E
014C:  RETLW  41
014D:  RETLW  51
014E:  RETLW  21
014F:  RETLW  5E
0150:  RETLW  7F
0151:  RETLW  09
0152:  RETLW  19
0153:  RETLW  29
0154:  RETLW  46
0155:  BSF    0A.0
0156:  BCF    0A.1
0157:  BCF    0A.2
0158:  ADDLW  5C
0159:  BTFSC  03.0
015A:  INCF   0A,F
015B:  MOVWF  02
015C:  RETLW  26
015D:  RETLW  49
015E:  RETLW  49
015F:  RETLW  49
0160:  RETLW  32
0161:  RETLW  03
0162:  RETLW  01
0163:  RETLW  7F
0164:  RETLW  01
0165:  RETLW  03
0166:  RETLW  3F
0167:  RETLW  40
0168:  RETLW  40
0169:  RETLW  40
016A:  RETLW  3F
016B:  RETLW  1F
016C:  RETLW  20
016D:  RETLW  40
016E:  RETLW  20
016F:  RETLW  1F
0170:  RETLW  3F
0171:  RETLW  40
0172:  RETLW  38
0173:  RETLW  40
0174:  RETLW  3F
0175:  RETLW  63
0176:  RETLW  14
0177:  RETLW  08
0178:  RETLW  14
0179:  RETLW  63
017A:  RETLW  03
017B:  RETLW  04
017C:  RETLW  78
017D:  RETLW  04
017E:  RETLW  03
017F:  RETLW  61
0180:  RETLW  59
0181:  RETLW  49
0182:  RETLW  4D
0183:  RETLW  43
0184:  RETLW  00
0185:  RETLW  7F
0186:  RETLW  41
0187:  RETLW  41
0188:  RETLW  41
0189:  RETLW  02
018A:  RETLW  04
018B:  RETLW  08
018C:  RETLW  10
018D:  RETLW  20
018E:  RETLW  00
018F:  RETLW  41
0190:  RETLW  41
0191:  RETLW  41
0192:  RETLW  7F
0193:  RETLW  04
0194:  RETLW  02
0195:  RETLW  01
0196:  RETLW  02
0197:  RETLW  04
0198:  RETLW  40
0199:  RETLW  40
019A:  RETLW  40
019B:  RETLW  40
019C:  RETLW  40
019D:  RETLW  00
019E:  RETLW  03
019F:  RETLW  07
01A0:  RETLW  08
01A1:  RETLW  00
01A2:  RETLW  20
01A3:  RETLW  54
01A4:  RETLW  54
01A5:  RETLW  78
01A6:  RETLW  40
01A7:  RETLW  7F
01A8:  RETLW  28
01A9:  RETLW  44
01AA:  RETLW  44
01AB:  RETLW  38
01AC:  RETLW  38
01AD:  RETLW  44
01AE:  RETLW  44
01AF:  RETLW  44
01B0:  RETLW  28
01B1:  RETLW  38
01B2:  RETLW  44
01B3:  RETLW  44
01B4:  RETLW  28
01B5:  RETLW  7F
01B6:  RETLW  38
01B7:  RETLW  54
01B8:  RETLW  54
01B9:  RETLW  54
01BA:  RETLW  18
01BB:  RETLW  00
01BC:  RETLW  08
01BD:  RETLW  7E
01BE:  RETLW  09
01BF:  RETLW  02
01C0:  RETLW  18
01C1:  RETLW  A4
01C2:  RETLW  A4
01C3:  RETLW  9C
01C4:  RETLW  78
01C5:  RETLW  7F
01C6:  RETLW  08
01C7:  RETLW  04
01C8:  RETLW  04
01C9:  RETLW  78
01CA:  RETLW  00
01CB:  RETLW  44
01CC:  RETLW  7D
01CD:  RETLW  40
01CE:  RETLW  00
01CF:  RETLW  20
01D0:  RETLW  40
01D1:  RETLW  40
01D2:  RETLW  3D
01D3:  RETLW  00
01D4:  RETLW  7F
01D5:  RETLW  10
01D6:  RETLW  28
01D7:  RETLW  44
01D8:  RETLW  00
01D9:  RETLW  00
01DA:  RETLW  41
01DB:  RETLW  7F
01DC:  RETLW  40
01DD:  RETLW  00
01DE:  RETLW  7C
01DF:  RETLW  04
01E0:  RETLW  78
01E1:  RETLW  04
01E2:  RETLW  78
01E3:  RETLW  7C
01E4:  RETLW  08
01E5:  RETLW  04
01E6:  RETLW  04
01E7:  RETLW  78
01E8:  RETLW  38
01E9:  RETLW  44
01EA:  RETLW  44
01EB:  RETLW  44
01EC:  RETLW  38
01ED:  RETLW  FC
01EE:  RETLW  18
01EF:  RETLW  24
01F0:  RETLW  24
01F1:  RETLW  18
01F2:  RETLW  18
01F3:  RETLW  24
01F4:  RETLW  24
01F5:  RETLW  18
01F6:  RETLW  FC
01F7:  RETLW  7C
01F8:  RETLW  08
01F9:  RETLW  04
01FA:  RETLW  04
01FB:  RETLW  08
01FC:  RETLW  48
01FD:  RETLW  54
01FE:  RETLW  54
01FF:  RETLW  54
0200:  RETLW  24
0201:  RETLW  04
0202:  RETLW  04
0203:  RETLW  3F
0204:  RETLW  44
0205:  RETLW  24
0206:  RETLW  3C
0207:  RETLW  40
0208:  RETLW  40
0209:  RETLW  20
020A:  RETLW  7C
020B:  RETLW  1C
020C:  RETLW  20
020D:  RETLW  40
020E:  RETLW  20
020F:  RETLW  1C
0210:  RETLW  3C
0211:  RETLW  40
0212:  RETLW  30
0213:  RETLW  40
0214:  RETLW  3C
0215:  RETLW  44
0216:  RETLW  28
0217:  RETLW  10
0218:  RETLW  28
0219:  RETLW  44
021A:  RETLW  4C
021B:  RETLW  90
021C:  RETLW  90
021D:  RETLW  90
021E:  RETLW  7C
021F:  RETLW  44
0220:  RETLW  64
0221:  RETLW  54
0222:  RETLW  4C
0223:  RETLW  44
0224:  RETLW  00
0225:  RETLW  08
0226:  RETLW  36
0227:  RETLW  41
0228:  RETLW  00
0229:  RETLW  00
022A:  RETLW  00
022B:  RETLW  77
022C:  RETLW  00
022D:  RETLW  00
022E:  RETLW  00
022F:  RETLW  41
0230:  RETLW  36
0231:  RETLW  08
0232:  RETLW  00
0233:  RETLW  02
0234:  RETLW  01
0235:  RETLW  02
0236:  RETLW  04
0237:  RETLW  02
*
0295:  DATA CD,34
0296:  DATA EE,34
0297:  DATA ED,30
0298:  DATA 6C,10
0299:  DATA D2,30
029A:  DATA E4,30
029B:  DATA 72,10
029C:  DATA C4,34
029D:  DATA 73,38
029E:  DATA EC,30
029F:  DATA 79,00
02A0:  DATA A8,31
02A1:  DATA ED,14
02A2:  DATA 00,00
*
0395:  BSF    03.5
0396:  MOVF   31,W
0397:  ANDLW  07
0398:  MOVWF  77
0399:  RRF    31,W
039A:  MOVWF  78
039B:  RRF    78,F
039C:  RRF    78,F
039D:  MOVLW  1F
039E:  ANDWF  78,F
039F:  MOVF   78,W
03A0:  ADDWF  33,W
03A1:  MOVWF  04
03A2:  BCF    03.7
03A3:  BTFSC  34.0
03A4:  BSF    03.7
03A5:  CLRF   78
03A6:  INCF   78,F
03A7:  INCF   77,F
03A8:  GOTO   3AA
03A9:  RLF    78,F
03AA:  DECFSZ 77,F
03AB:  GOTO   3A9
03AC:  MOVF   32,F
03AD:  BTFSC  03.2
03AE:  GOTO   3B2
03AF:  MOVF   78,W
03B0:  IORWF  00,F
03B1:  GOTO   3B5
03B2:  COMF   78,F
03B3:  MOVF   78,W
03B4:  ANDWF  00,F
03B5:  BCF    03.5
03B6:  RETURN
*
04A0:  CLRF   77
04A1:  CLRF   78
04A2:  BSF    03.5
04A3:  MOVF   36,W
04A4:  BCF    03.0
04A5:  BTFSC  37.0
04A6:  ADDWF  77,F
04A7:  RRF    77,F
04A8:  RRF    78,F
04A9:  BTFSC  37.1
04AA:  ADDWF  77,F
04AB:  RRF    77,F
04AC:  RRF    78,F
04AD:  BTFSC  37.2
04AE:  ADDWF  77,F
04AF:  RRF    77,F
04B0:  RRF    78,F
04B1:  BTFSC  37.3
04B2:  ADDWF  77,F
04B3:  RRF    77,F
04B4:  RRF    78,F
04B5:  BTFSC  37.4
04B6:  ADDWF  77,F
04B7:  RRF    77,F
04B8:  RRF    78,F
04B9:  BTFSC  37.5
04BA:  ADDWF  77,F
04BB:  RRF    77,F
04BC:  RRF    78,F
04BD:  BTFSC  37.6
04BE:  ADDWF  77,F
04BF:  RRF    77,F
04C0:  RRF    78,F
04C1:  BTFSC  37.7
04C2:  ADDWF  77,F
04C3:  RRF    77,F
04C4:  RRF    78,F
04C5:  BCF    03.5
04C6:  RETURN
04C7:  BSF    03.5
04C8:  MOVF   35,W
04C9:  CLRF   78
04CA:  SUBWF  34,W
04CB:  BTFSC  03.0
04CC:  GOTO   4D0
04CD:  MOVF   34,W
04CE:  MOVWF  77
04CF:  GOTO   4DC
04D0:  CLRF   77
04D1:  MOVLW  08
04D2:  MOVWF  36
04D3:  RLF    34,F
04D4:  RLF    77,F
04D5:  MOVF   35,W
04D6:  SUBWF  77,W
04D7:  BTFSC  03.0
04D8:  MOVWF  77
04D9:  RLF    78,F
04DA:  DECFSZ 36,F
04DB:  GOTO   4D3
04DC:  BCF    03.5
04DD:  RETURN
*
0579:  MOVF   0B,W
057A:  BSF    03.5
057B:  MOVWF  2E
057C:  BCF    03.5
057D:  BCF    0B.7
057E:  BSF    03.5
057F:  BSF    03.6
0580:  BSF    0C.7
0581:  BSF    0C.0
0582:  NOP
0583:  NOP
0584:  BCF    03.6
0585:  BTFSS  2E.7
0586:  GOTO   58A
0587:  BCF    03.5
0588:  BSF    0B.7
0589:  BSF    03.5
058A:  BCF    03.5
058B:  BSF    03.6
058C:  MOVF   0C,W
058D:  ANDLW  7F
058E:  BTFSC  03.2
058F:  GOTO   5EB
0590:  BSF    03.5
0591:  BCF    03.6
0592:  MOVWF  2E
0593:  BCF    03.5
0594:  BSF    03.6
0595:  MOVF   0D,W
0596:  BSF    03.5
0597:  BCF    03.6
0598:  MOVWF  2F
0599:  BCF    03.5
059A:  BSF    03.6
059B:  MOVF   0F,W
059C:  BSF    03.5
059D:  BCF    03.6
059E:  MOVWF  30
059F:  MOVF   2E,W
05A0:  MOVWF  31
05A1:  BCF    03.5
05A2:  CALL   4DE
05A3:  BSF    03.5
05A4:  MOVF   2F,W
05A5:  BCF    03.5
05A6:  BSF    03.6
05A7:  MOVWF  0D
05A8:  BSF    03.5
05A9:  BCF    03.6
05AA:  MOVF   30,W
05AB:  BCF    03.5
05AC:  BSF    03.6
05AD:  MOVWF  0F
05AE:  BCF    03.6
05AF:  MOVF   0B,W
05B0:  BSF    03.5
05B1:  MOVWF  31
05B2:  BCF    03.5
05B3:  BCF    0B.7
05B4:  BSF    03.5
05B5:  BSF    03.6
05B6:  BSF    0C.7
05B7:  BSF    0C.0
05B8:  NOP
05B9:  NOP
05BA:  BCF    03.6
05BB:  BTFSS  31.7
05BC:  GOTO   5C0
05BD:  BCF    03.5
05BE:  BSF    0B.7
05BF:  BSF    03.5
05C0:  BCF    03.5
05C1:  BSF    03.6
05C2:  RLF    0C,W
05C3:  RLF    0E,W
05C4:  ANDLW  7F
05C5:  BTFSC  03.2
05C6:  GOTO   5EB
05C7:  BSF    03.5
05C8:  BCF    03.6
05C9:  MOVWF  2E
05CA:  BCF    03.5
05CB:  BSF    03.6
05CC:  MOVF   0D,W
05CD:  BSF    03.5
05CE:  BCF    03.6
05CF:  MOVWF  2F
05D0:  BCF    03.5
05D1:  BSF    03.6
05D2:  MOVF   0F,W
05D3:  BSF    03.5
05D4:  BCF    03.6
05D5:  MOVWF  30
05D6:  MOVF   2E,W
05D7:  MOVWF  31
05D8:  BCF    03.5
05D9:  CALL   4DE
05DA:  BSF    03.5
05DB:  MOVF   2F,W
05DC:  BCF    03.5
05DD:  BSF    03.6
05DE:  MOVWF  0D
05DF:  BSF    03.5
05E0:  BCF    03.6
05E1:  MOVF   30,W
05E2:  BCF    03.5
05E3:  BSF    03.6
05E4:  MOVWF  0F
05E5:  INCF   0D,F
05E6:  BTFSC  03.2
05E7:  INCF   0F,F
05E8:  BCF    03.6
05E9:  GOTO   579
05EA:  BSF    03.6
05EB:  BCF    03.6
05EC:  RETURN
05ED:  MOVLW  10
05EE:  BSF    03.5
05EF:  MOVWF  32
05F0:  CLRF   77
05F1:  CLRF   7A
05F2:  RRF    2F,F
05F3:  RRF    2E,F
05F4:  BTFSS  03.0
05F5:  GOTO   5FC
05F6:  MOVF   30,W
05F7:  ADDWF  77,F
05F8:  BTFSC  03.0
05F9:  INCF   7A,F
05FA:  MOVF   31,W
05FB:  ADDWF  7A,F
05FC:  RRF    7A,F
05FD:  RRF    77,F
05FE:  RRF    79,F
05FF:  RRF    78,F
0600:  DECFSZ 32,F
0601:  GOTO   5F2
0602:  BCF    03.5
0603:  BCF    0A.3
0604:  BSF    0A.4
0605:  GOTO   0F6 (RETURN)
0606:  CLRF   78
0607:  CLRF   79
0608:  CLRF   77
0609:  CLRF   7A
060A:  BSF    03.5
060B:  MOVF   33,W
060C:  BTFSS  03.2
060D:  GOTO   611
060E:  MOVF   32,W
060F:  BTFSC  03.2
0610:  GOTO   62B
0611:  MOVLW  10
0612:  MOVWF  34
0613:  BCF    03.0
0614:  RLF    30,F
0615:  RLF    31,F
0616:  RLF    77,F
0617:  RLF    7A,F
0618:  MOVF   33,W
0619:  SUBWF  7A,W
061A:  BTFSS  03.2
061B:  GOTO   61E
061C:  MOVF   32,W
061D:  SUBWF  77,W
061E:  BTFSS  03.0
061F:  GOTO   627
0620:  MOVF   32,W
0621:  SUBWF  77,F
0622:  BTFSS  03.0
0623:  DECF   7A,F
0624:  MOVF   33,W
0625:  SUBWF  7A,F
0626:  BSF    03.0
0627:  RLF    78,F
0628:  RLF    79,F
0629:  DECFSZ 34,F
062A:  GOTO   613
062B:  BCF    03.5
062C:  BCF    0A.3
062D:  BSF    0A.4
062E:  GOTO   106 (RETURN)
062F:  MOVLW  8E
0630:  MOVWF  77
0631:  BSF    03.5
0632:  MOVF   2F,W
0633:  MOVWF  78
0634:  MOVF   2E,W
0635:  MOVWF  79
0636:  CLRF   7A
0637:  BTFSS  2F.7
0638:  GOTO   63E
0639:  COMF   78,F
063A:  COMF   79,F
063B:  INCF   79,F
063C:  BTFSC  03.2
063D:  INCF   78,F
063E:  MOVF   78,F
063F:  BTFSS  03.2
0640:  GOTO   64B
0641:  MOVF   79,W
0642:  MOVWF  78
0643:  CLRF   79
0644:  MOVLW  08
0645:  SUBWF  77,F
0646:  MOVF   78,F
0647:  BTFSS  03.2
0648:  GOTO   64B
0649:  CLRF   77
064A:  GOTO   654
064B:  BCF    03.0
064C:  BTFSC  78.7
064D:  GOTO   652
064E:  RLF    79,F
064F:  RLF    78,F
0650:  DECF   77,F
0651:  GOTO   64B
0652:  BTFSS  2F.7
0653:  BCF    78.7
0654:  BCF    03.5
0655:  BCF    0A.3
0656:  BSF    0A.4
0657:  GOTO   135 (RETURN)
0658:  BSF    03.5
0659:  MOVF   64,W
065A:  BTFSC  03.2
065B:  GOTO   709
065C:  BCF    03.5
065D:  BSF    03.6
065E:  MOVWF  10
065F:  BSF    03.5
0660:  BCF    03.6
0661:  MOVF   68,W
0662:  BTFSC  03.2
0663:  GOTO   709
0664:  BCF    03.5
0665:  BSF    03.6
0666:  ADDWF  10,F
0667:  BTFSC  03.0
0668:  GOTO   676
0669:  MOVLW  7F
066A:  SUBWF  10,F
066B:  BTFSC  03.0
066C:  GOTO   670
066D:  BSF    03.5
066E:  BCF    03.6
066F:  GOTO   709
0670:  BTFSS  03.2
0671:  GOTO   675
0672:  BSF    03.5
0673:  BCF    03.6
0674:  GOTO   709
0675:  GOTO   67D
0676:  MOVLW  81
0677:  ADDWF  10,F
0678:  BTFSS  03.0
0679:  GOTO   67D
067A:  BSF    03.5
067B:  BCF    03.6
067C:  GOTO   709
067D:  MOVF   10,W
067E:  MOVWF  77
067F:  CLRF   78
0680:  CLRF   79
0681:  CLRF   7A
0682:  BSF    03.5
0683:  BCF    03.6
0684:  MOVF   65,W
0685:  BCF    03.5
0686:  BSF    03.6
0687:  MOVWF  14
0688:  BSF    14.7
0689:  BSF    03.5
068A:  BCF    03.6
068B:  MOVF   66,W
068C:  BCF    03.5
068D:  BSF    03.6
068E:  MOVWF  13
068F:  BSF    03.5
0690:  BCF    03.6
0691:  MOVF   67,W
0692:  BCF    03.5
0693:  BSF    03.6
0694:  MOVWF  12
0695:  MOVLW  18
0696:  MOVWF  10
0697:  CLRF   11
0698:  BTFSS  12.0
0699:  GOTO   6C5
069A:  BSF    03.5
069B:  BCF    03.6
069C:  MOVF   6B,W
069D:  ADDWF  7A,F
069E:  BTFSS  03.0
069F:  GOTO   6AB
06A0:  INCF   79,F
06A1:  BTFSS  03.2
06A2:  GOTO   6AB
06A3:  INCF   78,F
06A4:  BTFSS  03.2
06A5:  GOTO   6AB
06A6:  BCF    03.5
06A7:  BSF    03.6
06A8:  BSF    11.7
06A9:  BSF    03.5
06AA:  BCF    03.6
06AB:  MOVF   6A,W
06AC:  ADDWF  79,F
06AD:  BTFSS  03.0
06AE:  GOTO   6B7
06AF:  INCF   78,F
06B0:  BTFSS  03.2
06B1:  GOTO   6B7
06B2:  BCF    03.5
06B3:  BSF    03.6
06B4:  BSF    11.7
06B5:  BSF    03.5
06B6:  BCF    03.6
06B7:  MOVF   69,W
06B8:  MOVWF  66
06B9:  BSF    66.7
06BA:  MOVF   66,W
06BB:  ADDWF  78,F
06BC:  BTFSS  03.0
06BD:  GOTO   6C3
06BE:  BCF    03.5
06BF:  BSF    03.6
06C0:  BSF    11.7
06C1:  BSF    03.5
06C2:  BCF    03.6
06C3:  BCF    03.5
06C4:  BSF    03.6
06C5:  RLF    11,F
06C6:  RRF    78,F
06C7:  RRF    79,F
06C8:  RRF    7A,F
06C9:  RRF    14,F
06CA:  RRF    13,F
06CB:  RRF    12,F
06CC:  BCF    03.0
06CD:  DECFSZ 10,F
06CE:  GOTO   697
06CF:  MOVLW  01
06D0:  ADDWF  77,F
06D1:  BTFSS  03.0
06D2:  GOTO   6D6
06D3:  BSF    03.5
06D4:  BCF    03.6
06D5:  GOTO   709
06D6:  BTFSC  78.7
06D7:  GOTO   6E1
06D8:  RLF    14,F
06D9:  RLF    7A,F
06DA:  RLF    79,F
06DB:  RLF    78,F
06DC:  DECFSZ 77,F
06DD:  GOTO   6E1
06DE:  BSF    03.5
06DF:  BCF    03.6
06E0:  GOTO   709
06E1:  BTFSS  14.7
06E2:  GOTO   6F5
06E3:  INCF   7A,F
06E4:  BTFSS  03.2
06E5:  GOTO   6F5
06E6:  INCF   79,F
06E7:  BTFSS  03.2
06E8:  GOTO   6F5
06E9:  INCF   78,F
06EA:  BTFSS  03.2
06EB:  GOTO   6F5
06EC:  RRF    78,F
06ED:  RRF    79,F
06EE:  RRF    7A,F
06EF:  INCF   77,F
06F0:  BTFSS  03.2
06F1:  GOTO   6F5
06F2:  BSF    03.5
06F3:  BCF    03.6
06F4:  GOTO   709
06F5:  BSF    03.5
06F6:  BCF    03.6
06F7:  MOVF   65,W
06F8:  BCF    03.5
06F9:  BSF    03.6
06FA:  MOVWF  11
06FB:  BSF    03.5
06FC:  BCF    03.6
06FD:  MOVF   69,W
06FE:  BCF    03.5
06FF:  BSF    03.6
0700:  XORWF  11,F
0701:  BTFSS  11.7
0702:  GOTO   705
0703:  BSF    78.7
0704:  GOTO   70F
0705:  BCF    78.7
0706:  GOTO   70F
0707:  BSF    03.5
0708:  BCF    03.6
0709:  CLRF   77
070A:  CLRF   78
070B:  CLRF   79
070C:  CLRF   7A
070D:  BCF    03.5
070E:  BSF    03.6
070F:  BCF    03.6
0710:  RETURN
0711:  MOVLW  8E
0712:  MOVWF  77
0713:  BSF    03.5
0714:  MOVF   60,W
0715:  SUBWF  77,F
0716:  MOVF   61,W
0717:  MOVWF  79
0718:  MOVF   62,W
0719:  MOVWF  78
071A:  BSF    79.7
071B:  MOVF   77,F
071C:  BTFSC  03.2
071D:  GOTO   729
071E:  BCF    03.0
071F:  MOVF   79,F
0720:  BTFSS  03.2
0721:  GOTO   725
0722:  MOVF   78,F
0723:  BTFSC  03.2
0724:  GOTO   729
0725:  RRF    79,F
0726:  RRF    78,F
0727:  DECFSZ 77,F
0728:  GOTO   71E
0729:  BTFSS  61.7
072A:  GOTO   730
072B:  COMF   78,F
072C:  COMF   79,F
072D:  INCF   78,F
072E:  BTFSC  03.2
072F:  INCF   79,F
0730:  BCF    03.5
0731:  RETURN
0732:  MOVLW  8E
0733:  MOVWF  77
0734:  BSF    03.5
0735:  MOVF   65,W
0736:  MOVWF  78
0737:  MOVF   64,W
0738:  MOVWF  79
0739:  CLRF   7A
073A:  MOVF   78,F
073B:  BTFSS  03.2
073C:  GOTO   747
073D:  MOVF   79,W
073E:  MOVWF  78
073F:  CLRF   79
0740:  MOVLW  08
0741:  SUBWF  77,F
0742:  MOVF   78,F
0743:  BTFSS  03.2
0744:  GOTO   747
0745:  CLRF   77
0746:  GOTO   74F
0747:  BCF    03.0
0748:  BTFSC  78.7
0749:  GOTO   74E
074A:  RLF    79,F
074B:  RLF    78,F
074C:  DECF   77,F
074D:  GOTO   747
074E:  BCF    78.7
074F:  BCF    03.5
0750:  RETURN
*
077F:  MOVF   78,W
0780:  BSF    03.5
0781:  MOVF   2E,W
0782:  MOVWF  34
0783:  MOVLW  64
0784:  MOVWF  35
0785:  BCF    03.5
0786:  CALL   4C7
0787:  MOVF   77,W
0788:  BSF    03.5
0789:  MOVWF  2E
078A:  MOVF   78,W
078B:  MOVLW  30
078C:  BTFSS  03.2
078D:  GOTO   795
078E:  BTFSS  2F.1
078F:  GOTO   79E
0790:  BTFSC  2F.3
0791:  GOTO   79E
0792:  BTFSC  2F.4
0793:  MOVLW  20
0794:  GOTO   798
0795:  BCF    2F.3
0796:  BCF    2F.4
0797:  BSF    2F.0
0798:  ADDWF  78,F
0799:  MOVF   78,W
079A:  MOVWF  31
079B:  BCF    03.5
079C:  CALL   4DE
079D:  BSF    03.5
079E:  MOVF   2E,W
079F:  MOVWF  34
07A0:  MOVLW  0A
07A1:  MOVWF  35
07A2:  BCF    03.5
07A3:  CALL   4C7
07A4:  MOVF   77,W
07A5:  BSF    03.5
07A6:  MOVWF  2E
07A7:  MOVF   78,W
07A8:  MOVLW  30
07A9:  BTFSS  03.2
07AA:  GOTO   7B1
07AB:  BTFSC  2F.3
07AC:  GOTO   7B7
07AD:  BTFSS  2F.0
07AE:  GOTO   7B7
07AF:  BTFSC  2F.4
07B0:  MOVLW  20
07B1:  ADDWF  78,F
07B2:  MOVF   78,W
07B3:  MOVWF  31
07B4:  BCF    03.5
07B5:  CALL   4DE
07B6:  BSF    03.5
07B7:  MOVLW  30
07B8:  ADDWF  2E,F
07B9:  MOVF   2E,W
07BA:  MOVWF  31
07BB:  BCF    03.5
07BC:  CALL   4DE
07BD:  BCF    0A.3
07BE:  BSF    0A.4
07BF:  GOTO   22B (RETURN)
07C0:  BSF    03.5
07C1:  MOVF   36,W
07C2:  ANDLW  07
07C3:  MOVWF  77
07C4:  RRF    36,W
07C5:  MOVWF  78
07C6:  RRF    78,F
07C7:  RRF    78,F
07C8:  MOVLW  1F
07C9:  ANDWF  78,F
07CA:  MOVF   78,W
07CB:  ADDWF  37,W
07CC:  MOVWF  04
07CD:  BCF    03.7
07CE:  BTFSC  38.0
07CF:  BSF    03.7
07D0:  MOVF   00,W
07D1:  MOVWF  78
07D2:  INCF   77,F
07D3:  GOTO   7D5
07D4:  RRF    78,F
07D5:  DECFSZ 77,F
07D6:  GOTO   7D4
07D7:  MOVLW  01
07D8:  ANDWF  78,F
07D9:  BCF    03.5
07DA:  RETURN
*
0800:  MOVLW  80
0801:  BTFSS  03.1
0802:  GOTO   006
0803:  BSF    03.5
0804:  XORWF  69,F
0805:  BCF    03.5
0806:  BSF    03.6
0807:  CLRF   12
0808:  CLRF   13
0809:  BSF    03.5
080A:  BCF    03.6
080B:  MOVF   65,W
080C:  BCF    03.5
080D:  BSF    03.6
080E:  MOVWF  11
080F:  BSF    03.5
0810:  BCF    03.6
0811:  MOVF   69,W
0812:  BCF    03.5
0813:  BSF    03.6
0814:  XORWF  11,F
0815:  BSF    03.5
0816:  BCF    03.6
0817:  MOVF   64,W
0818:  BTFSC  03.2
0819:  GOTO   147
081A:  BCF    03.5
081B:  BSF    03.6
081C:  MOVWF  10
081D:  MOVWF  77
081E:  BSF    03.5
081F:  BCF    03.6
0820:  MOVF   68,W
0821:  BTFSC  03.2
0822:  GOTO   15C
0823:  BCF    03.5
0824:  BSF    03.6
0825:  SUBWF  10,F
0826:  BTFSC  03.2
0827:  GOTO   0D2
0828:  BTFSC  03.0
0829:  GOTO   02B
082A:  GOTO   078
082B:  BSF    03.5
082C:  BCF    03.6
082D:  MOVF   69,W
082E:  BCF    03.5
082F:  BSF    03.6
0830:  MOVWF  16
0831:  BSF    16.7
0832:  BSF    03.5
0833:  BCF    03.6
0834:  MOVF   6A,W
0835:  BCF    03.5
0836:  BSF    03.6
0837:  MOVWF  15
0838:  BSF    03.5
0839:  BCF    03.6
083A:  MOVF   6B,W
083B:  BCF    03.5
083C:  BSF    03.6
083D:  MOVWF  14
083E:  CLRF   13
083F:  BCF    03.0
0840:  RRF    16,F
0841:  RRF    15,F
0842:  RRF    14,F
0843:  RRF    13,F
0844:  DECFSZ 10,F
0845:  GOTO   03E
0846:  BTFSS  11.7
0847:  GOTO   04B
0848:  BSF    12.0
0849:  GOTO   17A
084A:  BCF    12.0
084B:  BCF    10.0
084C:  BSF    12.4
084D:  MOVLW  E7
084E:  MOVWF  04
084F:  BCF    03.7
0850:  GOTO   190
0851:  BCF    12.4
0852:  BTFSC  11.7
0853:  GOTO   05E
0854:  BTFSS  10.0
0855:  GOTO   069
0856:  RRF    16,F
0857:  RRF    15,F
0858:  RRF    14,F
0859:  RRF    13,F
085A:  INCF   77,F
085B:  BTFSC  03.2
085C:  GOTO   175
085D:  GOTO   069
085E:  BTFSC  16.7
085F:  GOTO   06C
0860:  BCF    03.0
0861:  RLF    13,F
0862:  RLF    14,F
0863:  RLF    15,F
0864:  RLF    16,F
0865:  DECF   77,F
0866:  BTFSC  03.2
0867:  GOTO   175
0868:  GOTO   05E
0869:  BSF    12.6
086A:  GOTO   102
086B:  BCF    12.6
086C:  BSF    03.5
086D:  BCF    03.6
086E:  MOVF   65,W
086F:  BCF    03.5
0870:  BSF    03.6
0871:  MOVWF  11
0872:  BTFSS  11.7
0873:  GOTO   076
0874:  BSF    16.7
0875:  GOTO   16E
0876:  BCF    16.7
0877:  GOTO   16E
0878:  BSF    03.5
0879:  BCF    03.6
087A:  MOVF   68,W
087B:  BCF    03.5
087C:  BSF    03.6
087D:  MOVWF  10
087E:  MOVWF  77
087F:  BSF    03.5
0880:  BCF    03.6
0881:  MOVF   64,W
0882:  BCF    03.5
0883:  BSF    03.6
0884:  SUBWF  10,F
0885:  BSF    03.5
0886:  BCF    03.6
0887:  MOVF   65,W
0888:  BCF    03.5
0889:  BSF    03.6
088A:  MOVWF  16
088B:  BSF    16.7
088C:  BSF    03.5
088D:  BCF    03.6
088E:  MOVF   66,W
088F:  BCF    03.5
0890:  BSF    03.6
0891:  MOVWF  15
0892:  BSF    03.5
0893:  BCF    03.6
0894:  MOVF   67,W
0895:  BCF    03.5
0896:  BSF    03.6
0897:  MOVWF  14
0898:  CLRF   13
0899:  BCF    03.0
089A:  RRF    16,F
089B:  RRF    15,F
089C:  RRF    14,F
089D:  RRF    13,F
089E:  DECFSZ 10,F
089F:  GOTO   098
08A0:  BTFSS  11.7
08A1:  GOTO   0A5
08A2:  BSF    12.1
08A3:  GOTO   17A
08A4:  BCF    12.1
08A5:  BCF    10.0
08A6:  BSF    12.5
08A7:  MOVLW  EB
08A8:  MOVWF  04
08A9:  BCF    03.7
08AA:  GOTO   190
08AB:  BCF    12.5
08AC:  BTFSC  11.7
08AD:  GOTO   0B8
08AE:  BTFSS  10.0
08AF:  GOTO   0C3
08B0:  RRF    16,F
08B1:  RRF    15,F
08B2:  RRF    14,F
08B3:  RRF    13,F
08B4:  INCF   77,F
08B5:  BTFSC  03.2
08B6:  GOTO   175
08B7:  GOTO   0C3
08B8:  BTFSC  16.7
08B9:  GOTO   0C6
08BA:  BCF    03.0
08BB:  RLF    13,F
08BC:  RLF    14,F
08BD:  RLF    15,F
08BE:  RLF    16,F
08BF:  DECF   77,F
08C0:  BTFSC  03.2
08C1:  GOTO   175
08C2:  GOTO   0B8
08C3:  BSF    12.7
08C4:  GOTO   102
08C5:  BCF    12.7
08C6:  BSF    03.5
08C7:  BCF    03.6
08C8:  MOVF   69,W
08C9:  BCF    03.5
08CA:  BSF    03.6
08CB:  MOVWF  11
08CC:  BTFSS  11.7
08CD:  GOTO   0D0
08CE:  BSF    16.7
08CF:  GOTO   16E
08D0:  BCF    16.7
08D1:  GOTO   16E
08D2:  BSF    03.5
08D3:  BCF    03.6
08D4:  MOVF   69,W
08D5:  BCF    03.5
08D6:  BSF    03.6
08D7:  MOVWF  16
08D8:  BSF    16.7
08D9:  BSF    03.5
08DA:  BCF    03.6
08DB:  MOVF   6A,W
08DC:  BCF    03.5
08DD:  BSF    03.6
08DE:  MOVWF  15
08DF:  BSF    03.5
08E0:  BCF    03.6
08E1:  MOVF   6B,W
08E2:  BCF    03.5
08E3:  BSF    03.6
08E4:  MOVWF  14
08E5:  BTFSS  11.7
08E6:  GOTO   0EB
08E7:  BCF    16.7
08E8:  BSF    12.2
08E9:  GOTO   17A
08EA:  BCF    12.2
08EB:  CLRF   13
08EC:  BCF    10.0
08ED:  MOVLW  E7
08EE:  MOVWF  04
08EF:  BCF    03.7
08F0:  GOTO   190
08F1:  BTFSC  11.7
08F2:  GOTO   118
08F3:  BSF    03.5
08F4:  BCF    03.6
08F5:  MOVF   65,W
08F6:  BCF    03.5
08F7:  BSF    03.6
08F8:  MOVWF  11
08F9:  BTFSS  10.0
08FA:  GOTO   102
08FB:  RRF    16,F
08FC:  RRF    15,F
08FD:  RRF    14,F
08FE:  RRF    13,F
08FF:  INCF   77,F
0900:  BTFSC  03.2
0901:  GOTO   175
0902:  BTFSS  13.7
0903:  GOTO   113
0904:  INCF   14,F
0905:  BTFSS  03.2
0906:  GOTO   113
0907:  INCF   15,F
0908:  BTFSS  03.2
0909:  GOTO   113
090A:  INCF   16,F
090B:  BTFSS  03.2
090C:  GOTO   113
090D:  RRF    16,F
090E:  RRF    15,F
090F:  RRF    14,F
0910:  INCF   77,F
0911:  BTFSC  03.2
0912:  GOTO   175
0913:  BTFSC  12.6
0914:  GOTO   06B
0915:  BTFSC  12.7
0916:  GOTO   0C5
0917:  GOTO   13F
0918:  MOVLW  80
0919:  XORWF  16,F
091A:  BTFSS  16.7
091B:  GOTO   124
091C:  GOTO   17A
091D:  BSF    03.5
091E:  BCF    03.6
091F:  MOVF   69,W
0920:  BCF    03.5
0921:  BSF    03.6
0922:  MOVWF  11
0923:  GOTO   135
0924:  BSF    03.5
0925:  BCF    03.6
0926:  MOVF   65,W
0927:  BCF    03.5
0928:  BSF    03.6
0929:  MOVWF  11
092A:  MOVF   16,F
092B:  BTFSS  03.2
092C:  GOTO   135
092D:  MOVF   15,F
092E:  BTFSS  03.2
092F:  GOTO   135
0930:  MOVF   14,F
0931:  BTFSS  03.2
0932:  GOTO   135
0933:  CLRF   77
0934:  GOTO   16E
0935:  BTFSC  16.7
0936:  GOTO   13F
0937:  BCF    03.0
0938:  RLF    13,F
0939:  RLF    14,F
093A:  RLF    15,F
093B:  RLF    16,F
093C:  DECFSZ 77,F
093D:  GOTO   135
093E:  GOTO   175
093F:  BTFSS  11.7
0940:  GOTO   143
0941:  BSF    16.7
0942:  GOTO   16E
0943:  BCF    16.7
0944:  GOTO   16E
0945:  BSF    03.5
0946:  BCF    03.6
0947:  MOVF   68,W
0948:  MOVWF  77
0949:  MOVF   69,W
094A:  BCF    03.5
094B:  BSF    03.6
094C:  MOVWF  16
094D:  BSF    03.5
094E:  BCF    03.6
094F:  MOVF   6A,W
0950:  BCF    03.5
0951:  BSF    03.6
0952:  MOVWF  15
0953:  BSF    03.5
0954:  BCF    03.6
0955:  MOVF   6B,W
0956:  BCF    03.5
0957:  BSF    03.6
0958:  MOVWF  14
0959:  GOTO   16E
095A:  BSF    03.5
095B:  BCF    03.6
095C:  MOVF   64,W
095D:  MOVWF  77
095E:  MOVF   65,W
095F:  BCF    03.5
0960:  BSF    03.6
0961:  MOVWF  16
0962:  BSF    03.5
0963:  BCF    03.6
0964:  MOVF   66,W
0965:  BCF    03.5
0966:  BSF    03.6
0967:  MOVWF  15
0968:  BSF    03.5
0969:  BCF    03.6
096A:  MOVF   67,W
096B:  BCF    03.5
096C:  BSF    03.6
096D:  MOVWF  14
096E:  MOVF   16,W
096F:  MOVWF  78
0970:  MOVF   15,W
0971:  MOVWF  79
0972:  MOVF   14,W
0973:  MOVWF  7A
0974:  GOTO   1AF
0975:  CLRF   77
0976:  CLRF   78
0977:  CLRF   79
0978:  CLRF   7A
0979:  GOTO   1AF
097A:  CLRF   13
097B:  COMF   14,F
097C:  COMF   15,F
097D:  COMF   16,F
097E:  COMF   13,F
097F:  INCF   13,F
0980:  BTFSS  03.2
0981:  GOTO   189
0982:  INCF   14,F
0983:  BTFSS  03.2
0984:  GOTO   189
0985:  INCF   15,F
0986:  BTFSS  03.2
0987:  GOTO   189
0988:  INCF   16,F
0989:  BTFSC  12.0
098A:  GOTO   04A
098B:  BTFSC  12.1
098C:  GOTO   0A4
098D:  BTFSC  12.2
098E:  GOTO   0EA
098F:  GOTO   11D
0990:  MOVF   00,W
0991:  ADDWF  14,F
0992:  BTFSS  03.0
0993:  GOTO   19A
0994:  INCF   15,F
0995:  BTFSS  03.2
0996:  GOTO   19A
0997:  INCF   16,F
0998:  BTFSC  03.2
0999:  BSF    10.0
099A:  DECF   04,F
099B:  MOVF   00,W
099C:  ADDWF  15,F
099D:  BTFSS  03.0
099E:  GOTO   1A2
099F:  INCF   16,F
09A0:  BTFSC  03.2
09A1:  BSF    10.0
09A2:  DECF   04,F
09A3:  MOVF   00,W
09A4:  BTFSC  00.7
09A5:  GOTO   1A7
09A6:  XORLW  80
09A7:  ADDWF  16,F
09A8:  BTFSC  03.0
09A9:  BSF    10.0
09AA:  BTFSC  12.4
09AB:  GOTO   051
09AC:  BTFSC  12.5
09AD:  GOTO   0AB
09AE:  GOTO   0F1
09AF:  BCF    03.6
09B0:  RETURN
*
09E9:  MOVF   61,W
09EA:  MOVWF  68
09EB:  MOVF   65,W
09EC:  XORWF  68,F
09ED:  BTFSS  68.7
09EE:  GOTO   1F4
09EF:  BCF    03.2
09F0:  BCF    03.0
09F1:  BTFSC  61.7
09F2:  BSF    03.0
09F3:  GOTO   227
09F4:  MOVF   61,W
09F5:  MOVWF  68
09F6:  MOVF   64,W
09F7:  MOVWF  69
09F8:  MOVF   60,W
09F9:  SUBWF  69,F
09FA:  BTFSC  03.2
09FB:  GOTO   202
09FC:  BTFSS  68.7
09FD:  GOTO   227
09FE:  MOVF   03,W
09FF:  XORLW  01
0A00:  MOVWF  03
0A01:  GOTO   227
0A02:  MOVF   65,W
0A03:  MOVWF  69
0A04:  MOVF   61,W
0A05:  SUBWF  69,F
0A06:  BTFSC  03.2
0A07:  GOTO   20E
0A08:  BTFSS  68.7
0A09:  GOTO   227
0A0A:  MOVF   03,W
0A0B:  XORLW  01
0A0C:  MOVWF  03
0A0D:  GOTO   227
0A0E:  MOVF   66,W
0A0F:  MOVWF  69
0A10:  MOVF   62,W
0A11:  SUBWF  69,F
0A12:  BTFSC  03.2
0A13:  GOTO   21A
0A14:  BTFSS  68.7
0A15:  GOTO   227
0A16:  MOVF   03,W
0A17:  XORLW  01
0A18:  MOVWF  03
0A19:  GOTO   227
0A1A:  MOVF   67,W
0A1B:  MOVWF  69
0A1C:  MOVF   63,W
0A1D:  SUBWF  69,F
0A1E:  BTFSC  03.2
0A1F:  GOTO   226
0A20:  BTFSS  68.7
0A21:  GOTO   227
0A22:  MOVF   03,W
0A23:  XORLW  01
0A24:  MOVWF  03
0A25:  GOTO   227
0A26:  BCF    03.0
*
0BCF:  BSF    03.5
0BD0:  MOVF   32,W
0BD1:  BTFSC  03.2
0BD2:  GOTO   495
0BD3:  MOVWF  3E
0BD4:  MOVF   36,W
0BD5:  BTFSC  03.2
0BD6:  GOTO   495
0BD7:  SUBWF  3E,F
0BD8:  BTFSS  03.0
0BD9:  GOTO   3DF
0BDA:  MOVLW  7F
0BDB:  ADDWF  3E,F
0BDC:  BTFSC  03.0
0BDD:  GOTO   495
0BDE:  GOTO   3E5
0BDF:  MOVLW  81
0BE0:  SUBWF  3E,F
0BE1:  BTFSS  03.0
0BE2:  GOTO   495
0BE3:  BTFSC  03.2
0BE4:  GOTO   495
0BE5:  MOVF   3E,W
0BE6:  MOVWF  77
0BE7:  CLRF   78
0BE8:  CLRF   79
0BE9:  CLRF   7A
0BEA:  CLRF   3D
0BEB:  MOVF   33,W
0BEC:  MOVWF  3C
0BED:  BSF    3C.7
0BEE:  MOVF   34,W
0BEF:  MOVWF  3B
0BF0:  MOVF   35,W
0BF1:  MOVWF  3A
0BF2:  MOVLW  19
0BF3:  MOVWF  3E
0BF4:  MOVF   39,W
0BF5:  SUBWF  3A,F
0BF6:  BTFSC  03.0
0BF7:  GOTO   408
0BF8:  MOVLW  01
0BF9:  SUBWF  3B,F
0BFA:  BTFSC  03.0
0BFB:  GOTO   408
0BFC:  SUBWF  3C,F
0BFD:  BTFSC  03.0
0BFE:  GOTO   408
0BFF:  SUBWF  3D,F
0C00:  BTFSC  03.0
0C01:  GOTO   408
0C02:  INCF   3D,F
0C03:  INCF   3C,F
0C04:  INCF   3B,F
0C05:  MOVF   39,W
0C06:  ADDWF  3A,F
0C07:  GOTO   43A
0C08:  MOVF   38,W
0C09:  SUBWF  3B,F
0C0A:  BTFSC  03.0
0C0B:  GOTO   423
0C0C:  MOVLW  01
0C0D:  SUBWF  3C,F
0C0E:  BTFSC  03.0
0C0F:  GOTO   423
0C10:  SUBWF  3D,F
0C11:  BTFSC  03.0
0C12:  GOTO   423
0C13:  INCF   3D,F
0C14:  INCF   3C,F
0C15:  MOVF   38,W
0C16:  ADDWF  3B,F
0C17:  MOVF   39,W
0C18:  ADDWF  3A,F
0C19:  BTFSS  03.0
0C1A:  GOTO   43A
0C1B:  INCF   3B,F
0C1C:  BTFSS  03.2
0C1D:  GOTO   43A
0C1E:  INCF   3C,F
0C1F:  BTFSS  03.2
0C20:  GOTO   43A
0C21:  INCF   3D,F
0C22:  GOTO   43A
0C23:  MOVF   37,W
0C24:  IORLW  80
0C25:  SUBWF  3C,F
0C26:  BTFSC  03.0
0C27:  GOTO   439
0C28:  MOVLW  01
0C29:  SUBWF  3D,F
0C2A:  BTFSC  03.0
0C2B:  GOTO   439
0C2C:  INCF   3D,F
0C2D:  MOVF   37,W
0C2E:  IORLW  80
0C2F:  ADDWF  3C,F
0C30:  MOVF   38,W
0C31:  ADDWF  3B,F
0C32:  BTFSS  03.0
0C33:  GOTO   417
0C34:  INCF   3C,F
0C35:  BTFSS  03.2
0C36:  GOTO   417
0C37:  INCF   3D,F
0C38:  GOTO   417
0C39:  BSF    7A.0
0C3A:  DECFSZ 3E,F
0C3B:  GOTO   43D
0C3C:  GOTO   448
0C3D:  BCF    03.0
0C3E:  RLF    3A,F
0C3F:  RLF    3B,F
0C40:  RLF    3C,F
0C41:  RLF    3D,F
0C42:  BCF    03.0
0C43:  RLF    7A,F
0C44:  RLF    79,F
0C45:  RLF    78,F
0C46:  RLF    3F,F
0C47:  GOTO   3F4
0C48:  BTFSS  3F.0
0C49:  GOTO   450
0C4A:  BCF    03.0
0C4B:  RRF    78,F
0C4C:  RRF    79,F
0C4D:  RRF    7A,F
0C4E:  RRF    3F,F
0C4F:  GOTO   453
0C50:  DECF   77,F
0C51:  BTFSC  03.2
0C52:  GOTO   495
0C53:  BTFSC  3F.7
0C54:  GOTO   47C
0C55:  BCF    03.0
0C56:  RLF    3A,F
0C57:  RLF    3B,F
0C58:  RLF    3C,F
0C59:  RLF    3D,F
0C5A:  MOVF   39,W
0C5B:  SUBWF  3A,F
0C5C:  BTFSC  03.0
0C5D:  GOTO   468
0C5E:  MOVLW  01
0C5F:  SUBWF  3B,F
0C60:  BTFSC  03.0
0C61:  GOTO   468
0C62:  SUBWF  3C,F
0C63:  BTFSC  03.0
0C64:  GOTO   468
0C65:  SUBWF  3D,F
0C66:  BTFSS  03.0
0C67:  GOTO   48B
0C68:  MOVF   38,W
0C69:  SUBWF  3B,F
0C6A:  BTFSC  03.0
0C6B:  GOTO   473
0C6C:  MOVLW  01
0C6D:  SUBWF  3C,F
0C6E:  BTFSC  03.0
0C6F:  GOTO   473
0C70:  SUBWF  3D,F
0C71:  BTFSS  03.0
0C72:  GOTO   48B
0C73:  MOVF   37,W
0C74:  IORLW  80
0C75:  SUBWF  3C,F
0C76:  BTFSC  03.0
0C77:  GOTO   47C
0C78:  MOVLW  01
0C79:  SUBWF  3D,F
0C7A:  BTFSS  03.0
0C7B:  GOTO   48B
0C7C:  INCF   7A,F
0C7D:  BTFSS  03.2
0C7E:  GOTO   48B
0C7F:  INCF   79,F
0C80:  BTFSS  03.2
0C81:  GOTO   48B
0C82:  INCF   78,F
0C83:  BTFSS  03.2
0C84:  GOTO   48B
0C85:  INCF   77,F
0C86:  BTFSC  03.2
0C87:  GOTO   495
0C88:  RRF    78,F
0C89:  RRF    79,F
0C8A:  RRF    7A,F
0C8B:  MOVF   33,W
0C8C:  MOVWF  3E
0C8D:  MOVF   37,W
0C8E:  XORWF  3E,F
0C8F:  BTFSS  3E.7
0C90:  GOTO   493
0C91:  BSF    78.7
0C92:  GOTO   499
0C93:  BCF    78.7
0C94:  GOTO   499
0C95:  CLRF   77
0C96:  CLRF   78
0C97:  CLRF   79
0C98:  CLRF   7A
0C99:  BCF    03.5
0C9A:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=20MHz)
*
02A3:  MOVLW  B0
02A4:  MOVWF  04
02A5:  BCF    03.7
02A6:  MOVF   00,W
02A7:  BTFSC  03.2
02A8:  GOTO   2B6
02A9:  MOVLW  06
02AA:  MOVWF  78
02AB:  CLRF   77
02AC:  DECFSZ 77,F
02AD:  GOTO   2AC
02AE:  DECFSZ 78,F
02AF:  GOTO   2AB
02B0:  MOVLW  7B
02B1:  MOVWF  77
02B2:  DECFSZ 77,F
02B3:  GOTO   2B2
02B4:  DECFSZ 00,F
02B5:  GOTO   2A9
02B6:  RETURN
.................... 
.................... 
.................... #include <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
*
09B1:  BSF    03.5
09B2:  CLRF   45
09B3:  CLRF   44
09B4:  CLRF   43
09B5:  MOVLW  7F
09B6:  MOVWF  42
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
09B7:  MOVLW  7E
09B8:  MOVWF  4C
09B9:  MOVLW  80
09BA:  MOVWF  4D
09BB:  CLRF   4E
09BC:  CLRF   4F
09BD:  MOVLW  7A
09BE:  MOVWF  50
09BF:  MOVLW  2A
09C0:  MOVWF  51
09C1:  MOVLW  AA
09C2:  MOVWF  52
09C3:  MOVLW  A3
09C4:  MOVWF  53
09C5:  MOVLW  75
09C6:  MOVWF  54
09C7:  MOVLW  B6
09C8:  MOVWF  55
09C9:  MOVLW  09
09CA:  MOVWF  56
09CB:  MOVLW  B4
09CC:  MOVWF  57
09CD:  MOVLW  6F
09CE:  MOVWF  58
09CF:  MOVLW  4F
09D0:  MOVWF  59
09D1:  MOVLW  B6
09D2:  MOVWF  5A
09D3:  MOVLW  AA
09D4:  MOVWF  5B
09D5:  MOVLW  69
09D6:  MOVWF  5C
09D7:  MOVLW  8B
09D8:  MOVWF  5D
09D9:  MOVLW  F6
09DA:  MOVWF  5E
09DB:  MOVLW  E8
09DC:  MOVWF  5F
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
09DD:  MOVF   39,W
09DE:  MOVWF  63
09DF:  MOVF   38,W
09E0:  MOVWF  62
09E1:  MOVF   37,W
09E2:  MOVWF  61
09E3:  MOVF   36,W
09E4:  MOVWF  60
09E5:  CLRF   67
09E6:  CLRF   66
09E7:  CLRF   65
09E8:  CLRF   64
*
0A27:  BTFSS  03.0
0A28:  GOTO   22C
0A29:  MOVF   37,W
0A2A:  XORLW  80
0A2B:  MOVWF  37
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
0A2C:  MOVF   39,W
0A2D:  MOVWF  67
0A2E:  MOVF   38,W
0A2F:  MOVWF  66
0A30:  MOVF   37,W
0A31:  MOVWF  65
0A32:  MOVF   36,W
0A33:  MOVWF  64
0A34:  MOVLW  83
0A35:  MOVWF  6B
0A36:  MOVLW  F9
0A37:  MOVWF  6A
0A38:  MOVLW  22
0A39:  MOVWF  69
0A3A:  MOVLW  7E
0A3B:  MOVWF  68
0A3C:  BCF    0A.3
0A3D:  BCF    03.5
0A3E:  CALL   658
0A3F:  BSF    0A.3
0A40:  MOVF   7A,W
0A41:  BSF    03.5
0A42:  MOVWF  63
0A43:  MOVF   79,W
0A44:  MOVWF  62
0A45:  MOVF   78,W
0A46:  MOVWF  61
0A47:  MOVF   77,W
0A48:  MOVWF  60
0A49:  BCF    0A.3
0A4A:  BCF    03.5
0A4B:  CALL   711
0A4C:  BSF    0A.3
0A4D:  MOVF   78,W
0A4E:  BSF    03.5
0A4F:  MOVWF  46
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
0A50:  MOVF   39,W
0A51:  MOVWF  67
0A52:  MOVF   38,W
0A53:  MOVWF  66
0A54:  MOVF   37,W
0A55:  MOVWF  65
0A56:  MOVF   36,W
0A57:  MOVWF  64
0A58:  MOVLW  83
0A59:  MOVWF  6B
0A5A:  MOVLW  F9
0A5B:  MOVWF  6A
0A5C:  MOVLW  22
0A5D:  MOVWF  69
0A5E:  MOVLW  7E
0A5F:  MOVWF  68
0A60:  BCF    0A.3
0A61:  BCF    03.5
0A62:  CALL   658
0A63:  BSF    0A.3
0A64:  MOVF   7A,W
0A65:  BSF    03.5
0A66:  MOVWF  63
0A67:  MOVF   79,W
0A68:  MOVWF  62
0A69:  MOVF   78,W
0A6A:  MOVWF  61
0A6B:  MOVF   77,W
0A6C:  MOVWF  60
0A6D:  CLRF   65
0A6E:  MOVF   46,W
0A6F:  MOVWF  64
0A70:  BCF    0A.3
0A71:  BCF    03.5
0A72:  CALL   732
0A73:  BSF    0A.3
0A74:  BSF    03.1
0A75:  BSF    03.5
0A76:  MOVF   63,W
0A77:  MOVWF  67
0A78:  MOVF   62,W
0A79:  MOVWF  66
0A7A:  MOVF   61,W
0A7B:  MOVWF  65
0A7C:  MOVF   60,W
0A7D:  MOVWF  64
0A7E:  MOVF   7A,W
0A7F:  MOVWF  6B
0A80:  MOVF   79,W
0A81:  MOVWF  6A
0A82:  MOVF   78,W
0A83:  MOVWF  69
0A84:  MOVF   77,W
0A85:  MOVWF  68
0A86:  BCF    03.5
0A87:  CALL   000
0A88:  MOVF   7A,W
0A89:  BSF    03.5
0A8A:  MOVWF  4B
0A8B:  MOVF   79,W
0A8C:  MOVWF  4A
0A8D:  MOVF   78,W
0A8E:  MOVWF  49
0A8F:  MOVF   77,W
0A90:  MOVWF  48
....................    quad = quad % 4;                    // quadrant (0 to 3)
0A91:  MOVLW  03
0A92:  ANDWF  46,F
.................... 
....................    if (quad == 0 || quad == 2)
0A93:  MOVF   46,F
0A94:  BTFSC  03.2
0A95:  GOTO   29A
0A96:  MOVF   46,W
0A97:  SUBLW  02
0A98:  BTFSS  03.2
0A99:  GOTO   2B8
....................       t = frac * PI_DIV_BY_TWO;
0A9A:  MOVF   4B,W
0A9B:  MOVWF  67
0A9C:  MOVF   4A,W
0A9D:  MOVWF  66
0A9E:  MOVF   49,W
0A9F:  MOVWF  65
0AA0:  MOVF   48,W
0AA1:  MOVWF  64
0AA2:  MOVLW  DB
0AA3:  MOVWF  6B
0AA4:  MOVLW  0F
0AA5:  MOVWF  6A
0AA6:  MOVLW  49
0AA7:  MOVWF  69
0AA8:  MOVLW  7F
0AA9:  MOVWF  68
0AAA:  BCF    0A.3
0AAB:  BCF    03.5
0AAC:  CALL   658
0AAD:  BSF    0A.3
0AAE:  MOVF   7A,W
0AAF:  BSF    03.5
0AB0:  MOVWF  41
0AB1:  MOVF   79,W
0AB2:  MOVWF  40
0AB3:  MOVF   78,W
0AB4:  MOVWF  3F
0AB5:  MOVF   77,W
0AB6:  MOVWF  3E
0AB7:  GOTO   327
....................    else if (quad == 1)
0AB8:  DECFSZ 46,W
0AB9:  GOTO   2F1
....................       t = (1-frac) * PI_DIV_BY_TWO;
0ABA:  BSF    03.1
0ABB:  CLRF   67
0ABC:  CLRF   66
0ABD:  CLRF   65
0ABE:  MOVLW  7F
0ABF:  MOVWF  64
0AC0:  MOVF   4B,W
0AC1:  MOVWF  6B
0AC2:  MOVF   4A,W
0AC3:  MOVWF  6A
0AC4:  MOVF   49,W
0AC5:  MOVWF  69
0AC6:  MOVF   48,W
0AC7:  MOVWF  68
0AC8:  BCF    03.5
0AC9:  CALL   000
0ACA:  MOVF   7A,W
0ACB:  BSF    03.5
0ACC:  MOVWF  63
0ACD:  MOVF   79,W
0ACE:  MOVWF  62
0ACF:  MOVF   78,W
0AD0:  MOVWF  61
0AD1:  MOVF   77,W
0AD2:  MOVWF  60
0AD3:  MOVF   63,W
0AD4:  MOVWF  67
0AD5:  MOVF   62,W
0AD6:  MOVWF  66
0AD7:  MOVF   61,W
0AD8:  MOVWF  65
0AD9:  MOVF   60,W
0ADA:  MOVWF  64
0ADB:  MOVLW  DB
0ADC:  MOVWF  6B
0ADD:  MOVLW  0F
0ADE:  MOVWF  6A
0ADF:  MOVLW  49
0AE0:  MOVWF  69
0AE1:  MOVLW  7F
0AE2:  MOVWF  68
0AE3:  BCF    0A.3
0AE4:  BCF    03.5
0AE5:  CALL   658
0AE6:  BSF    0A.3
0AE7:  MOVF   7A,W
0AE8:  BSF    03.5
0AE9:  MOVWF  41
0AEA:  MOVF   79,W
0AEB:  MOVWF  40
0AEC:  MOVF   78,W
0AED:  MOVWF  3F
0AEE:  MOVF   77,W
0AEF:  MOVWF  3E
0AF0:  GOTO   327
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
0AF1:  BSF    03.1
0AF2:  MOVF   4B,W
0AF3:  MOVWF  67
0AF4:  MOVF   4A,W
0AF5:  MOVWF  66
0AF6:  MOVF   49,W
0AF7:  MOVWF  65
0AF8:  MOVF   48,W
0AF9:  MOVWF  64
0AFA:  CLRF   6B
0AFB:  CLRF   6A
0AFC:  CLRF   69
0AFD:  MOVLW  7F
0AFE:  MOVWF  68
0AFF:  BCF    03.5
0B00:  CALL   000
0B01:  MOVF   7A,W
0B02:  BSF    03.5
0B03:  MOVWF  63
0B04:  MOVF   79,W
0B05:  MOVWF  62
0B06:  MOVF   78,W
0B07:  MOVWF  61
0B08:  MOVF   77,W
0B09:  MOVWF  60
0B0A:  MOVF   63,W
0B0B:  MOVWF  67
0B0C:  MOVF   62,W
0B0D:  MOVWF  66
0B0E:  MOVF   61,W
0B0F:  MOVWF  65
0B10:  MOVF   60,W
0B11:  MOVWF  64
0B12:  MOVLW  DB
0B13:  MOVWF  6B
0B14:  MOVLW  0F
0B15:  MOVWF  6A
0B16:  MOVLW  49
0B17:  MOVWF  69
0B18:  MOVLW  7F
0B19:  MOVWF  68
0B1A:  BCF    0A.3
0B1B:  BCF    03.5
0B1C:  CALL   658
0B1D:  BSF    0A.3
0B1E:  MOVF   7A,W
0B1F:  BSF    03.5
0B20:  MOVWF  41
0B21:  MOVF   79,W
0B22:  MOVWF  40
0B23:  MOVF   78,W
0B24:  MOVWF  3F
0B25:  MOVF   77,W
0B26:  MOVWF  3E
.................... 
....................    y = 1.0;
0B27:  CLRF   3D
0B28:  CLRF   3C
0B29:  CLRF   3B
0B2A:  MOVLW  7F
0B2B:  MOVWF  3A
....................    t = t * t;
0B2C:  MOVF   41,W
0B2D:  MOVWF  67
0B2E:  MOVF   40,W
0B2F:  MOVWF  66
0B30:  MOVF   3F,W
0B31:  MOVWF  65
0B32:  MOVF   3E,W
0B33:  MOVWF  64
0B34:  MOVF   41,W
0B35:  MOVWF  6B
0B36:  MOVF   40,W
0B37:  MOVWF  6A
0B38:  MOVF   3F,W
0B39:  MOVWF  69
0B3A:  MOVF   3E,W
0B3B:  MOVWF  68
0B3C:  BCF    0A.3
0B3D:  BCF    03.5
0B3E:  CALL   658
0B3F:  BSF    0A.3
0B40:  MOVF   7A,W
0B41:  BSF    03.5
0B42:  MOVWF  41
0B43:  MOVF   79,W
0B44:  MOVWF  40
0B45:  MOVF   78,W
0B46:  MOVWF  3F
0B47:  MOVF   77,W
0B48:  MOVWF  3E
....................    for (i = 0; i <= 4; i++)
0B49:  CLRF   47
0B4A:  MOVF   47,W
0B4B:  SUBLW  04
0B4C:  BTFSS  03.0
0B4D:  GOTO   3BC
....................    {
....................       t2 = t2 * t;
0B4E:  MOVF   45,W
0B4F:  MOVWF  67
0B50:  MOVF   44,W
0B51:  MOVWF  66
0B52:  MOVF   43,W
0B53:  MOVWF  65
0B54:  MOVF   42,W
0B55:  MOVWF  64
0B56:  MOVF   41,W
0B57:  MOVWF  6B
0B58:  MOVF   40,W
0B59:  MOVWF  6A
0B5A:  MOVF   3F,W
0B5B:  MOVWF  69
0B5C:  MOVF   3E,W
0B5D:  MOVWF  68
0B5E:  BCF    0A.3
0B5F:  BCF    03.5
0B60:  CALL   658
0B61:  BSF    0A.3
0B62:  MOVF   7A,W
0B63:  BSF    03.5
0B64:  MOVWF  45
0B65:  MOVF   79,W
0B66:  MOVWF  44
0B67:  MOVF   78,W
0B68:  MOVWF  43
0B69:  MOVF   77,W
0B6A:  MOVWF  42
....................       y = y + p[i] * t2;
0B6B:  RLF    47,W
0B6C:  MOVWF  77
0B6D:  RLF    77,F
0B6E:  MOVLW  FC
0B6F:  ANDWF  77,F
0B70:  MOVF   77,W
0B71:  ADDLW  CC
0B72:  MOVWF  04
0B73:  BCF    03.7
0B74:  MOVF   00,W
0B75:  MOVWF  60
0B76:  INCF   04,F
0B77:  MOVF   00,W
0B78:  MOVWF  61
0B79:  INCF   04,F
0B7A:  MOVF   00,W
0B7B:  MOVWF  62
0B7C:  INCF   04,F
0B7D:  MOVF   00,W
0B7E:  MOVWF  63
0B7F:  MOVWF  67
0B80:  MOVF   62,W
0B81:  MOVWF  66
0B82:  MOVF   61,W
0B83:  MOVWF  65
0B84:  MOVF   60,W
0B85:  MOVWF  64
0B86:  MOVF   45,W
0B87:  MOVWF  6B
0B88:  MOVF   44,W
0B89:  MOVWF  6A
0B8A:  MOVF   43,W
0B8B:  MOVWF  69
0B8C:  MOVF   42,W
0B8D:  MOVWF  68
0B8E:  BCF    0A.3
0B8F:  BCF    03.5
0B90:  CALL   658
0B91:  BSF    0A.3
0B92:  BSF    03.5
0B93:  CLRF   61
0B94:  MOVF   04,W
0B95:  MOVWF  60
0B96:  BCF    61.0
0B97:  BTFSC  03.7
0B98:  BSF    61.0
0B99:  BCF    03.1
0B9A:  MOVF   3D,W
0B9B:  MOVWF  67
0B9C:  MOVF   3C,W
0B9D:  MOVWF  66
0B9E:  MOVF   3B,W
0B9F:  MOVWF  65
0BA0:  MOVF   3A,W
0BA1:  MOVWF  64
0BA2:  MOVF   7A,W
0BA3:  MOVWF  6B
0BA4:  MOVF   79,W
0BA5:  MOVWF  6A
0BA6:  MOVF   78,W
0BA7:  MOVWF  69
0BA8:  MOVF   77,W
0BA9:  MOVWF  68
0BAA:  BCF    03.5
0BAB:  CALL   000
0BAC:  BSF    03.5
0BAD:  MOVF   60,W
0BAE:  MOVWF  04
0BAF:  BCF    03.7
0BB0:  BTFSC  61.0
0BB1:  BSF    03.7
0BB2:  MOVF   7A,W
0BB3:  MOVWF  3D
0BB4:  MOVF   79,W
0BB5:  MOVWF  3C
0BB6:  MOVF   78,W
0BB7:  MOVWF  3B
0BB8:  MOVF   77,W
0BB9:  MOVWF  3A
0BBA:  INCF   47,F
0BBB:  GOTO   34A
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
0BBC:  MOVF   46,W
0BBD:  SUBLW  02
0BBE:  BTFSC  03.2
0BBF:  GOTO   3C2
0BC0:  DECFSZ 46,W
0BC1:  GOTO   3C5
....................       y = -y;  // correct sign
0BC2:  MOVF   3B,W
0BC3:  XORLW  80
0BC4:  MOVWF  3B
.................... 
....................    return (y);
0BC5:  MOVF   3A,W
0BC6:  MOVWF  77
0BC7:  MOVF   3B,W
0BC8:  MOVWF  78
0BC9:  MOVF   3C,W
0BCA:  MOVWF  79
0BCB:  MOVF   3D,W
0BCC:  MOVWF  7A
0BCD:  BCF    03.5
0BCE:  RETURN
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
*
0751:  BSF    03.1
0752:  BSF    03.5
0753:  MOVF   31,W
0754:  MOVWF  67
0755:  MOVF   30,W
0756:  MOVWF  66
0757:  MOVF   2F,W
0758:  MOVWF  65
0759:  MOVF   2E,W
075A:  MOVWF  64
075B:  MOVLW  DB
075C:  MOVWF  6B
075D:  MOVLW  0F
075E:  MOVWF  6A
075F:  MOVLW  49
0760:  MOVWF  69
0761:  MOVLW  7F
0762:  MOVWF  68
0763:  BSF    0A.3
0764:  BCF    03.5
0765:  CALL   000
0766:  BCF    0A.3
0767:  MOVF   7A,W
0768:  BSF    03.5
0769:  MOVWF  35
076A:  MOVF   79,W
076B:  MOVWF  34
076C:  MOVF   78,W
076D:  MOVWF  33
076E:  MOVF   77,W
076F:  MOVWF  32
0770:  MOVF   35,W
0771:  MOVWF  39
0772:  MOVF   34,W
0773:  MOVWF  38
0774:  MOVF   33,W
0775:  MOVWF  37
0776:  MOVF   32,W
0777:  MOVWF  36
0778:  BSF    0A.3
0779:  BCF    03.5
077A:  CALL   1B1
077B:  BCF    0A.3
077C:  BCF    0A.3
077D:  BSF    0A.4
077E:  GOTO   15F (RETURN)
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... 
.................... // Interfacing PIC16F877A with SSD1306 OLED display (128x64 Pixel)
.................... // http://simple-circuit.com/
.................... 
.................... #define SSD1306_RST   PIN_D4
.................... 
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP
.................... #use I2C(MASTER, I2C1, FAST = 400000, stream = SSD1306_STREAM)  // Initialize I2C
*
02B7:  BCF    14.7
02B8:  BCF    0C.3
02B9:  BSF    03.5
02BA:  MOVF   39,W
02BB:  BCF    03.5
02BC:  MOVWF  13
02BD:  MOVLW  02
02BE:  BTFSC  14.7
02BF:  GOTO   2C7
02C0:  BSF    03.5
02C1:  BTFSC  14.2
02C2:  GOTO   2C1
02C3:  MOVLW  00
02C4:  BTFSC  11.6
02C5:  MOVLW  01
02C6:  BCF    03.5
02C7:  MOVWF  78
02C8:  RETURN
.................... 
.................... #byte porta = 0x05
.................... 
.................... // Include SSD1306 OLED driver source code
.................... #include <oled12864.c>
.................... /******************************************************************************
....................  SSD1306 OLED driver for CCS PIC C compiler (SSD1306.c)                       *
....................                                                                               *
....................  The driver is for I2C mode only.                                             *
....................                                                                               *
....................  http://simple-circuit.com/                                                   *
....................                                                                               *
.................... *******************************************************************************/
.................... 
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... //------------------------------ Definitions ---------------------------------//
.................... 
.................... #define SSD1306_I2C_ADDRESS   0x7A
.................... 
.................... #if !defined SSD1306_128_32 && !defined SSD1306_96_16
.................... #define SSD1306_128_64
.................... #endif
.................... #if defined SSD1306_128_32 && defined SSD1306_96_16
....................   #error "Only one SSD1306 display can be specified at once"
.................... #endif
.................... 
.................... #if defined SSD1306_128_64
....................   #define SSD1306_LCDWIDTH            128
....................   #define SSD1306_LCDHEIGHT            64
.................... #endif
.................... #if defined SSD1306_128_32
....................   #define SSD1306_LCDWIDTH            128
....................   #define SSD1306_LCDHEIGHT            32
.................... #endif
.................... #if defined SSD1306_96_16
....................   #define SSD1306_LCDWIDTH             96
....................   #define SSD1306_LCDHEIGHT            16
.................... #endif
.................... 
.................... #define SSD1306_SETCONTRAST          0x81
.................... #define SSD1306_DISPLAYALLON_RESUME  0xA4
.................... #define SSD1306_DISPLAYALLON         0xA5
.................... #define SSD1306_NORMALDISPLAY        0xA6
.................... #define SSD1306_INVERTDISPLAY_       0xA7
.................... #define SSD1306_DISPLAYOFF           0xAE
.................... #define SSD1306_DISPLAYON            0xAF
.................... #define SSD1306_SETDISPLAYOFFSET     0xD3
.................... #define SSD1306_SETCOMPINS           0xDA
.................... #define SSD1306_SETVCOMDETECT        0xDB
.................... #define SSD1306_SETDISPLAYCLOCKDIV   0xD5
.................... #define SSD1306_SETPRECHARGE         0xD9
.................... #define SSD1306_SETMULTIPLEX         0xA8
.................... #define SSD1306_SETLOWCOLUMN         0x00
.................... #define SSD1306_SETHIGHCOLUMN        0x10
.................... #define SSD1306_SETSTARTLINE         0x40
.................... #define SSD1306_MEMORYMODE           0x20
.................... #define SSD1306_COLUMNADDR           0x21
.................... #define SSD1306_PAGEADDR             0x22
.................... #define SSD1306_COMSCANINC           0xC0
.................... #define SSD1306_COMSCANDEC           0xC8
.................... #define SSD1306_SEGREMAP             0xA0
.................... #define SSD1306_CHARGEPUMP           0x8D
.................... #define SSD1306_EXTERNALVCC          0x01
.................... #define SSD1306_SWITCHCAPVCC         0x02
.................... 
.................... // Scrolling #defines
.................... #define SSD1306_ACTIVATE_SCROLL                      0x2F
.................... #define SSD1306_DEACTIVATE_SCROLL                    0x2E
.................... #define SSD1306_SET_VERTICAL_SCROLL_AREA             0xA3
.................... #define SSD1306_RIGHT_HORIZONTAL_SCROLL              0x26
.................... #define SSD1306_LEFT_HORIZONTAL_SCROLL               0x27
.................... #define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
.................... #define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL  0x2A
.................... 
.................... 
.................... uint8_t _i2caddr, _vccstate, x_pos = 1, y_pos = 1;
.................... 
.................... //--------------------------------------------------------------------------//
.................... 
.................... int1 dispx1[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
*
103C:  BCF    03.5
103D:  CLRF   30
103E:  CLRF   31
103F:  CLRF   32
1040:  CLRF   33
.................... int1 dispx2[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
1041:  CLRF   34
1042:  CLRF   35
1043:  CLRF   36
1044:  CLRF   37
.................... int1 dispx3[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
1045:  CLRF   38
1046:  CLRF   39
1047:  CLRF   3A
1048:  CLRF   3B
.................... int1 dispx4[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
1049:  CLRF   3C
104A:  CLRF   3D
104B:  CLRF   3E
104C:  CLRF   3F
.................... int1 dispx5[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
104D:  CLRF   40
104E:  CLRF   41
104F:  CLRF   42
1050:  CLRF   43
.................... int1 dispx6[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
1051:  CLRF   44
1052:  CLRF   45
1053:  CLRF   46
1054:  CLRF   47
.................... int1 dispx7[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
1055:  CLRF   48
1056:  CLRF   49
1057:  CLRF   4A
1058:  CLRF   4B
.................... int1 dispx8[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
1059:  CLRF   4C
105A:  CLRF   4D
105B:  CLRF   4E
105C:  CLRF   4F
.................... int1 dispx9[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
105D:  CLRF   50
105E:  CLRF   51
105F:  CLRF   52
1060:  CLRF   53
.................... int1 dispx10[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
1061:  CLRF   54
1062:  CLRF   55
1063:  CLRF   56
1064:  CLRF   57
.................... int1 dispx11[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
1065:  CLRF   58
1066:  CLRF   59
1067:  CLRF   5A
1068:  CLRF   5B
.................... int1 dispx12[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
1069:  CLRF   5C
106A:  CLRF   5D
106B:  CLRF   5E
106C:  CLRF   5F
.................... int1 dispx13[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
106D:  CLRF   60
106E:  CLRF   61
106F:  CLRF   62
1070:  CLRF   63
.................... int1 dispx14[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
1071:  CLRF   64
1072:  CLRF   65
1073:  CLRF   66
1074:  CLRF   67
.................... int1 dispx15[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
1075:  CLRF   68
1076:  CLRF   69
1077:  CLRF   6A
1078:  CLRF   6B
.................... int1 dispx16[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
1079:  CLRF   6C
107A:  CLRF   6D
107B:  CLRF   6E
107C:  CLRF   6F
.................... 
.................... 
.................... int1 wrap = TRUE;
.................... 
.................... const char Font[] = {
.................... 0x00, 0x00, 0x00, 0x00, 0x00,
.................... 0x00, 0x00, 0x5F, 0x00, 0x00,
.................... 0x00, 0x07, 0x00, 0x07, 0x00,
.................... 0x14, 0x7F, 0x14, 0x7F, 0x14,
.................... 0x24, 0x2A, 0x7F, 0x2A, 0x12,
.................... 0x23, 0x13, 0x08, 0x64, 0x62,
.................... 0x36, 0x49, 0x56, 0x20, 0x50,
.................... 0x00, 0x08, 0x07, 0x03, 0x00,
.................... 0x00, 0x1C, 0x22, 0x41, 0x00,
.................... 0x00, 0x41, 0x22, 0x1C, 0x00,
.................... 0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
.................... 0x08, 0x08, 0x3E, 0x08, 0x08,
.................... 0x00, 0x80, 0x70, 0x30, 0x00,
.................... 0x08, 0x08, 0x08, 0x08, 0x08,
.................... 0x00, 0x00, 0x60, 0x60, 0x00,
.................... 0x20, 0x10, 0x08, 0x04, 0x02,
.................... 0x3E, 0x51, 0x49, 0x45, 0x3E,
.................... 0x00, 0x42, 0x7F, 0x40, 0x00,
.................... 0x72, 0x49, 0x49, 0x49, 0x46,
.................... 0x21, 0x41, 0x49, 0x4D, 0x33,
.................... 0x18, 0x14, 0x12, 0x7F, 0x10,
.................... 0x27, 0x45, 0x45, 0x45, 0x39,
.................... 0x3C, 0x4A, 0x49, 0x49, 0x31,
.................... 0x41, 0x21, 0x11, 0x09, 0x07,
.................... 0x36, 0x49, 0x49, 0x49, 0x36,
.................... 0x46, 0x49, 0x49, 0x29, 0x1E,
.................... 0x00, 0x00, 0x14, 0x00, 0x00,
.................... 0x00, 0x40, 0x34, 0x00, 0x00,
.................... 0x00, 0x08, 0x14, 0x22, 0x41,
.................... 0x14, 0x14, 0x14, 0x14, 0x14,
.................... 0x00, 0x41, 0x22, 0x14, 0x08,
.................... 0x02, 0x01, 0x59, 0x09, 0x06,
.................... 0x3E, 0x41, 0x5D, 0x59, 0x4E,
.................... 0x7C, 0x12, 0x11, 0x12, 0x7C,
.................... 0x7F, 0x49, 0x49, 0x49, 0x36,
.................... 0x3E, 0x41, 0x41, 0x41, 0x22,
.................... 0x7F, 0x41, 0x41, 0x41, 0x3E,
.................... 0x7F, 0x49, 0x49, 0x49, 0x41,
.................... 0x7F, 0x09, 0x09, 0x09, 0x01,
.................... 0x3E, 0x41, 0x41, 0x51, 0x73,
.................... 0x7F, 0x08, 0x08, 0x08, 0x7F,
.................... 0x00, 0x41, 0x7F, 0x41, 0x00,
.................... 0x20, 0x40, 0x41, 0x3F, 0x01,
.................... 0x7F, 0x08, 0x14, 0x22, 0x41,
.................... 0x7F, 0x40, 0x40, 0x40, 0x40,
.................... 0x7F, 0x02, 0x1C, 0x02, 0x7F,
.................... 0x7F, 0x04, 0x08, 0x10, 0x7F,
.................... 0x3E, 0x41, 0x41, 0x41, 0x3E,
.................... 0x7F, 0x09, 0x09, 0x09, 0x06,
.................... 0x3E, 0x41, 0x51, 0x21, 0x5E,
.................... 0x7F, 0x09, 0x19, 0x29, 0x46
.................... };
.................... const char Font2[] = {
.................... 0x26, 0x49, 0x49, 0x49, 0x32,
.................... 0x03, 0x01, 0x7F, 0x01, 0x03,
.................... 0x3F, 0x40, 0x40, 0x40, 0x3F,
.................... 0x1F, 0x20, 0x40, 0x20, 0x1F,
.................... 0x3F, 0x40, 0x38, 0x40, 0x3F,
.................... 0x63, 0x14, 0x08, 0x14, 0x63,
.................... 0x03, 0x04, 0x78, 0x04, 0x03,
.................... 0x61, 0x59, 0x49, 0x4D, 0x43,
.................... 0x00, 0x7F, 0x41, 0x41, 0x41,
.................... 0x02, 0x04, 0x08, 0x10, 0x20,
.................... 0x00, 0x41, 0x41, 0x41, 0x7F,
.................... 0x04, 0x02, 0x01, 0x02, 0x04,
.................... 0x40, 0x40, 0x40, 0x40, 0x40,
.................... 0x00, 0x03, 0x07, 0x08, 0x00,
.................... 0x20, 0x54, 0x54, 0x78, 0x40,
.................... 0x7F, 0x28, 0x44, 0x44, 0x38,
.................... 0x38, 0x44, 0x44, 0x44, 0x28,
.................... 0x38, 0x44, 0x44, 0x28, 0x7F,
.................... 0x38, 0x54, 0x54, 0x54, 0x18,
.................... 0x00, 0x08, 0x7E, 0x09, 0x02,
.................... 0x18, 0xA4, 0xA4, 0x9C, 0x78,
.................... 0x7F, 0x08, 0x04, 0x04, 0x78,
.................... 0x00, 0x44, 0x7D, 0x40, 0x00,
.................... 0x20, 0x40, 0x40, 0x3D, 0x00,
.................... 0x7F, 0x10, 0x28, 0x44, 0x00,
.................... 0x00, 0x41, 0x7F, 0x40, 0x00,
.................... 0x7C, 0x04, 0x78, 0x04, 0x78,
.................... 0x7C, 0x08, 0x04, 0x04, 0x78,
.................... 0x38, 0x44, 0x44, 0x44, 0x38,
.................... 0xFC, 0x18, 0x24, 0x24, 0x18,
.................... 0x18, 0x24, 0x24, 0x18, 0xFC,
.................... 0x7C, 0x08, 0x04, 0x04, 0x08,
.................... 0x48, 0x54, 0x54, 0x54, 0x24,
.................... 0x04, 0x04, 0x3F, 0x44, 0x24,
.................... 0x3C, 0x40, 0x40, 0x20, 0x7C,
.................... 0x1C, 0x20, 0x40, 0x20, 0x1C,
.................... 0x3C, 0x40, 0x30, 0x40, 0x3C,
.................... 0x44, 0x28, 0x10, 0x28, 0x44,
.................... 0x4C, 0x90, 0x90, 0x90, 0x7C,
.................... 0x44, 0x64, 0x54, 0x4C, 0x44,
.................... 0x00, 0x08, 0x36, 0x41, 0x00,
.................... 0x00, 0x00, 0x77, 0x00, 0x00,
.................... 0x00, 0x41, 0x36, 0x08, 0x00,
.................... 0x02, 0x01, 0x02, 0x04, 0x02
.................... };
.................... 
.................... 
.................... void ssd1306_command(uint8_t c) {
*
02C9:  BSF    03.5
02CA:  CLRF   38
....................     uint8_t control = 0x00;   // Co = 0, D/C = 0
....................     I2C_Start(SSD1306_STREAM);
02CB:  BSF    11.0
02CC:  BTFSC  11.0
02CD:  GOTO   2CC
....................     I2C_Write(SSD1306_STREAM, _i2caddr);
02CE:  BCF    03.5
02CF:  MOVF   2C,W
02D0:  BSF    03.5
02D1:  MOVWF  39
02D2:  BCF    03.5
02D3:  CALL   2B7
....................     I2C_Write(SSD1306_STREAM, control);
02D4:  BSF    03.5
02D5:  MOVF   38,W
02D6:  MOVWF  39
02D7:  BCF    03.5
02D8:  CALL   2B7
....................     I2C_Write(SSD1306_STREAM, c);
02D9:  BSF    03.5
02DA:  MOVF   37,W
02DB:  MOVWF  39
02DC:  BCF    03.5
02DD:  CALL   2B7
....................     I2C_Stop(SSD1306_STREAM);
02DE:  BSF    03.5
02DF:  BSF    11.2
02E0:  BTFSC  11.2
02E1:  GOTO   2E0
02E2:  BCF    03.5
02E3:  RETURN
.................... }
.................... 
.................... void SSD1306_Init(uint8_t vccstate = SSD1306_SWITCHCAPVCC, uint8_t i2caddr = SSD1306_I2C_ADDRESS) {
....................   _vccstate = vccstate;
02E4:  BSF    03.5
02E5:  MOVF   2E,W
02E6:  BCF    03.5
02E7:  MOVWF  2D
....................   _i2caddr  = i2caddr;
02E8:  BSF    03.5
02E9:  MOVF   2F,W
02EA:  BCF    03.5
02EB:  MOVWF  2C
....................   #ifdef SSD1306_RST
....................     output_low(SSD1306_RST);
02EC:  BSF    03.5
02ED:  BCF    08.4
02EE:  BCF    03.5
02EF:  BCF    08.4
....................     output_drive(SSD1306_RST);
02F0:  BSF    03.5
02F1:  BCF    08.4
....................     delay_ms(10);
02F2:  MOVLW  0A
02F3:  MOVWF  30
02F4:  BCF    03.5
02F5:  CALL   2A3
....................     output_high(SSD1306_RST);
02F6:  BSF    03.5
02F7:  BCF    08.4
02F8:  BCF    03.5
02F9:  BSF    08.4
....................   #endif
....................   // Init sequence
....................   ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
02FA:  MOVLW  AE
02FB:  BSF    03.5
02FC:  MOVWF  37
02FD:  BCF    03.5
02FE:  CALL   2C9
....................   ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
02FF:  MOVLW  D5
0300:  BSF    03.5
0301:  MOVWF  37
0302:  BCF    03.5
0303:  CALL   2C9
....................   ssd1306_command(0x80);                                  // the suggested ratio 0x80
0304:  MOVLW  80
0305:  BSF    03.5
0306:  MOVWF  37
0307:  BCF    03.5
0308:  CALL   2C9
.................... 
....................   ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
0309:  MOVLW  A8
030A:  BSF    03.5
030B:  MOVWF  37
030C:  BCF    03.5
030D:  CALL   2C9
....................   ssd1306_command(SSD1306_LCDHEIGHT - 1);
030E:  MOVLW  3F
030F:  BSF    03.5
0310:  MOVWF  37
0311:  BCF    03.5
0312:  CALL   2C9
.................... 
....................   ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
0313:  MOVLW  D3
0314:  BSF    03.5
0315:  MOVWF  37
0316:  BCF    03.5
0317:  CALL   2C9
....................   ssd1306_command(0x0);                                   // no offset
0318:  BSF    03.5
0319:  CLRF   37
031A:  BCF    03.5
031B:  CALL   2C9
....................   ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
031C:  MOVLW  40
031D:  BSF    03.5
031E:  MOVWF  37
031F:  BCF    03.5
0320:  CALL   2C9
....................   ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
0321:  MOVLW  8D
0322:  BSF    03.5
0323:  MOVWF  37
0324:  BCF    03.5
0325:  CALL   2C9
....................   if (vccstate == SSD1306_EXTERNALVCC)
0326:  BSF    03.5
0327:  DECFSZ 2E,W
0328:  GOTO   32F
....................     { ssd1306_command(0x10); }
0329:  MOVLW  10
032A:  MOVWF  37
032B:  BCF    03.5
032C:  CALL   2C9
032D:  GOTO   333
032E:  BSF    03.5
....................   else
....................     { ssd1306_command(0x14); }
032F:  MOVLW  14
0330:  MOVWF  37
0331:  BCF    03.5
0332:  CALL   2C9
....................   ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
0333:  MOVLW  20
0334:  BSF    03.5
0335:  MOVWF  37
0336:  BCF    03.5
0337:  CALL   2C9
....................   ssd1306_command(0x00);                                  // 0x0 act like ks0108
0338:  BSF    03.5
0339:  CLRF   37
033A:  BCF    03.5
033B:  CALL   2C9
....................   ssd1306_command(SSD1306_SEGREMAP | 0x1);
033C:  MOVLW  A1
033D:  BSF    03.5
033E:  MOVWF  37
033F:  BCF    03.5
0340:  CALL   2C9
....................   ssd1306_command(SSD1306_COMSCANDEC);
0341:  MOVLW  C8
0342:  BSF    03.5
0343:  MOVWF  37
0344:  BCF    03.5
0345:  CALL   2C9
.................... 
....................  #if defined SSD1306_128_32
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
....................   ssd1306_command(0x02);
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
....................   ssd1306_command(0x8F);
.................... 
.................... #elif defined SSD1306_128_64
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
0346:  MOVLW  DA
0347:  BSF    03.5
0348:  MOVWF  37
0349:  BCF    03.5
034A:  CALL   2C9
....................   ssd1306_command(0x12);
034B:  MOVLW  12
034C:  BSF    03.5
034D:  MOVWF  37
034E:  BCF    03.5
034F:  CALL   2C9
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
0350:  MOVLW  81
0351:  BSF    03.5
0352:  MOVWF  37
0353:  BCF    03.5
0354:  CALL   2C9
....................   if (vccstate == SSD1306_EXTERNALVCC)
0355:  BSF    03.5
0356:  DECFSZ 2E,W
0357:  GOTO   35E
....................     { ssd1306_command(0x9F); }
0358:  MOVLW  9F
0359:  MOVWF  37
035A:  BCF    03.5
035B:  CALL   2C9
035C:  GOTO   362
035D:  BSF    03.5
....................   else
....................     { ssd1306_command(0xCF); }
035E:  MOVLW  CF
035F:  MOVWF  37
0360:  BCF    03.5
0361:  CALL   2C9
.................... 
.................... #elif defined SSD1306_96_16
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
....................   ssd1306_command(0x2);   //ada x12
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
....................   if (vccstate == SSD1306_EXTERNALVCC)
....................     { ssd1306_command(0x10); }
....................   else
....................     { ssd1306_command(0xAF); }
.................... 
.................... #endif
.................... 
....................   ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
0362:  MOVLW  D9
0363:  BSF    03.5
0364:  MOVWF  37
0365:  BCF    03.5
0366:  CALL   2C9
....................   if (vccstate == SSD1306_EXTERNALVCC)
0367:  BSF    03.5
0368:  DECFSZ 2E,W
0369:  GOTO   370
....................     { ssd1306_command(0x22); }
036A:  MOVLW  22
036B:  MOVWF  37
036C:  BCF    03.5
036D:  CALL   2C9
036E:  GOTO   374
036F:  BSF    03.5
....................   else
....................     { ssd1306_command(0xF1); }
0370:  MOVLW  F1
0371:  MOVWF  37
0372:  BCF    03.5
0373:  CALL   2C9
....................   ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
0374:  MOVLW  DB
0375:  BSF    03.5
0376:  MOVWF  37
0377:  BCF    03.5
0378:  CALL   2C9
....................   ssd1306_command(0x40);
0379:  MOVLW  40
037A:  BSF    03.5
037B:  MOVWF  37
037C:  BCF    03.5
037D:  CALL   2C9
....................   ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
037E:  MOVLW  A4
037F:  BSF    03.5
0380:  MOVWF  37
0381:  BCF    03.5
0382:  CALL   2C9
....................   ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
0383:  MOVLW  A6
0384:  BSF    03.5
0385:  MOVWF  37
0386:  BCF    03.5
0387:  CALL   2C9
.................... 
....................   ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
0388:  MOVLW  2E
0389:  BSF    03.5
038A:  MOVWF  37
038B:  BCF    03.5
038C:  CALL   2C9
.................... 
....................   ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
038D:  MOVLW  AF
038E:  BSF    03.5
038F:  MOVWF  37
0390:  BCF    03.5
0391:  CALL   2C9
0392:  BCF    0A.3
0393:  BSF    0A.4
0394:  GOTO   097 (RETURN)
.................... }
.................... 
.................... void SSD1306_StartScrollRight(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_RIGHT_HORIZONTAL_SCROLL);
....................   ssd1306_command(0X00);
....................   ssd1306_command(start);  // start page
....................   ssd1306_command(0X00);
....................   ssd1306_command(stop);   // end page
....................   ssd1306_command(0X00);
....................   ssd1306_command(0XFF);
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_StartScrollLeft(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_LEFT_HORIZONTAL_SCROLL);
....................   ssd1306_command(0X00);
....................   ssd1306_command(start);
....................   ssd1306_command(0X00);
....................   ssd1306_command(stop);
....................   ssd1306_command(0X00);
....................   ssd1306_command(0XFF);
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_StartScrollDiagRight(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA);
....................   ssd1306_command(0X00);
....................   ssd1306_command(SSD1306_LCDHEIGHT);
....................   ssd1306_command(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL);
....................   ssd1306_command(0X00);
....................   ssd1306_command(start);
....................   ssd1306_command(0X00);
....................   ssd1306_command(stop);
....................   ssd1306_command(0X01);
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_StartScrollDiagLeft(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA);
....................   ssd1306_command(0X00);
....................   ssd1306_command(SSD1306_LCDHEIGHT);
....................   ssd1306_command(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL);
....................   ssd1306_command(0X00);
....................   ssd1306_command(start);
....................   ssd1306_command(0X00);
....................   ssd1306_command(stop);
....................   ssd1306_command(0X01);
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_StopScroll(void) {
....................   ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
.................... }
.................... 
.................... void SSD1306_Dim(int1 dim) {
....................   uint8_t contrast;
....................   if (dim)
....................     contrast = 0; // Dimmed display
....................   else {
....................     if (_vccstate == SSD1306_EXTERNALVCC)
....................       contrast = 0x9F;
....................     else
....................       contrast = 0xCF;
....................   }
....................   // the range of contrast to too small to be really useful
....................   // it is useful to dim the display
....................   ssd1306_command(SSD1306_SETCONTRAST);
....................   ssd1306_command(contrast);
.................... }
.................... 
.................... void SSD1306_SetTextWrap(int1 w) {
....................   wrap = w;
.................... }
.................... 
.................... void SSD1306_InvertDisplay(int1 i) {
....................   if (i)
....................     ssd1306_command(SSD1306_INVERTDISPLAY_);
....................   else
....................     ssd1306_command(SSD1306_NORMALDISPLAY);
.................... }
.................... 
.................... void SSD1306_GotoXY(uint8_t x, uint8_t y) {
....................   if((x > 21) || y > 8)
*
048D:  BSF    03.5
048E:  MOVF   2E,W
048F:  SUBLW  15
0490:  BTFSS  03.0
0491:  GOTO   495
0492:  MOVF   2F,W
0493:  SUBLW  08
0494:  BTFSS  03.0
....................     return;
0495:  GOTO   49E
....................   x_pos = x;
0496:  MOVF   2E,W
0497:  BCF    03.5
0498:  MOVWF  2E
....................   y_pos = y;
0499:  BSF    03.5
049A:  MOVF   2F,W
049B:  BCF    03.5
049C:  MOVWF  2F
049D:  BSF    03.5
049E:  BCF    03.5
049F:  RETURN
.................... }
.................... 
.................... void SSD1306_PutC(uint8_t c) {
....................   uint8_t font_c;
....................   if((c < ' ') || (c > '~'))
*
04DE:  BSF    03.5
04DF:  MOVF   31,W
04E0:  SUBLW  1F
04E1:  BTFSC  03.0
04E2:  GOTO   4E7
04E3:  MOVF   31,W
04E4:  SUBLW  7E
04E5:  BTFSC  03.0
04E6:  GOTO   4E9
....................     c = '?';
04E7:  MOVLW  3F
04E8:  MOVWF  31
....................   ssd1306_command(SSD1306_COLUMNADDR);
04E9:  MOVLW  21
04EA:  MOVWF  37
04EB:  BCF    03.5
04EC:  CALL   2C9
....................   ssd1306_command(6 * (x_pos - 1));
04ED:  MOVLW  01
04EE:  SUBWF  2E,W
04EF:  BSF    03.5
04F0:  MOVWF  34
04F1:  MOVLW  06
04F2:  MOVWF  36
04F3:  MOVF   34,W
04F4:  MOVWF  37
04F5:  BCF    03.5
04F6:  CALL   4A0
04F7:  MOVF   78,W
04F8:  BSF    03.5
04F9:  MOVWF  34
04FA:  MOVWF  37
04FB:  BCF    03.5
04FC:  CALL   2C9
....................   ssd1306_command(6 * (x_pos - 1) + 4); // Column end address (127 = reset)
04FD:  MOVLW  01
04FE:  SUBWF  2E,W
04FF:  BSF    03.5
0500:  MOVWF  34
0501:  MOVLW  06
0502:  MOVWF  36
0503:  MOVF   34,W
0504:  MOVWF  37
0505:  BCF    03.5
0506:  CALL   4A0
0507:  MOVLW  04
0508:  ADDWF  78,W
0509:  BSF    03.5
050A:  MOVWF  34
050B:  MOVWF  37
050C:  BCF    03.5
050D:  CALL   2C9
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
050E:  MOVLW  22
050F:  BSF    03.5
0510:  MOVWF  37
0511:  BCF    03.5
0512:  CALL   2C9
....................   ssd1306_command(y_pos - 1); // Page start address (0 = reset)
0513:  MOVLW  01
0514:  SUBWF  2F,W
0515:  BSF    03.5
0516:  MOVWF  34
0517:  MOVWF  37
0518:  BCF    03.5
0519:  CALL   2C9
....................   ssd1306_command(y_pos - 1); // Page end address
051A:  MOVLW  01
051B:  SUBWF  2F,W
051C:  BSF    03.5
051D:  MOVWF  34
051E:  MOVWF  37
051F:  BCF    03.5
0520:  CALL   2C9
....................   
....................   I2C_Start(SSD1306_STREAM);
0521:  BSF    03.5
0522:  BSF    11.0
0523:  BTFSC  11.0
0524:  GOTO   523
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
0525:  BCF    03.5
0526:  MOVF   2C,W
0527:  BSF    03.5
0528:  MOVWF  39
0529:  BCF    03.5
052A:  CALL   2B7
....................   I2C_Write(SSD1306_STREAM, 0x40);
052B:  MOVLW  40
052C:  BSF    03.5
052D:  MOVWF  39
052E:  BCF    03.5
052F:  CALL   2B7
....................   
....................   for(uint8_t i = 0; i < 5; i++ ) {
0530:  BSF    03.5
0531:  CLRF   33
0532:  MOVF   33,W
0533:  SUBLW  04
0534:  BTFSS  03.0
0535:  GOTO   562
....................     if(c < 'S')
0536:  MOVF   31,W
0537:  SUBLW  52
0538:  BTFSS  03.0
0539:  GOTO   54B
....................       font_c = font[(c - 32) * 5 + i];
053A:  MOVLW  20
053B:  SUBWF  31,W
053C:  MOVWF  35
053D:  MOVWF  36
053E:  MOVLW  05
053F:  MOVWF  37
0540:  BCF    03.5
0541:  CALL   4A0
0542:  BSF    03.5
0543:  MOVF   33,W
0544:  ADDWF  78,W
0545:  BCF    03.5
0546:  CALL   04F
0547:  MOVWF  78
0548:  BSF    03.5
0549:  MOVWF  32
054A:  GOTO   55B
....................     else
....................       font_c = font2[(c - 'S') * 5 + i];
054B:  MOVLW  53
054C:  SUBWF  31,W
054D:  MOVWF  35
054E:  MOVWF  36
054F:  MOVLW  05
0550:  MOVWF  37
0551:  BCF    03.5
0552:  CALL   4A0
0553:  BSF    03.5
0554:  MOVF   33,W
0555:  ADDWF  78,W
0556:  BCF    03.5
0557:  CALL   155
0558:  MOVWF  78
0559:  BSF    03.5
055A:  MOVWF  32
....................   
....................     I2C_Write(SSD1306_STREAM, font_c);
055B:  MOVF   32,W
055C:  MOVWF  39
055D:  BCF    03.5
055E:  CALL   2B7
055F:  BSF    03.5
0560:  INCF   33,F
0561:  GOTO   532
....................   }
....................   I2C_Stop(SSD1306_STREAM);
0562:  BSF    11.2
0563:  BTFSC  11.2
0564:  GOTO   563
.................... 
....................   x_pos = x_pos % 21 + 1;
0565:  BCF    03.5
0566:  MOVF   2E,W
0567:  BSF    03.5
0568:  MOVWF  34
0569:  MOVLW  15
056A:  MOVWF  35
056B:  BCF    03.5
056C:  CALL   4C7
056D:  MOVLW  01
056E:  ADDWF  77,W
056F:  MOVWF  2E
....................   if (wrap && (x_pos == 1))
0570:  BTFSS  70.0
0571:  GOTO   578
0572:  DECFSZ 2E,W
0573:  GOTO   578
....................     y_pos = y_pos % 8 + 1;
0574:  MOVF   2F,W
0575:  ANDLW  07
0576:  ADDLW  01
0577:  MOVWF  2F
0578:  RETURN
.................... 
.................... }
.................... 
.................... void SSD1306_PutCustomC(char *c) {
....................   uint8_t line;
....................   ssd1306_command(SSD1306_COLUMNADDR);
....................   ssd1306_command(6 * (x_pos - 1));
....................   ssd1306_command(6 * (x_pos - 1) + 4); // Column end address (127 = reset)
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
....................   ssd1306_command(y_pos - 1); // Page start address (0 = reset)
....................   ssd1306_command(y_pos - 1); // Page end address
....................   
....................   I2C_Start(SSD1306_STREAM);
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
....................   I2C_Write(SSD1306_STREAM, 0x40);
....................   
....................   for(uint8_t i = 0; i < 5; i++ ) {
....................     line = c[i];
....................     I2C_Write(SSD1306_STREAM, line);
....................   }
....................   I2C_Stop(SSD1306_STREAM);
.................... 
....................   x_pos = x_pos % 21 + 1;
....................   if (wrap && (x_pos == 1))
....................     y_pos = y_pos % 8 + 1;
.................... 
.................... }
.................... 
.................... void SSD1306_ClearDisplay() {
....................   
....................   for(int i = 0; i < 32; i++) {
*
03B7:  BSF    03.5
03B8:  CLRF   2E
03B9:  MOVF   2E,W
03BA:  SUBLW  1F
03BB:  BTFSS  03.0
03BC:  GOTO   44F
....................    dispx1[i] = 0;
03BD:  MOVF   2E,W
03BE:  MOVWF  31
03BF:  CLRF   32
03C0:  CLRF   34
03C1:  MOVLW  30
03C2:  MOVWF  33
03C3:  BCF    03.5
03C4:  CALL   395
....................    dispx2[i] = 0;
03C5:  BSF    03.5
03C6:  MOVF   2E,W
03C7:  MOVWF  31
03C8:  CLRF   32
03C9:  CLRF   34
03CA:  MOVLW  34
03CB:  MOVWF  33
03CC:  BCF    03.5
03CD:  CALL   395
....................    dispx3[i] = 0;
03CE:  BSF    03.5
03CF:  MOVF   2E,W
03D0:  MOVWF  31
03D1:  CLRF   32
03D2:  CLRF   34
03D3:  MOVLW  38
03D4:  MOVWF  33
03D5:  BCF    03.5
03D6:  CALL   395
....................    dispx4[i] = 0;
03D7:  BSF    03.5
03D8:  MOVF   2E,W
03D9:  MOVWF  31
03DA:  CLRF   32
03DB:  CLRF   34
03DC:  MOVLW  3C
03DD:  MOVWF  33
03DE:  BCF    03.5
03DF:  CALL   395
....................    dispx5[i] = 0;
03E0:  BSF    03.5
03E1:  MOVF   2E,W
03E2:  MOVWF  31
03E3:  CLRF   32
03E4:  CLRF   34
03E5:  MOVLW  40
03E6:  MOVWF  33
03E7:  BCF    03.5
03E8:  CALL   395
....................    dispx6[i] = 0;
03E9:  BSF    03.5
03EA:  MOVF   2E,W
03EB:  MOVWF  31
03EC:  CLRF   32
03ED:  CLRF   34
03EE:  MOVLW  44
03EF:  MOVWF  33
03F0:  BCF    03.5
03F1:  CALL   395
....................    dispx7[i] = 0;
03F2:  BSF    03.5
03F3:  MOVF   2E,W
03F4:  MOVWF  31
03F5:  CLRF   32
03F6:  CLRF   34
03F7:  MOVLW  48
03F8:  MOVWF  33
03F9:  BCF    03.5
03FA:  CALL   395
....................    dispx8[i] = 0;
03FB:  BSF    03.5
03FC:  MOVF   2E,W
03FD:  MOVWF  31
03FE:  CLRF   32
03FF:  CLRF   34
0400:  MOVLW  4C
0401:  MOVWF  33
0402:  BCF    03.5
0403:  CALL   395
....................    dispx9[i] = 0;
0404:  BSF    03.5
0405:  MOVF   2E,W
0406:  MOVWF  31
0407:  CLRF   32
0408:  CLRF   34
0409:  MOVLW  50
040A:  MOVWF  33
040B:  BCF    03.5
040C:  CALL   395
....................    dispx10[i] = 0;
040D:  BSF    03.5
040E:  MOVF   2E,W
040F:  MOVWF  31
0410:  CLRF   32
0411:  CLRF   34
0412:  MOVLW  54
0413:  MOVWF  33
0414:  BCF    03.5
0415:  CALL   395
....................    dispx11[i] = 0;
0416:  BSF    03.5
0417:  MOVF   2E,W
0418:  MOVWF  31
0419:  CLRF   32
041A:  CLRF   34
041B:  MOVLW  58
041C:  MOVWF  33
041D:  BCF    03.5
041E:  CALL   395
....................    dispx12[i] = 0;
041F:  BSF    03.5
0420:  MOVF   2E,W
0421:  MOVWF  31
0422:  CLRF   32
0423:  CLRF   34
0424:  MOVLW  5C
0425:  MOVWF  33
0426:  BCF    03.5
0427:  CALL   395
....................    dispx13[i] = 0;
0428:  BSF    03.5
0429:  MOVF   2E,W
042A:  MOVWF  31
042B:  CLRF   32
042C:  CLRF   34
042D:  MOVLW  60
042E:  MOVWF  33
042F:  BCF    03.5
0430:  CALL   395
....................    dispx14[i] = 0;
0431:  BSF    03.5
0432:  MOVF   2E,W
0433:  MOVWF  31
0434:  CLRF   32
0435:  CLRF   34
0436:  MOVLW  64
0437:  MOVWF  33
0438:  BCF    03.5
0439:  CALL   395
....................    dispx15[i] = 0;
043A:  BSF    03.5
043B:  MOVF   2E,W
043C:  MOVWF  31
043D:  CLRF   32
043E:  CLRF   34
043F:  MOVLW  68
0440:  MOVWF  33
0441:  BCF    03.5
0442:  CALL   395
....................    dispx16[i] = 0;
0443:  BSF    03.5
0444:  MOVF   2E,W
0445:  MOVWF  31
0446:  CLRF   32
0447:  CLRF   34
0448:  MOVLW  6C
0449:  MOVWF  33
044A:  BCF    03.5
044B:  CALL   395
044C:  BSF    03.5
044D:  INCF   2E,F
044E:  GOTO   3B9
....................   }
.................... 
....................   ssd1306_command(SSD1306_COLUMNADDR);
044F:  MOVLW  21
0450:  MOVWF  37
0451:  BCF    03.5
0452:  CALL   2C9
....................   ssd1306_command(0);    // Column start address
0453:  BSF    03.5
0454:  CLRF   37
0455:  BCF    03.5
0456:  CALL   2C9
....................   #if defined SSD1306_128_64 || defined SSD1306_128_32
....................   ssd1306_command(127);  // Column end address
0457:  MOVLW  7F
0458:  BSF    03.5
0459:  MOVWF  37
045A:  BCF    03.5
045B:  CALL   2C9
....................   #else
....................     ssd1306_command(95); // Column end address
....................   #endif
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
045C:  MOVLW  22
045D:  BSF    03.5
045E:  MOVWF  37
045F:  BCF    03.5
0460:  CALL   2C9
....................   ssd1306_command(0);   // Page start address (0 = reset)
0461:  BSF    03.5
0462:  CLRF   37
0463:  BCF    03.5
0464:  CALL   2C9
....................   #if defined SSD1306_128_64
....................   ssd1306_command(7);   // Page end address
0465:  MOVLW  07
0466:  BSF    03.5
0467:  MOVWF  37
0468:  BCF    03.5
0469:  CALL   2C9
....................   #elif defined SSD1306_128_32
....................   ssd1306_command(3);   // Page end address
....................   #elif defined SSD1306_96_16
....................   ssd1306_command(1);   // Page end address
....................   #endif
.................... 
....................   I2C_Start(SSD1306_STREAM);
046A:  BSF    03.5
046B:  BSF    11.0
046C:  BTFSC  11.0
046D:  GOTO   46C
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
046E:  BCF    03.5
046F:  MOVF   2C,W
0470:  BSF    03.5
0471:  MOVWF  39
0472:  BCF    03.5
0473:  CALL   2B7
....................   I2C_Write(SSD1306_STREAM, 0x40);
0474:  MOVLW  40
0475:  BSF    03.5
0476:  MOVWF  39
0477:  BCF    03.5
0478:  CALL   2B7
.................... 
....................   for(uint16_t i = 0; i < SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8; i++ )
0479:  BSF    03.5
047A:  CLRF   30
047B:  CLRF   2F
047C:  MOVF   30,W
047D:  SUBLW  03
047E:  BTFSS  03.0
047F:  GOTO   488
....................     I2C_Write(SSD1306_STREAM, 0);
0480:  CLRF   39
0481:  BCF    03.5
0482:  CALL   2B7
0483:  BSF    03.5
0484:  INCF   2F,F
0485:  BTFSC  03.2
0486:  INCF   30,F
0487:  GOTO   47C
.................... 
....................   I2C_Stop(SSD1306_STREAM);
0488:  BSF    11.2
0489:  BTFSC  11.2
048A:  GOTO   489
048B:  BCF    03.5
048C:  RETURN
.................... 
.................... }
.................... 
.................... void SSD1306_FillScreen() {
.................... 
....................   ssd1306_command(SSD1306_COLUMNADDR);
....................   ssd1306_command(0);    // Column start address
....................   #if defined SSD1306_128_64 || defined SSD1306_128_32
....................   ssd1306_command(127);  // Column end address
....................   #else
....................     ssd1306_command(95); // Column end address
....................   #endif
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
....................   ssd1306_command(0);   // Page start address (0 = reset)
....................   #if defined SSD1306_128_64
....................   ssd1306_command(7);   // Page end address
....................   #elif defined SSD1306_128_32
....................   ssd1306_command(3);   // Page end address
....................   #elif defined SSD1306_96_16
....................   ssd1306_command(1);   // Page end address
....................   #endif
.................... 
....................   I2C_Start(SSD1306_STREAM);
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
....................   I2C_Write(SSD1306_STREAM, 0x40);
.................... 
....................   for(uint16_t i = 0; i < SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8; i++ )
....................     I2C_Write(SSD1306_STREAM, 0xFF);
.................... 
....................   I2C_Stop(SSD1306_STREAM);
.................... 
.................... }
.................... 
.................... void SSD1306_UPDATEDISPLAY() {
*
0DCD:  BSF    03.5
0DCE:  BCF    2E.0
0DCF:  BCF    2E.1
0DD0:  CLRF   2F
....................    
....................    int1 bufx1 = 0, bufx2 = 0;
....................    int8 initj = 0;
....................    for(int k = 0; k < 8; k++)
0DD1:  CLRF   30
0DD2:  MOVF   30,W
0DD3:  SUBLW  07
0DD4:  BTFSS  03.0
0DD5:  GOTO   769
....................    {
....................       if(K < 3) {
0DD6:  MOVF   30,W
0DD7:  SUBLW  02
0DD8:  BTFSS  03.0
0DD9:  GOTO   5DD
....................          initj = 6;
0DDA:  MOVLW  06
0DDB:  MOVWF  2F
....................       } else {
0DDC:  GOTO   5DF
....................          initj = 1;
0DDD:  MOVLW  01
0DDE:  MOVWF  2F
....................       }
....................       for(int j = initj; j < 32; j++)
0DDF:  MOVF   2F,W
0DE0:  MOVWF  31
0DE1:  MOVF   31,W
0DE2:  SUBLW  1F
0DE3:  BTFSS  03.0
0DE4:  GOTO   767
....................       {
....................          ssd1306_command(SSD1306_COLUMNADDR);
0DE5:  MOVLW  21
0DE6:  MOVWF  37
0DE7:  BCF    0A.3
0DE8:  BCF    03.5
0DE9:  CALL   2C9
0DEA:  BSF    0A.3
....................          ssd1306_command(0 + 4 * j);
0DEB:  BSF    03.5
0DEC:  RLF    31,W
0DED:  MOVWF  36
0DEE:  RLF    36,F
0DEF:  MOVLW  FC
0DF0:  ANDWF  36,F
0DF1:  MOVF   36,W
0DF2:  MOVWF  37
0DF3:  BCF    0A.3
0DF4:  BCF    03.5
0DF5:  CALL   2C9
0DF6:  BSF    0A.3
....................          ssd1306_command(3 + 4 * j);
0DF7:  BSF    03.5
0DF8:  RLF    31,W
0DF9:  MOVWF  77
0DFA:  RLF    77,F
0DFB:  MOVLW  FC
0DFC:  ANDWF  77,F
0DFD:  MOVF   77,W
0DFE:  ADDLW  03
0DFF:  MOVWF  36
0E00:  MOVWF  37
0E01:  BCF    0A.3
0E02:  BCF    03.5
0E03:  CALL   2C9
0E04:  BSF    0A.3
....................          
....................          ssd1306_command(SSD1306_PAGEADDR);
0E05:  MOVLW  22
0E06:  BSF    03.5
0E07:  MOVWF  37
0E08:  BCF    0A.3
0E09:  BCF    03.5
0E0A:  CALL   2C9
0E0B:  BSF    0A.3
....................          ssd1306_command(k);
0E0C:  BSF    03.5
0E0D:  MOVF   30,W
0E0E:  MOVWF  37
0E0F:  BCF    0A.3
0E10:  BCF    03.5
0E11:  CALL   2C9
0E12:  BSF    0A.3
....................          ssd1306_command(k);
0E13:  BSF    03.5
0E14:  MOVF   30,W
0E15:  MOVWF  37
0E16:  BCF    0A.3
0E17:  BCF    03.5
0E18:  CALL   2C9
0E19:  BSF    0A.3
....................          
....................          I2C_Start(SSD1306_STREAM);
0E1A:  BSF    03.5
0E1B:  BSF    11.0
0E1C:  BTFSC  11.0
0E1D:  GOTO   61C
....................          I2C_Write(SSD1306_STREAM, _i2caddr);
0E1E:  BCF    03.5
0E1F:  MOVF   2C,W
0E20:  BSF    03.5
0E21:  MOVWF  39
0E22:  BCF    0A.3
0E23:  BCF    03.5
0E24:  CALL   2B7
0E25:  BSF    0A.3
....................          I2C_Write(SSD1306_STREAM, 0x40);
0E26:  MOVLW  40
0E27:  BSF    03.5
0E28:  MOVWF  39
0E29:  BCF    0A.3
0E2A:  BCF    03.5
0E2B:  CALL   2B7
0E2C:  BSF    0A.3
....................          
....................          if(k == 0) {
0E2D:  BSF    03.5
0E2E:  MOVF   30,F
0E2F:  BTFSS  03.2
0E30:  GOTO   64C
....................             bufx1 = dispx1[j];
0E31:  MOVF   31,W
0E32:  MOVWF  36
0E33:  CLRF   38
0E34:  MOVLW  30
0E35:  MOVWF  37
0E36:  BCF    0A.3
0E37:  BCF    03.5
0E38:  CALL   7C0
0E39:  BSF    0A.3
0E3A:  BSF    03.5
0E3B:  BCF    2E.0
0E3C:  BTFSC  78.0
0E3D:  BSF    2E.0
....................             bufx2 = dispx2[j];
0E3E:  MOVF   31,W
0E3F:  MOVWF  36
0E40:  CLRF   38
0E41:  MOVLW  34
0E42:  MOVWF  37
0E43:  BCF    0A.3
0E44:  BCF    03.5
0E45:  CALL   7C0
0E46:  BSF    0A.3
0E47:  BSF    03.5
0E48:  BCF    2E.1
0E49:  BTFSC  78.0
0E4A:  BSF    2E.1
....................          } else if(k == 1) {
0E4B:  GOTO   722
0E4C:  DECFSZ 30,W
0E4D:  GOTO   669
....................             bufx1 = dispx3[j];
0E4E:  MOVF   31,W
0E4F:  MOVWF  36
0E50:  CLRF   38
0E51:  MOVLW  38
0E52:  MOVWF  37
0E53:  BCF    0A.3
0E54:  BCF    03.5
0E55:  CALL   7C0
0E56:  BSF    0A.3
0E57:  BSF    03.5
0E58:  BCF    2E.0
0E59:  BTFSC  78.0
0E5A:  BSF    2E.0
....................             bufx2 = dispx4[j];
0E5B:  MOVF   31,W
0E5C:  MOVWF  36
0E5D:  CLRF   38
0E5E:  MOVLW  3C
0E5F:  MOVWF  37
0E60:  BCF    0A.3
0E61:  BCF    03.5
0E62:  CALL   7C0
0E63:  BSF    0A.3
0E64:  BSF    03.5
0E65:  BCF    2E.1
0E66:  BTFSC  78.0
0E67:  BSF    2E.1
....................          } else if(k == 2) {
0E68:  GOTO   722
0E69:  MOVF   30,W
0E6A:  SUBLW  02
0E6B:  BTFSS  03.2
0E6C:  GOTO   688
....................             bufx1 = dispx5[j];
0E6D:  MOVF   31,W
0E6E:  MOVWF  36
0E6F:  CLRF   38
0E70:  MOVLW  40
0E71:  MOVWF  37
0E72:  BCF    0A.3
0E73:  BCF    03.5
0E74:  CALL   7C0
0E75:  BSF    0A.3
0E76:  BSF    03.5
0E77:  BCF    2E.0
0E78:  BTFSC  78.0
0E79:  BSF    2E.0
....................             bufx2 = dispx6[j];
0E7A:  MOVF   31,W
0E7B:  MOVWF  36
0E7C:  CLRF   38
0E7D:  MOVLW  44
0E7E:  MOVWF  37
0E7F:  BCF    0A.3
0E80:  BCF    03.5
0E81:  CALL   7C0
0E82:  BSF    0A.3
0E83:  BSF    03.5
0E84:  BCF    2E.1
0E85:  BTFSC  78.0
0E86:  BSF    2E.1
....................          } else if(k == 3) {
0E87:  GOTO   722
0E88:  MOVF   30,W
0E89:  SUBLW  03
0E8A:  BTFSS  03.2
0E8B:  GOTO   6A7
....................             bufx1 = dispx7[j];
0E8C:  MOVF   31,W
0E8D:  MOVWF  36
0E8E:  CLRF   38
0E8F:  MOVLW  48
0E90:  MOVWF  37
0E91:  BCF    0A.3
0E92:  BCF    03.5
0E93:  CALL   7C0
0E94:  BSF    0A.3
0E95:  BSF    03.5
0E96:  BCF    2E.0
0E97:  BTFSC  78.0
0E98:  BSF    2E.0
....................             bufx2 = dispx8[j];
0E99:  MOVF   31,W
0E9A:  MOVWF  36
0E9B:  CLRF   38
0E9C:  MOVLW  4C
0E9D:  MOVWF  37
0E9E:  BCF    0A.3
0E9F:  BCF    03.5
0EA0:  CALL   7C0
0EA1:  BSF    0A.3
0EA2:  BSF    03.5
0EA3:  BCF    2E.1
0EA4:  BTFSC  78.0
0EA5:  BSF    2E.1
....................          } else if(k == 4) {
0EA6:  GOTO   722
0EA7:  MOVF   30,W
0EA8:  SUBLW  04
0EA9:  BTFSS  03.2
0EAA:  GOTO   6C6
....................             bufx1 = dispx9[j];
0EAB:  MOVF   31,W
0EAC:  MOVWF  36
0EAD:  CLRF   38
0EAE:  MOVLW  50
0EAF:  MOVWF  37
0EB0:  BCF    0A.3
0EB1:  BCF    03.5
0EB2:  CALL   7C0
0EB3:  BSF    0A.3
0EB4:  BSF    03.5
0EB5:  BCF    2E.0
0EB6:  BTFSC  78.0
0EB7:  BSF    2E.0
....................             bufx2 = dispx10[j];
0EB8:  MOVF   31,W
0EB9:  MOVWF  36
0EBA:  CLRF   38
0EBB:  MOVLW  54
0EBC:  MOVWF  37
0EBD:  BCF    0A.3
0EBE:  BCF    03.5
0EBF:  CALL   7C0
0EC0:  BSF    0A.3
0EC1:  BSF    03.5
0EC2:  BCF    2E.1
0EC3:  BTFSC  78.0
0EC4:  BSF    2E.1
....................          } else if(k == 5) {
0EC5:  GOTO   722
0EC6:  MOVF   30,W
0EC7:  SUBLW  05
0EC8:  BTFSS  03.2
0EC9:  GOTO   6E5
....................             bufx1 = dispx11[j];
0ECA:  MOVF   31,W
0ECB:  MOVWF  36
0ECC:  CLRF   38
0ECD:  MOVLW  58
0ECE:  MOVWF  37
0ECF:  BCF    0A.3
0ED0:  BCF    03.5
0ED1:  CALL   7C0
0ED2:  BSF    0A.3
0ED3:  BSF    03.5
0ED4:  BCF    2E.0
0ED5:  BTFSC  78.0
0ED6:  BSF    2E.0
....................             bufx2 = dispx12[j];
0ED7:  MOVF   31,W
0ED8:  MOVWF  36
0ED9:  CLRF   38
0EDA:  MOVLW  5C
0EDB:  MOVWF  37
0EDC:  BCF    0A.3
0EDD:  BCF    03.5
0EDE:  CALL   7C0
0EDF:  BSF    0A.3
0EE0:  BSF    03.5
0EE1:  BCF    2E.1
0EE2:  BTFSC  78.0
0EE3:  BSF    2E.1
....................          } else if(k == 6) {
0EE4:  GOTO   722
0EE5:  MOVF   30,W
0EE6:  SUBLW  06
0EE7:  BTFSS  03.2
0EE8:  GOTO   704
....................             bufx1 = dispx13[j];
0EE9:  MOVF   31,W
0EEA:  MOVWF  36
0EEB:  CLRF   38
0EEC:  MOVLW  60
0EED:  MOVWF  37
0EEE:  BCF    0A.3
0EEF:  BCF    03.5
0EF0:  CALL   7C0
0EF1:  BSF    0A.3
0EF2:  BSF    03.5
0EF3:  BCF    2E.0
0EF4:  BTFSC  78.0
0EF5:  BSF    2E.0
....................             bufx2 = dispx14[j];
0EF6:  MOVF   31,W
0EF7:  MOVWF  36
0EF8:  CLRF   38
0EF9:  MOVLW  64
0EFA:  MOVWF  37
0EFB:  BCF    0A.3
0EFC:  BCF    03.5
0EFD:  CALL   7C0
0EFE:  BSF    0A.3
0EFF:  BSF    03.5
0F00:  BCF    2E.1
0F01:  BTFSC  78.0
0F02:  BSF    2E.1
....................          } else if(k == 7) {
0F03:  GOTO   722
0F04:  MOVF   30,W
0F05:  SUBLW  07
0F06:  BTFSS  03.2
0F07:  GOTO   722
....................             bufx1 = dispx15[j];
0F08:  MOVF   31,W
0F09:  MOVWF  36
0F0A:  CLRF   38
0F0B:  MOVLW  68
0F0C:  MOVWF  37
0F0D:  BCF    0A.3
0F0E:  BCF    03.5
0F0F:  CALL   7C0
0F10:  BSF    0A.3
0F11:  BSF    03.5
0F12:  BCF    2E.0
0F13:  BTFSC  78.0
0F14:  BSF    2E.0
....................             bufx2 = dispx16[j];
0F15:  MOVF   31,W
0F16:  MOVWF  36
0F17:  CLRF   38
0F18:  MOVLW  6C
0F19:  MOVWF  37
0F1A:  BCF    0A.3
0F1B:  BCF    03.5
0F1C:  CALL   7C0
0F1D:  BSF    0A.3
0F1E:  BSF    03.5
0F1F:  BCF    2E.1
0F20:  BTFSC  78.0
0F21:  BSF    2E.1
....................          }
....................          
....................          if(bufx1 == 1) {
0F22:  BTFSS  2E.0
0F23:  GOTO   744
....................          
....................             if(bufx2 == 1) {
0F24:  BTFSS  2E.1
0F25:  GOTO   735
....................                for(int i = 0; i < 4; i++)
0F26:  CLRF   32
0F27:  MOVF   32,W
0F28:  SUBLW  03
0F29:  BTFSS  03.0
0F2A:  GOTO   734
....................                I2C_Write(SSD1306_STREAM, 0xFF);
0F2B:  MOVLW  FF
0F2C:  MOVWF  39
0F2D:  BCF    0A.3
0F2E:  BCF    03.5
0F2F:  CALL   2B7
0F30:  BSF    0A.3
0F31:  BSF    03.5
0F32:  INCF   32,F
0F33:  GOTO   727
....................             } else {
0F34:  GOTO   743
....................                for(int i = 0; i < 4; i++)
0F35:  CLRF   33
0F36:  MOVF   33,W
0F37:  SUBLW  03
0F38:  BTFSS  03.0
0F39:  GOTO   743
....................                I2C_Write(SSD1306_STREAM, 0x0F);
0F3A:  MOVLW  0F
0F3B:  MOVWF  39
0F3C:  BCF    0A.3
0F3D:  BCF    03.5
0F3E:  CALL   2B7
0F3F:  BSF    0A.3
0F40:  BSF    03.5
0F41:  INCF   33,F
0F42:  GOTO   736
....................             }
....................          } else {
0F43:  GOTO   762
....................             if(bufx2 == 1) {
0F44:  BTFSS  2E.1
0F45:  GOTO   755
....................                for(int i = 0; i < 4; i++)
0F46:  CLRF   34
0F47:  MOVF   34,W
0F48:  SUBLW  03
0F49:  BTFSS  03.0
0F4A:  GOTO   754
....................                I2C_Write(SSD1306_STREAM, 0xF0);
0F4B:  MOVLW  F0
0F4C:  MOVWF  39
0F4D:  BCF    0A.3
0F4E:  BCF    03.5
0F4F:  CALL   2B7
0F50:  BSF    0A.3
0F51:  BSF    03.5
0F52:  INCF   34,F
0F53:  GOTO   747
....................             } else {
0F54:  GOTO   762
....................                for(int i = 0; i < 4; i++)
0F55:  CLRF   35
0F56:  MOVF   35,W
0F57:  SUBLW  03
0F58:  BTFSS  03.0
0F59:  GOTO   762
....................                I2C_Write(SSD1306_STREAM, 0x00);
0F5A:  CLRF   39
0F5B:  BCF    0A.3
0F5C:  BCF    03.5
0F5D:  CALL   2B7
0F5E:  BSF    0A.3
0F5F:  BSF    03.5
0F60:  INCF   35,F
0F61:  GOTO   756
....................             }
....................          }
....................          I2C_Stop(SSD1306_STREAM);
0F62:  BSF    11.2
0F63:  BTFSC  11.2
0F64:  GOTO   763
0F65:  INCF   31,F
0F66:  GOTO   5E1
....................       }
0F67:  INCF   30,F
0F68:  GOTO   5D2
....................    }
0F69:  BCF    03.5
0F6A:  BCF    0A.3
0F6B:  BSF    0A.4
0F6C:  GOTO   255 (RETURN)
.................... }
.................... 
.................... void SSD1306_DRAWDOT(int8 axisx, int8 axisy) {
.................... 
....................    if (axisy == 1) {
*
0C9B:  BSF    03.5
0C9C:  DECFSZ 2F,W
0C9D:  GOTO   4AD
....................       dispx1[axisx - 1] = 1;
0C9E:  MOVLW  01
0C9F:  SUBWF  2E,W
0CA0:  MOVWF  30
0CA1:  MOVWF  31
0CA2:  MOVLW  01
0CA3:  MOVWF  32
0CA4:  CLRF   34
0CA5:  MOVLW  30
0CA6:  MOVWF  33
0CA7:  BCF    0A.3
0CA8:  BCF    03.5
0CA9:  CALL   395
0CAA:  BSF    0A.3
....................    } else if (axisy == 2) {
0CAB:  GOTO   5C8
0CAC:  BSF    03.5
0CAD:  MOVF   2F,W
0CAE:  SUBLW  02
0CAF:  BTFSS  03.2
0CB0:  GOTO   4C0
....................       dispx2[axisx - 1] = 1;
0CB1:  MOVLW  01
0CB2:  SUBWF  2E,W
0CB3:  MOVWF  30
0CB4:  MOVWF  31
0CB5:  MOVLW  01
0CB6:  MOVWF  32
0CB7:  CLRF   34
0CB8:  MOVLW  34
0CB9:  MOVWF  33
0CBA:  BCF    0A.3
0CBB:  BCF    03.5
0CBC:  CALL   395
0CBD:  BSF    0A.3
....................    } else if (axisy == 3) {
0CBE:  GOTO   5C8
0CBF:  BSF    03.5
0CC0:  MOVF   2F,W
0CC1:  SUBLW  03
0CC2:  BTFSS  03.2
0CC3:  GOTO   4D3
....................       dispx3[axisx - 1] = 1;
0CC4:  MOVLW  01
0CC5:  SUBWF  2E,W
0CC6:  MOVWF  30
0CC7:  MOVWF  31
0CC8:  MOVLW  01
0CC9:  MOVWF  32
0CCA:  CLRF   34
0CCB:  MOVLW  38
0CCC:  MOVWF  33
0CCD:  BCF    0A.3
0CCE:  BCF    03.5
0CCF:  CALL   395
0CD0:  BSF    0A.3
....................    } else if (axisy == 4) {
0CD1:  GOTO   5C8
0CD2:  BSF    03.5
0CD3:  MOVF   2F,W
0CD4:  SUBLW  04
0CD5:  BTFSS  03.2
0CD6:  GOTO   4E6
....................       dispx4[axisx - 1] = 1;
0CD7:  MOVLW  01
0CD8:  SUBWF  2E,W
0CD9:  MOVWF  30
0CDA:  MOVWF  31
0CDB:  MOVLW  01
0CDC:  MOVWF  32
0CDD:  CLRF   34
0CDE:  MOVLW  3C
0CDF:  MOVWF  33
0CE0:  BCF    0A.3
0CE1:  BCF    03.5
0CE2:  CALL   395
0CE3:  BSF    0A.3
....................    } else if (axisy == 5) {
0CE4:  GOTO   5C8
0CE5:  BSF    03.5
0CE6:  MOVF   2F,W
0CE7:  SUBLW  05
0CE8:  BTFSS  03.2
0CE9:  GOTO   4F9
....................       dispx5[axisx - 1] = 1;
0CEA:  MOVLW  01
0CEB:  SUBWF  2E,W
0CEC:  MOVWF  30
0CED:  MOVWF  31
0CEE:  MOVLW  01
0CEF:  MOVWF  32
0CF0:  CLRF   34
0CF1:  MOVLW  40
0CF2:  MOVWF  33
0CF3:  BCF    0A.3
0CF4:  BCF    03.5
0CF5:  CALL   395
0CF6:  BSF    0A.3
....................    } else if (axisy == 6) {
0CF7:  GOTO   5C8
0CF8:  BSF    03.5
0CF9:  MOVF   2F,W
0CFA:  SUBLW  06
0CFB:  BTFSS  03.2
0CFC:  GOTO   50C
....................       dispx6[axisx - 1] = 1;
0CFD:  MOVLW  01
0CFE:  SUBWF  2E,W
0CFF:  MOVWF  30
0D00:  MOVWF  31
0D01:  MOVLW  01
0D02:  MOVWF  32
0D03:  CLRF   34
0D04:  MOVLW  44
0D05:  MOVWF  33
0D06:  BCF    0A.3
0D07:  BCF    03.5
0D08:  CALL   395
0D09:  BSF    0A.3
....................    } else if (axisy == 7) {
0D0A:  GOTO   5C8
0D0B:  BSF    03.5
0D0C:  MOVF   2F,W
0D0D:  SUBLW  07
0D0E:  BTFSS  03.2
0D0F:  GOTO   51F
....................       dispx7[axisx - 1] = 1;
0D10:  MOVLW  01
0D11:  SUBWF  2E,W
0D12:  MOVWF  30
0D13:  MOVWF  31
0D14:  MOVLW  01
0D15:  MOVWF  32
0D16:  CLRF   34
0D17:  MOVLW  48
0D18:  MOVWF  33
0D19:  BCF    0A.3
0D1A:  BCF    03.5
0D1B:  CALL   395
0D1C:  BSF    0A.3
....................    } else if (axisy == 8) {
0D1D:  GOTO   5C8
0D1E:  BSF    03.5
0D1F:  MOVF   2F,W
0D20:  SUBLW  08
0D21:  BTFSS  03.2
0D22:  GOTO   532
....................       dispx8[axisx - 1] = 1;
0D23:  MOVLW  01
0D24:  SUBWF  2E,W
0D25:  MOVWF  30
0D26:  MOVWF  31
0D27:  MOVLW  01
0D28:  MOVWF  32
0D29:  CLRF   34
0D2A:  MOVLW  4C
0D2B:  MOVWF  33
0D2C:  BCF    0A.3
0D2D:  BCF    03.5
0D2E:  CALL   395
0D2F:  BSF    0A.3
....................    } else if (axisy == 9) {
0D30:  GOTO   5C8
0D31:  BSF    03.5
0D32:  MOVF   2F,W
0D33:  SUBLW  09
0D34:  BTFSS  03.2
0D35:  GOTO   545
....................       dispx9[axisx - 1] = 1;
0D36:  MOVLW  01
0D37:  SUBWF  2E,W
0D38:  MOVWF  30
0D39:  MOVWF  31
0D3A:  MOVLW  01
0D3B:  MOVWF  32
0D3C:  CLRF   34
0D3D:  MOVLW  50
0D3E:  MOVWF  33
0D3F:  BCF    0A.3
0D40:  BCF    03.5
0D41:  CALL   395
0D42:  BSF    0A.3
....................    } else if (axisy == 10) {
0D43:  GOTO   5C8
0D44:  BSF    03.5
0D45:  MOVF   2F,W
0D46:  SUBLW  0A
0D47:  BTFSS  03.2
0D48:  GOTO   558
....................       dispx10[axisx - 1] = 1;
0D49:  MOVLW  01
0D4A:  SUBWF  2E,W
0D4B:  MOVWF  30
0D4C:  MOVWF  31
0D4D:  MOVLW  01
0D4E:  MOVWF  32
0D4F:  CLRF   34
0D50:  MOVLW  54
0D51:  MOVWF  33
0D52:  BCF    0A.3
0D53:  BCF    03.5
0D54:  CALL   395
0D55:  BSF    0A.3
....................    } else if (axisy == 11) {
0D56:  GOTO   5C8
0D57:  BSF    03.5
0D58:  MOVF   2F,W
0D59:  SUBLW  0B
0D5A:  BTFSS  03.2
0D5B:  GOTO   56B
....................       dispx11[axisx - 1] = 1;
0D5C:  MOVLW  01
0D5D:  SUBWF  2E,W
0D5E:  MOVWF  30
0D5F:  MOVWF  31
0D60:  MOVLW  01
0D61:  MOVWF  32
0D62:  CLRF   34
0D63:  MOVLW  58
0D64:  MOVWF  33
0D65:  BCF    0A.3
0D66:  BCF    03.5
0D67:  CALL   395
0D68:  BSF    0A.3
....................    } else if (axisy == 12) {
0D69:  GOTO   5C8
0D6A:  BSF    03.5
0D6B:  MOVF   2F,W
0D6C:  SUBLW  0C
0D6D:  BTFSS  03.2
0D6E:  GOTO   57E
....................       dispx12[axisx - 1] = 1;
0D6F:  MOVLW  01
0D70:  SUBWF  2E,W
0D71:  MOVWF  30
0D72:  MOVWF  31
0D73:  MOVLW  01
0D74:  MOVWF  32
0D75:  CLRF   34
0D76:  MOVLW  5C
0D77:  MOVWF  33
0D78:  BCF    0A.3
0D79:  BCF    03.5
0D7A:  CALL   395
0D7B:  BSF    0A.3
....................    } else if (axisy == 13) {
0D7C:  GOTO   5C8
0D7D:  BSF    03.5
0D7E:  MOVF   2F,W
0D7F:  SUBLW  0D
0D80:  BTFSS  03.2
0D81:  GOTO   591
....................       dispx13[axisx - 1] = 1;
0D82:  MOVLW  01
0D83:  SUBWF  2E,W
0D84:  MOVWF  30
0D85:  MOVWF  31
0D86:  MOVLW  01
0D87:  MOVWF  32
0D88:  CLRF   34
0D89:  MOVLW  60
0D8A:  MOVWF  33
0D8B:  BCF    0A.3
0D8C:  BCF    03.5
0D8D:  CALL   395
0D8E:  BSF    0A.3
....................    } else if (axisy == 14) {
0D8F:  GOTO   5C8
0D90:  BSF    03.5
0D91:  MOVF   2F,W
0D92:  SUBLW  0E
0D93:  BTFSS  03.2
0D94:  GOTO   5A4
....................       dispx14[axisx - 1] = 1;
0D95:  MOVLW  01
0D96:  SUBWF  2E,W
0D97:  MOVWF  30
0D98:  MOVWF  31
0D99:  MOVLW  01
0D9A:  MOVWF  32
0D9B:  CLRF   34
0D9C:  MOVLW  64
0D9D:  MOVWF  33
0D9E:  BCF    0A.3
0D9F:  BCF    03.5
0DA0:  CALL   395
0DA1:  BSF    0A.3
....................    } else if (axisy == 15) {
0DA2:  GOTO   5C8
0DA3:  BSF    03.5
0DA4:  MOVF   2F,W
0DA5:  SUBLW  0F
0DA6:  BTFSS  03.2
0DA7:  GOTO   5B7
....................       dispx15[axisx - 1] = 1;
0DA8:  MOVLW  01
0DA9:  SUBWF  2E,W
0DAA:  MOVWF  30
0DAB:  MOVWF  31
0DAC:  MOVLW  01
0DAD:  MOVWF  32
0DAE:  CLRF   34
0DAF:  MOVLW  68
0DB0:  MOVWF  33
0DB1:  BCF    0A.3
0DB2:  BCF    03.5
0DB3:  CALL   395
0DB4:  BSF    0A.3
....................    } else if (axisy == 16) {
0DB5:  GOTO   5C8
0DB6:  BSF    03.5
0DB7:  MOVF   2F,W
0DB8:  SUBLW  10
0DB9:  BTFSS  03.2
0DBA:  GOTO   5C9
....................       dispx16[axisx - 1] = 1;
0DBB:  MOVLW  01
0DBC:  SUBWF  2E,W
0DBD:  MOVWF  30
0DBE:  MOVWF  31
0DBF:  MOVLW  01
0DC0:  MOVWF  32
0DC1:  CLRF   34
0DC2:  MOVLW  6C
0DC3:  MOVWF  33
0DC4:  BCF    0A.3
0DC5:  BCF    03.5
0DC6:  CALL   395
0DC7:  BSF    0A.3
0DC8:  BSF    03.5
....................    }
0DC9:  BCF    03.5
0DCA:  BCF    0A.3
0DCB:  BSF    0A.4
0DCC:  GOTO   247 (RETURN)
.................... }
.................... 
.................... #bit trig = porta.0
.................... #bit echo = porta.1
.................... 
.................... 
.................... 
.................... 
.................... int16 loop0 = 0;
.................... int16 loop1 = 0;
.................... int scantime = FALSE;
.................... int displaytime = 0;
.................... 
.................... int8 angle = 12;
.................... 
.................... int clear = 0;
.................... 
.................... int16 duration = 0;
.................... int8 distance = 0;
.................... 
.................... int measure = 0;
.................... 
.................... signed int rad = 0;
.................... float radf = 0;
.................... unsigned int8 posx = 0, posy = 0;
.................... unsigned int8 oledx = 0, oledy = 0;
.................... 
.................... int leftside = 0;
.................... 
.................... 
.................... 
.................... #INT_TIMER0                   //0.05ms timer interrupt
.................... void timer0_ovf()
.................... {
....................   set_timer0(0x06);
*
0238:  MOVLW  06
0239:  MOVWF  01
....................   if(loop0 == 0)
023A:  MOVF   71,F
023B:  BTFSS  03.2
023C:  GOTO   245
023D:  MOVF   72,F
023E:  BTFSS  03.2
023F:  GOTO   245
....................   {
....................    output_high(PIN_E0);
0240:  BSF    03.5
0241:  BCF    09.0
0242:  BCF    03.5
0243:  BSF    09.0
....................   } else if(loop0 == angle)
0244:  GOTO   250
0245:  MOVF   7B,W
0246:  SUBWF  71,W
0247:  BTFSS  03.2
0248:  GOTO   250
0249:  MOVF   72,F
024A:  BTFSS  03.2
024B:  GOTO   250
....................   {
....................    output_low(PIN_E0);
024C:  BSF    03.5
024D:  BCF    09.0
024E:  BCF    03.5
024F:  BCF    09.0
....................   } 
....................   
....................   
....................   if(loop0 < 400)
0250:  MOVF   72,W
0251:  SUBLW  01
0252:  BTFSS  03.0
0253:  GOTO   25E
0254:  BTFSS  03.2
0255:  GOTO   25A
0256:  MOVF   71,W
0257:  SUBLW  8F
0258:  BTFSS  03.0
0259:  GOTO   25E
....................   {
....................    loop0++;
025A:  INCF   71,F
025B:  BTFSC  03.2
025C:  INCF   72,F
....................   } else {
025D:  GOTO   260
....................    loop0 = 0;
025E:  CLRF   72
025F:  CLRF   71
....................   }
....................   
....................   
....................   
....................   if(loop1 < 5000)
0260:  MOVF   74,W
0261:  SUBLW  13
0262:  BTFSS  03.0
0263:  GOTO   26E
0264:  BTFSS  03.2
0265:  GOTO   26A
0266:  MOVF   73,W
0267:  SUBLW  87
0268:  BTFSS  03.0
0269:  GOTO   26E
....................   {
....................    loop1++;
026A:  INCF   73,F
026B:  BTFSC  03.2
026C:  INCF   74,F
....................   } else {
026D:  GOTO   28A
....................    if (scantime == 1 && angle < 42) {
026E:  DECFSZ 75,W
026F:  GOTO   27A
0270:  MOVF   7B,W
0271:  SUBLW  29
0272:  BTFSS  03.0
0273:  GOTO   27A
....................       angle++;
0274:  INCF   7B,F
....................       if (angle == 42) {
0275:  MOVF   7B,W
0276:  SUBLW  2A
0277:  BTFSC  03.2
....................          scantime = 0;
0278:  CLRF   75
....................       }
....................    } else if (scantime == 0) {
0279:  GOTO   288
027A:  MOVF   75,F
027B:  BTFSS  03.2
027C:  GOTO   288
....................       angle = 12;
027D:  MOVLW  0C
027E:  MOVWF  7B
....................       displaytime++;
027F:  INCF   76,F
....................       if (displaytime == 30) {
0280:  MOVF   76,W
0281:  SUBLW  1E
0282:  BTFSS  03.2
0283:  GOTO   288
....................          scantime = 1;
0284:  MOVLW  01
0285:  MOVWF  75
....................          displaytime = 0;
0286:  CLRF   76
....................          clear = 1;
0287:  MOVWF  7C
....................       }
....................    }
....................    loop1 = 0;
0288:  CLRF   74
0289:  CLRF   73
....................   }
....................   
....................   if(measure == 1)
028A:  BSF    03.5
028B:  DECFSZ 21,W
028C:  GOTO   290
....................   {
....................    duration++;
028D:  INCF   7D,F
028E:  BTFSC  03.2
028F:  INCF   7E,F
....................   }
0290:  BCF    03.5
0291:  BCF    0B.2
0292:  BCF    0A.3
0293:  BCF    0A.4
0294:  GOTO   02B
.................... }
.................... 
.................... 
.................... void main() {
*
1000:  MOVF   03,W
1001:  ANDLW  1F
1002:  MOVWF  03
1003:  MOVLW  FF
1004:  MOVWF  2B
1005:  BSF    2B.3
1006:  MOVF   2B,W
1007:  BSF    03.5
1008:  MOVWF  07
1009:  BCF    03.5
100A:  BSF    2B.4
100B:  MOVF   2B,W
100C:  BSF    03.5
100D:  MOVWF  07
100E:  MOVLW  0C
100F:  MOVWF  13
1010:  MOVLW  28
1011:  BCF    03.5
1012:  MOVWF  14
1013:  BSF    03.5
1014:  BCF    14.7
1015:  BCF    14.6
1016:  MOVLW  01
1017:  BCF    03.5
1018:  MOVWF  2E
1019:  MOVWF  2F
101A:  BSF    70.0
101B:  CLRF   72
101C:  CLRF   71
101D:  CLRF   74
101E:  CLRF   73
101F:  CLRF   75
1020:  CLRF   76
1021:  MOVLW  0C
1022:  MOVWF  7B
1023:  CLRF   7C
1024:  CLRF   7E
1025:  CLRF   7D
1026:  BSF    03.5
1027:  CLRF   20
1028:  CLRF   21
1029:  CLRF   22
102A:  CLRF   26
102B:  CLRF   25
102C:  CLRF   24
102D:  CLRF   23
102E:  CLRF   27
102F:  CLRF   28
1030:  CLRF   29
1031:  CLRF   2A
1032:  CLRF   2B
1033:  CLRF   2D
1034:  CLRF   2C
1035:  BSF    1F.0
1036:  BSF    1F.1
1037:  BSF    1F.2
1038:  BCF    1F.3
1039:  MOVLW  07
103A:  MOVWF  1C
103B:  BCF    03.7
....................   set_tris_a(0x02);
*
107D:  MOVLW  02
107E:  BSF    03.5
107F:  MOVWF  05
....................   
....................   
....................   enable_interrupts(INT_TIMER0);
1080:  BCF    03.5
1081:  BSF    0B.5
....................   enable_interrupts(global);
1082:  MOVLW  C0
1083:  IORWF  0B,F
....................   
....................   
....................   delay_ms(500);
1084:  MOVLW  02
1085:  BSF    03.5
1086:  MOVWF  2E
1087:  MOVLW  FA
1088:  MOVWF  30
1089:  BCF    0A.4
108A:  BCF    03.5
108B:  CALL   2A3
108C:  BSF    0A.4
108D:  BSF    03.5
108E:  DECFSZ 2E,F
108F:  GOTO   087
....................   
....................   // Initialize the SSD1306 OLED with an I2C addr = 0x7A (default address)
....................   SSD1306_Init(SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS);
1090:  MOVLW  02
1091:  MOVWF  2E
1092:  MOVLW  7A
1093:  MOVWF  2F
1094:  BCF    0A.4
1095:  BCF    03.5
1096:  GOTO   2E4
1097:  BSF    0A.4
....................   
....................   // clear the display
....................   SSD1306_ClearDisplay();
1098:  BCF    0A.4
1099:  CALL   3B7
109A:  BSF    0A.4
.................... 
....................   SSD1306_GotoXY(1, 1);
109B:  MOVLW  01
109C:  BSF    03.5
109D:  MOVWF  2E
109E:  MOVWF  2F
109F:  BCF    0A.4
10A0:  BCF    03.5
10A1:  CALL   48D
10A2:  BSF    0A.4
....................   SSD1306_PutC("Minimal Radar Display");
10A3:  MOVLW  95
10A4:  BSF    03.6
10A5:  MOVWF  0D
10A6:  MOVLW  02
10A7:  MOVWF  0F
10A8:  BCF    0A.4
10A9:  BCF    03.6
10AA:  CALL   579
10AB:  BSF    0A.4
....................   delay_ms(5000);
10AC:  MOVLW  14
10AD:  BSF    03.5
10AE:  MOVWF  2E
10AF:  MOVLW  FA
10B0:  MOVWF  30
10B1:  BCF    0A.4
10B2:  BCF    03.5
10B3:  CALL   2A3
10B4:  BSF    0A.4
10B5:  BSF    03.5
10B6:  DECFSZ 2E,F
10B7:  GOTO   0AF
....................   
....................   
....................   set_timer0(0x06);
10B8:  MOVLW  06
10B9:  BCF    03.5
10BA:  MOVWF  01
....................   setup_timer_0(T0_INTERNAL|T0_DIV_1);
10BB:  BSF    03.5
10BC:  MOVF   01,W
10BD:  ANDLW  C7
10BE:  IORLW  08
10BF:  MOVWF  01
....................   
....................   SSD1306_ClearDisplay();
10C0:  BCF    0A.4
10C1:  BCF    03.5
10C2:  CALL   3B7
10C3:  BSF    0A.4
.................... 
....................   while(TRUE) {
....................     
....................     if(clear == 1)
10C4:  DECFSZ 7C,W
10C5:  GOTO   0CA
....................     {
....................       SSD1306_ClearDisplay();
10C6:  BCF    0A.4
10C7:  CALL   3B7
10C8:  BSF    0A.4
....................       clear = 0;
10C9:  CLRF   7C
....................     }
....................     
....................     if(scantime == TRUE) {
10CA:  DECFSZ 75,W
10CB:  GOTO   24E
....................        output_high(PIN_A0);
10CC:  BSF    03.5
10CD:  BCF    05.0
10CE:  BCF    03.5
10CF:  BSF    05.0
....................        delay_us(10);
10D0:  MOVLW  10
10D1:  MOVWF  77
10D2:  DECFSZ 77,F
10D3:  GOTO   0D2
10D4:  NOP
....................        output_low(PIN_A0);
10D5:  BSF    03.5
10D6:  BCF    05.0
10D7:  BCF    03.5
10D8:  BCF    05.0
....................        
....................        while(!input(PIN_A1));
10D9:  BSF    03.5
10DA:  BSF    05.1
10DB:  BCF    03.5
10DC:  BTFSS  05.1
10DD:  GOTO   0D9
....................        duration = 0;
10DE:  CLRF   7E
10DF:  CLRF   7D
....................        distance = 0;
10E0:  BSF    03.5
10E1:  CLRF   20
....................        measure = 1;
10E2:  MOVLW  01
10E3:  MOVWF  21
....................        while(input(PIN_A1));
10E4:  BSF    05.1
10E5:  BCF    03.5
10E6:  BTFSS  05.1
10E7:  GOTO   0EA
10E8:  BSF    03.5
10E9:  GOTO   0E4
....................        measure = 0;
10EA:  BSF    03.5
10EB:  CLRF   21
....................        
....................        distance = (duration * 50)/58;     //distance (cm)
10EC:  MOVF   7E,W
10ED:  MOVWF  2F
10EE:  MOVF   7D,W
10EF:  MOVWF  2E
10F0:  CLRF   31
10F1:  MOVLW  32
10F2:  MOVWF  30
10F3:  BCF    0A.4
10F4:  BCF    03.5
10F5:  GOTO   5ED
10F6:  BSF    0A.4
10F7:  MOVF   79,W
10F8:  BSF    03.5
10F9:  MOVWF  2F
10FA:  MOVF   78,W
10FB:  MOVWF  2E
10FC:  MOVF   2F,W
10FD:  MOVWF  31
10FE:  MOVF   2E,W
10FF:  MOVWF  30
1100:  CLRF   33
1101:  MOVLW  3A
1102:  MOVWF  32
1103:  BCF    0A.4
1104:  BCF    03.5
1105:  GOTO   606
1106:  BSF    0A.4
1107:  MOVF   78,W
1108:  BSF    03.5
1109:  MOVWF  20
....................        
....................        if(distance <= 30)                 //0~30cm
110A:  MOVF   20,W
110B:  SUBLW  1E
110C:  BTFSS  03.0
110D:  GOTO   24B
....................        {
....................          
....................          
....................          rad = (angle - 27)*6;
110E:  MOVLW  1B
110F:  SUBWF  7B,W
1110:  MOVWF  2F
1111:  MOVWF  36
1112:  MOVLW  06
1113:  MOVWF  37
1114:  BCF    0A.4
1115:  BCF    03.5
1116:  CALL   4A0
1117:  BSF    0A.4
1118:  MOVF   78,W
1119:  BSF    03.5
111A:  MOVWF  22
....................          if(rad < 0)
111B:  BTFSC  22.7
111C:  GOTO   11E
111D:  GOTO   12B
....................          {
....................             rad *= -1;
111E:  MOVF   22,W
111F:  MOVWF  36
1120:  MOVLW  FF
1121:  MOVWF  37
1122:  BCF    0A.4
1123:  BCF    03.5
1124:  CALL   4A0
1125:  BSF    0A.4
1126:  MOVF   78,W
1127:  BSF    03.5
1128:  MOVWF  22
....................             leftside = 0;
1129:  CLRF   2B
....................          } else {
112A:  GOTO   12D
....................             leftside = 1;
112B:  MOVLW  01
112C:  MOVWF  2B
....................          }
....................          
....................          radf = pi / 180 * rad;
112D:  CLRF   2F
112E:  MOVF   22,W
112F:  MOVWF  2E
1130:  BTFSC  2E.7
1131:  DECF   2F,F
1132:  BCF    0A.4
1133:  BCF    03.5
1134:  GOTO   62F
1135:  BSF    0A.4
1136:  MOVLW  35
1137:  BSF    03.5
1138:  MOVWF  67
1139:  MOVLW  FA
113A:  MOVWF  66
113B:  MOVLW  0E
113C:  MOVWF  65
113D:  MOVLW  79
113E:  MOVWF  64
113F:  MOVF   7A,W
1140:  MOVWF  6B
1141:  MOVF   79,W
1142:  MOVWF  6A
1143:  MOVF   78,W
1144:  MOVWF  69
1145:  MOVF   77,W
1146:  MOVWF  68
1147:  BCF    0A.4
1148:  BCF    03.5
1149:  CALL   658
114A:  BSF    0A.4
114B:  MOVF   7A,W
114C:  BSF    03.5
114D:  MOVWF  26
114E:  MOVF   79,W
114F:  MOVWF  25
1150:  MOVF   78,W
1151:  MOVWF  24
1152:  MOVF   77,W
1153:  MOVWF  23
....................          
....................          posx = sin(radf) * distance / 2; //0~15cm
1154:  MOVF   26,W
1155:  MOVWF  31
1156:  MOVF   25,W
1157:  MOVWF  30
1158:  MOVF   24,W
1159:  MOVWF  2F
115A:  MOVF   23,W
115B:  MOVWF  2E
115C:  BCF    0A.4
115D:  BCF    03.5
115E:  GOTO   751
115F:  BSF    0A.4
1160:  MOVF   7A,W
1161:  BSF    03.5
1162:  MOVWF  31
1163:  MOVF   79,W
1164:  MOVWF  30
1165:  MOVF   78,W
1166:  MOVWF  2F
1167:  MOVF   77,W
1168:  MOVWF  2E
1169:  CLRF   65
116A:  MOVF   20,W
116B:  MOVWF  64
116C:  BCF    0A.4
116D:  BCF    03.5
116E:  CALL   732
116F:  BSF    0A.4
1170:  BSF    03.5
1171:  MOVF   31,W
1172:  MOVWF  67
1173:  MOVF   30,W
1174:  MOVWF  66
1175:  MOVF   2F,W
1176:  MOVWF  65
1177:  MOVF   2E,W
1178:  MOVWF  64
1179:  MOVF   7A,W
117A:  MOVWF  6B
117B:  MOVF   79,W
117C:  MOVWF  6A
117D:  MOVF   78,W
117E:  MOVWF  69
117F:  MOVF   77,W
1180:  MOVWF  68
1181:  BCF    0A.4
1182:  BCF    03.5
1183:  CALL   658
1184:  BSF    0A.4
1185:  MOVF   7A,W
1186:  BSF    03.5
1187:  MOVWF  31
1188:  MOVF   79,W
1189:  MOVWF  30
118A:  MOVF   78,W
118B:  MOVWF  2F
118C:  MOVF   77,W
118D:  MOVWF  2E
118E:  MOVF   31,W
118F:  MOVWF  35
1190:  MOVF   30,W
1191:  MOVWF  34
1192:  MOVF   2F,W
1193:  MOVWF  33
1194:  MOVF   2E,W
1195:  MOVWF  32
1196:  CLRF   39
1197:  CLRF   38
1198:  CLRF   37
1199:  MOVLW  80
119A:  MOVWF  36
119B:  BCF    0A.4
119C:  BSF    0A.3
119D:  BCF    03.5
119E:  CALL   3CF
119F:  BSF    0A.4
11A0:  BCF    0A.3
11A1:  MOVF   7A,W
11A2:  BSF    03.5
11A3:  MOVWF  63
11A4:  MOVF   79,W
11A5:  MOVWF  62
11A6:  MOVF   78,W
11A7:  MOVWF  61
11A8:  MOVF   77,W
11A9:  MOVWF  60
11AA:  BCF    0A.4
11AB:  BCF    03.5
11AC:  CALL   711
11AD:  BSF    0A.4
11AE:  MOVF   78,W
11AF:  BSF    03.5
11B0:  MOVWF  27
....................          posy = cos(radf) * distance / 2;
11B1:  MOVF   26,W
11B2:  MOVWF  39
11B3:  MOVF   25,W
11B4:  MOVWF  38
11B5:  MOVF   24,W
11B6:  MOVWF  37
11B7:  MOVF   23,W
11B8:  MOVWF  36
11B9:  BCF    0A.4
11BA:  BSF    0A.3
11BB:  BCF    03.5
11BC:  CALL   1B1
11BD:  BSF    0A.4
11BE:  BCF    0A.3
11BF:  MOVF   7A,W
11C0:  BSF    03.5
11C1:  MOVWF  31
11C2:  MOVF   79,W
11C3:  MOVWF  30
11C4:  MOVF   78,W
11C5:  MOVWF  2F
11C6:  MOVF   77,W
11C7:  MOVWF  2E
11C8:  CLRF   65
11C9:  MOVF   20,W
11CA:  MOVWF  64
11CB:  BCF    0A.4
11CC:  BCF    03.5
11CD:  CALL   732
11CE:  BSF    0A.4
11CF:  BSF    03.5
11D0:  MOVF   31,W
11D1:  MOVWF  67
11D2:  MOVF   30,W
11D3:  MOVWF  66
11D4:  MOVF   2F,W
11D5:  MOVWF  65
11D6:  MOVF   2E,W
11D7:  MOVWF  64
11D8:  MOVF   7A,W
11D9:  MOVWF  6B
11DA:  MOVF   79,W
11DB:  MOVWF  6A
11DC:  MOVF   78,W
11DD:  MOVWF  69
11DE:  MOVF   77,W
11DF:  MOVWF  68
11E0:  BCF    0A.4
11E1:  BCF    03.5
11E2:  CALL   658
11E3:  BSF    0A.4
11E4:  MOVF   7A,W
11E5:  BSF    03.5
11E6:  MOVWF  31
11E7:  MOVF   79,W
11E8:  MOVWF  30
11E9:  MOVF   78,W
11EA:  MOVWF  2F
11EB:  MOVF   77,W
11EC:  MOVWF  2E
11ED:  MOVF   31,W
11EE:  MOVWF  35
11EF:  MOVF   30,W
11F0:  MOVWF  34
11F1:  MOVF   2F,W
11F2:  MOVWF  33
11F3:  MOVF   2E,W
11F4:  MOVWF  32
11F5:  CLRF   39
11F6:  CLRF   38
11F7:  CLRF   37
11F8:  MOVLW  80
11F9:  MOVWF  36
11FA:  BCF    0A.4
11FB:  BSF    0A.3
11FC:  BCF    03.5
11FD:  CALL   3CF
11FE:  BSF    0A.4
11FF:  BCF    0A.3
1200:  MOVF   7A,W
1201:  BSF    03.5
1202:  MOVWF  63
1203:  MOVF   79,W
1204:  MOVWF  62
1205:  MOVF   78,W
1206:  MOVWF  61
1207:  MOVF   77,W
1208:  MOVWF  60
1209:  BCF    0A.4
120A:  BCF    03.5
120B:  CALL   711
120C:  BSF    0A.4
120D:  MOVF   78,W
120E:  BSF    03.5
120F:  MOVWF  28
....................          
....................          if(leftside == 1) {
1210:  DECFSZ 2B,W
1211:  GOTO   216
....................             oledx = 17 - posx;            //2~32
1212:  MOVF   27,W
1213:  SUBLW  11
1214:  MOVWF  29
....................          } else {
1215:  GOTO   219
....................             oledx = 17 + posx;
1216:  MOVLW  11
1217:  ADDWF  27,W
1218:  MOVWF  29
....................          }
....................          oledy = 16 - posy;               //1~16
1219:  MOVF   28,W
121A:  SUBLW  10
121B:  MOVWF  2A
....................          
....................          
....................          
....................          SSD1306_GotoXY(1, 1);
121C:  MOVLW  01
121D:  MOVWF  2E
121E:  MOVWF  2F
121F:  BCF    0A.4
1220:  BCF    03.5
1221:  CALL   48D
1222:  BSF    0A.4
....................          printf(SSD1306_PutC, "%02u", distance);
1223:  BSF    03.5
1224:  MOVF   20,W
1225:  MOVWF  2E
1226:  MOVLW  01
1227:  MOVWF  2F
1228:  BCF    0A.4
1229:  BCF    03.5
122A:  GOTO   77F
122B:  BSF    0A.4
....................        
....................          SSD1306_GotoXY(1, 2);
122C:  MOVLW  01
122D:  BSF    03.5
122E:  MOVWF  2E
122F:  MOVLW  02
1230:  MOVWF  2F
1231:  BCF    0A.4
1232:  BCF    03.5
1233:  CALL   48D
1234:  BSF    0A.4
....................          SSD1306_PutC("(cm)");
1235:  MOVLW  A0
1236:  BSF    03.6
1237:  MOVWF  0D
1238:  MOVLW  02
1239:  MOVWF  0F
123A:  BCF    0A.4
123B:  BCF    03.6
123C:  CALL   579
123D:  BSF    0A.4
....................          
....................          SSD1306_DRAWDOT(oledx, oledy);
123E:  BSF    03.5
123F:  MOVF   29,W
1240:  MOVWF  2E
1241:  MOVF   2A,W
1242:  MOVWF  2F
1243:  BCF    0A.4
1244:  BSF    0A.3
1245:  BCF    03.5
1246:  GOTO   49B
1247:  BSF    0A.4
1248:  BCF    0A.3
....................          
....................        } else {
1249:  GOTO   24D
124A:  BSF    03.5
....................          distance = 0;
124B:  CLRF   20
124C:  BCF    03.5
....................        }
....................     } else {
124D:  GOTO   252
....................       output_low(PIN_A0);
124E:  BSF    03.5
124F:  BCF    05.0
1250:  BCF    03.5
1251:  BCF    05.0
....................     }
....................     
....................     SSD1306_UPDATEDISPLAY();
1252:  BCF    0A.4
1253:  BSF    0A.3
1254:  GOTO   5CD
1255:  BSF    0A.4
1256:  BCF    0A.3
1257:  GOTO   0C4
....................   }
.................... }
.................... // End of code
1258:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
