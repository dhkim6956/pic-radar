CCS PCM C Compiler, Version 5.105Pd, 1               16-11-21 23:45
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\dhkim\Documents\GitHub\pic16f877a_SSD1306_i2c_radar_project\oled\oled.lst

               ROM used:   1379 words (17%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           24 (7%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4A9
0003:  NOP
.................... // Interfacing PIC16F877A with SSD1306 OLED display (128x64 Pixel)
.................... // http://simple-circuit.com/
.................... 
.................... #define SSD1306_RST   PIN_D4
.................... 
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDLW  0B
0008:  BTFSC  03.0
0009:  INCF   0A,F
000A:  MOVWF  02
000B:  RETLW  00
000C:  RETLW  00
000D:  RETLW  00
000E:  RETLW  00
000F:  RETLW  00
0010:  RETLW  00
0011:  RETLW  00
0012:  RETLW  5F
0013:  RETLW  00
0014:  RETLW  00
0015:  RETLW  00
0016:  RETLW  07
0017:  RETLW  00
0018:  RETLW  07
0019:  RETLW  00
001A:  RETLW  14
001B:  RETLW  7F
001C:  RETLW  14
001D:  RETLW  7F
001E:  RETLW  14
001F:  RETLW  24
0020:  RETLW  2A
0021:  RETLW  7F
0022:  RETLW  2A
0023:  RETLW  12
0024:  RETLW  23
0025:  RETLW  13
0026:  RETLW  08
0027:  RETLW  64
0028:  RETLW  62
0029:  RETLW  36
002A:  RETLW  49
002B:  RETLW  56
002C:  RETLW  20
002D:  RETLW  50
002E:  RETLW  00
002F:  RETLW  08
0030:  RETLW  07
0031:  RETLW  03
0032:  RETLW  00
0033:  RETLW  00
0034:  RETLW  1C
0035:  RETLW  22
0036:  RETLW  41
0037:  RETLW  00
0038:  RETLW  00
0039:  RETLW  41
003A:  RETLW  22
003B:  RETLW  1C
003C:  RETLW  00
003D:  RETLW  2A
003E:  RETLW  1C
003F:  RETLW  7F
0040:  RETLW  1C
0041:  RETLW  2A
0042:  RETLW  08
0043:  RETLW  08
0044:  RETLW  3E
0045:  RETLW  08
0046:  RETLW  08
0047:  RETLW  00
0048:  RETLW  80
0049:  RETLW  70
004A:  RETLW  30
004B:  RETLW  00
004C:  RETLW  08
004D:  RETLW  08
004E:  RETLW  08
004F:  RETLW  08
0050:  RETLW  08
0051:  RETLW  00
0052:  RETLW  00
0053:  RETLW  60
0054:  RETLW  60
0055:  RETLW  00
0056:  RETLW  20
0057:  RETLW  10
0058:  RETLW  08
0059:  RETLW  04
005A:  RETLW  02
005B:  RETLW  3E
005C:  RETLW  51
005D:  RETLW  49
005E:  RETLW  45
005F:  RETLW  3E
0060:  RETLW  00
0061:  RETLW  42
0062:  RETLW  7F
0063:  RETLW  40
0064:  RETLW  00
0065:  RETLW  72
0066:  RETLW  49
0067:  RETLW  49
0068:  RETLW  49
0069:  RETLW  46
006A:  RETLW  21
006B:  RETLW  41
006C:  RETLW  49
006D:  RETLW  4D
006E:  RETLW  33
006F:  RETLW  18
0070:  RETLW  14
0071:  RETLW  12
0072:  RETLW  7F
0073:  RETLW  10
0074:  RETLW  27
0075:  RETLW  45
0076:  RETLW  45
0077:  RETLW  45
0078:  RETLW  39
0079:  RETLW  3C
007A:  RETLW  4A
007B:  RETLW  49
007C:  RETLW  49
007D:  RETLW  31
007E:  RETLW  41
007F:  RETLW  21
0080:  RETLW  11
0081:  RETLW  09
0082:  RETLW  07
0083:  RETLW  36
0084:  RETLW  49
0085:  RETLW  49
0086:  RETLW  49
0087:  RETLW  36
0088:  RETLW  46
0089:  RETLW  49
008A:  RETLW  49
008B:  RETLW  29
008C:  RETLW  1E
008D:  RETLW  00
008E:  RETLW  00
008F:  RETLW  14
0090:  RETLW  00
0091:  RETLW  00
0092:  RETLW  00
0093:  RETLW  40
0094:  RETLW  34
0095:  RETLW  00
0096:  RETLW  00
0097:  RETLW  00
0098:  RETLW  08
0099:  RETLW  14
009A:  RETLW  22
009B:  RETLW  41
009C:  RETLW  14
009D:  RETLW  14
009E:  RETLW  14
009F:  RETLW  14
00A0:  RETLW  14
00A1:  RETLW  00
00A2:  RETLW  41
00A3:  RETLW  22
00A4:  RETLW  14
00A5:  RETLW  08
00A6:  RETLW  02
00A7:  RETLW  01
00A8:  RETLW  59
00A9:  RETLW  09
00AA:  RETLW  06
00AB:  RETLW  3E
00AC:  RETLW  41
00AD:  RETLW  5D
00AE:  RETLW  59
00AF:  RETLW  4E
00B0:  RETLW  7C
00B1:  RETLW  12
00B2:  RETLW  11
00B3:  RETLW  12
00B4:  RETLW  7C
00B5:  RETLW  7F
00B6:  RETLW  49
00B7:  RETLW  49
00B8:  RETLW  49
00B9:  RETLW  36
00BA:  RETLW  3E
00BB:  RETLW  41
00BC:  RETLW  41
00BD:  RETLW  41
00BE:  RETLW  22
00BF:  RETLW  7F
00C0:  RETLW  41
00C1:  RETLW  41
00C2:  RETLW  41
00C3:  RETLW  3E
00C4:  RETLW  7F
00C5:  RETLW  49
00C6:  RETLW  49
00C7:  RETLW  49
00C8:  RETLW  41
00C9:  RETLW  7F
00CA:  RETLW  09
00CB:  RETLW  09
00CC:  RETLW  09
00CD:  RETLW  01
00CE:  RETLW  3E
00CF:  RETLW  41
00D0:  RETLW  41
00D1:  RETLW  51
00D2:  RETLW  73
00D3:  RETLW  7F
00D4:  RETLW  08
00D5:  RETLW  08
00D6:  RETLW  08
00D7:  RETLW  7F
00D8:  RETLW  00
00D9:  RETLW  41
00DA:  RETLW  7F
00DB:  RETLW  41
00DC:  RETLW  00
00DD:  RETLW  20
00DE:  RETLW  40
00DF:  RETLW  41
00E0:  RETLW  3F
00E1:  RETLW  01
00E2:  RETLW  7F
00E3:  RETLW  08
00E4:  RETLW  14
00E5:  RETLW  22
00E6:  RETLW  41
00E7:  RETLW  7F
00E8:  RETLW  40
00E9:  RETLW  40
00EA:  RETLW  40
00EB:  RETLW  40
00EC:  RETLW  7F
00ED:  RETLW  02
00EE:  RETLW  1C
00EF:  RETLW  02
00F0:  RETLW  7F
00F1:  RETLW  7F
00F2:  RETLW  04
00F3:  RETLW  08
00F4:  RETLW  10
00F5:  RETLW  7F
00F6:  RETLW  3E
00F7:  RETLW  41
00F8:  RETLW  41
00F9:  RETLW  41
00FA:  RETLW  3E
00FB:  RETLW  7F
00FC:  RETLW  09
00FD:  RETLW  09
00FE:  RETLW  09
00FF:  RETLW  06
0100:  RETLW  3E
0101:  RETLW  41
0102:  RETLW  51
0103:  RETLW  21
0104:  RETLW  5E
0105:  RETLW  7F
0106:  RETLW  09
0107:  RETLW  19
0108:  RETLW  29
0109:  RETLW  46
010A:  BSF    0A.0
010B:  BCF    0A.1
010C:  BCF    0A.2
010D:  ADDWF  02,F
010E:  RETLW  26
010F:  RETLW  49
0110:  RETLW  49
0111:  RETLW  49
0112:  RETLW  32
0113:  RETLW  03
0114:  RETLW  01
0115:  RETLW  7F
0116:  RETLW  01
0117:  RETLW  03
0118:  RETLW  3F
0119:  RETLW  40
011A:  RETLW  40
011B:  RETLW  40
011C:  RETLW  3F
011D:  RETLW  1F
011E:  RETLW  20
011F:  RETLW  40
0120:  RETLW  20
0121:  RETLW  1F
0122:  RETLW  3F
0123:  RETLW  40
0124:  RETLW  38
0125:  RETLW  40
0126:  RETLW  3F
0127:  RETLW  63
0128:  RETLW  14
0129:  RETLW  08
012A:  RETLW  14
012B:  RETLW  63
012C:  RETLW  03
012D:  RETLW  04
012E:  RETLW  78
012F:  RETLW  04
0130:  RETLW  03
0131:  RETLW  61
0132:  RETLW  59
0133:  RETLW  49
0134:  RETLW  4D
0135:  RETLW  43
0136:  RETLW  00
0137:  RETLW  7F
0138:  RETLW  41
0139:  RETLW  41
013A:  RETLW  41
013B:  RETLW  02
013C:  RETLW  04
013D:  RETLW  08
013E:  RETLW  10
013F:  RETLW  20
0140:  RETLW  00
0141:  RETLW  41
0142:  RETLW  41
0143:  RETLW  41
0144:  RETLW  7F
0145:  RETLW  04
0146:  RETLW  02
0147:  RETLW  01
0148:  RETLW  02
0149:  RETLW  04
014A:  RETLW  40
014B:  RETLW  40
014C:  RETLW  40
014D:  RETLW  40
014E:  RETLW  40
014F:  RETLW  00
0150:  RETLW  03
0151:  RETLW  07
0152:  RETLW  08
0153:  RETLW  00
0154:  RETLW  20
0155:  RETLW  54
0156:  RETLW  54
0157:  RETLW  78
0158:  RETLW  40
0159:  RETLW  7F
015A:  RETLW  28
015B:  RETLW  44
015C:  RETLW  44
015D:  RETLW  38
015E:  RETLW  38
015F:  RETLW  44
0160:  RETLW  44
0161:  RETLW  44
0162:  RETLW  28
0163:  RETLW  38
0164:  RETLW  44
0165:  RETLW  44
0166:  RETLW  28
0167:  RETLW  7F
0168:  RETLW  38
0169:  RETLW  54
016A:  RETLW  54
016B:  RETLW  54
016C:  RETLW  18
016D:  RETLW  00
016E:  RETLW  08
016F:  RETLW  7E
0170:  RETLW  09
0171:  RETLW  02
0172:  RETLW  18
0173:  RETLW  A4
0174:  RETLW  A4
0175:  RETLW  9C
0176:  RETLW  78
0177:  RETLW  7F
0178:  RETLW  08
0179:  RETLW  04
017A:  RETLW  04
017B:  RETLW  78
017C:  RETLW  00
017D:  RETLW  44
017E:  RETLW  7D
017F:  RETLW  40
0180:  RETLW  00
0181:  RETLW  20
0182:  RETLW  40
0183:  RETLW  40
0184:  RETLW  3D
0185:  RETLW  00
0186:  RETLW  7F
0187:  RETLW  10
0188:  RETLW  28
0189:  RETLW  44
018A:  RETLW  00
018B:  RETLW  00
018C:  RETLW  41
018D:  RETLW  7F
018E:  RETLW  40
018F:  RETLW  00
0190:  RETLW  7C
0191:  RETLW  04
0192:  RETLW  78
0193:  RETLW  04
0194:  RETLW  78
0195:  RETLW  7C
0196:  RETLW  08
0197:  RETLW  04
0198:  RETLW  04
0199:  RETLW  78
019A:  RETLW  38
019B:  RETLW  44
019C:  RETLW  44
019D:  RETLW  44
019E:  RETLW  38
019F:  RETLW  FC
01A0:  RETLW  18
01A1:  RETLW  24
01A2:  RETLW  24
01A3:  RETLW  18
01A4:  RETLW  18
01A5:  RETLW  24
01A6:  RETLW  24
01A7:  RETLW  18
01A8:  RETLW  FC
01A9:  RETLW  7C
01AA:  RETLW  08
01AB:  RETLW  04
01AC:  RETLW  04
01AD:  RETLW  08
01AE:  RETLW  48
01AF:  RETLW  54
01B0:  RETLW  54
01B1:  RETLW  54
01B2:  RETLW  24
01B3:  RETLW  04
01B4:  RETLW  04
01B5:  RETLW  3F
01B6:  RETLW  44
01B7:  RETLW  24
01B8:  RETLW  3C
01B9:  RETLW  40
01BA:  RETLW  40
01BB:  RETLW  20
01BC:  RETLW  7C
01BD:  RETLW  1C
01BE:  RETLW  20
01BF:  RETLW  40
01C0:  RETLW  20
01C1:  RETLW  1C
01C2:  RETLW  3C
01C3:  RETLW  40
01C4:  RETLW  30
01C5:  RETLW  40
01C6:  RETLW  3C
01C7:  RETLW  44
01C8:  RETLW  28
01C9:  RETLW  10
01CA:  RETLW  28
01CB:  RETLW  44
01CC:  RETLW  4C
01CD:  RETLW  90
01CE:  RETLW  90
01CF:  RETLW  90
01D0:  RETLW  7C
01D1:  RETLW  44
01D2:  RETLW  64
01D3:  RETLW  54
01D4:  RETLW  4C
01D5:  RETLW  44
01D6:  RETLW  00
01D7:  RETLW  08
01D8:  RETLW  36
01D9:  RETLW  41
01DA:  RETLW  00
01DB:  RETLW  00
01DC:  RETLW  00
01DD:  RETLW  77
01DE:  RETLW  00
01DF:  RETLW  00
01E0:  RETLW  00
01E1:  RETLW  41
01E2:  RETLW  36
01E3:  RETLW  08
01E4:  RETLW  00
01E5:  RETLW  02
01E6:  RETLW  01
01E7:  RETLW  02
01E8:  RETLW  04
01E9:  RETLW  02
01EA:  DATA 49,37
01EB:  DATA F4,32
01EC:  DATA 72,33
01ED:  DATA E1,31
01EE:  DATA 69,37
01EF:  DATA 67,10
01F0:  DATA D0,24
01F1:  DATA C3,18
01F2:  DATA 36,23
01F3:  DATA B8,1B
01F4:  DATA B7,20
01F5:  DATA A0,3B
01F6:  DATA 69,3A
01F7:  DATA 68,10
01F8:  DATA D3,29
01F9:  DATA C4,18
01FA:  DATA 33,18
01FB:  DATA 36,10
01FC:  DATA 4F,26
01FD:  DATA 45,22
01FE:  DATA 20,32
01FF:  DATA E9,39
0200:  DATA 70,36
0201:  DATA E1,3C
0202:  DATA 00,00
0203:  DATA C8,32
0204:  DATA 6C,36
0205:  DATA 6F,10
0206:  DATA F7,37
0207:  DATA 72,36
0208:  DATA E4,10
0209:  DATA 00,01
020A:  DATA C8,32
020B:  DATA 6C,36
020C:  DATA 6F,10
020D:  DATA F7,37
020E:  DATA 72,36
020F:  DATA E4,10
0210:  DATA 00,01
*
02F7:  CLRF   77
02F8:  CLRF   78
02F9:  MOVF   31,W
02FA:  BCF    03.0
02FB:  BTFSC  32.0
02FC:  ADDWF  77,F
02FD:  RRF    77,F
02FE:  RRF    78,F
02FF:  BTFSC  32.1
0300:  ADDWF  77,F
0301:  RRF    77,F
0302:  RRF    78,F
0303:  BTFSC  32.2
0304:  ADDWF  77,F
0305:  RRF    77,F
0306:  RRF    78,F
0307:  BTFSC  32.3
0308:  ADDWF  77,F
0309:  RRF    77,F
030A:  RRF    78,F
030B:  BTFSC  32.4
030C:  ADDWF  77,F
030D:  RRF    77,F
030E:  RRF    78,F
030F:  BTFSC  32.5
0310:  ADDWF  77,F
0311:  RRF    77,F
0312:  RRF    78,F
0313:  BTFSC  32.6
0314:  ADDWF  77,F
0315:  RRF    77,F
0316:  RRF    78,F
0317:  BTFSC  32.7
0318:  ADDWF  77,F
0319:  RRF    77,F
031A:  RRF    78,F
031B:  RETURN
031C:  MOVF   30,W
031D:  CLRF   78
031E:  SUBWF  2F,W
031F:  BTFSC  03.0
0320:  GOTO   324
0321:  MOVF   2F,W
0322:  MOVWF  77
0323:  GOTO   330
0324:  CLRF   77
0325:  MOVLW  08
0326:  MOVWF  31
0327:  RLF    2F,F
0328:  RLF    77,F
0329:  MOVF   30,W
032A:  SUBWF  77,W
032B:  BTFSC  03.0
032C:  MOVWF  77
032D:  RLF    78,F
032E:  DECFSZ 31,F
032F:  GOTO   327
0330:  RETURN
*
03AC:  MOVF   0B,W
03AD:  MOVWF  29
03AE:  BCF    0B.7
03AF:  BSF    03.5
03B0:  BSF    03.6
03B1:  BSF    0C.7
03B2:  BSF    0C.0
03B3:  NOP
03B4:  NOP
03B5:  BCF    03.5
03B6:  BCF    03.6
03B7:  BTFSC  29.7
03B8:  BSF    0B.7
03B9:  BSF    03.6
03BA:  MOVF   0C,W
03BB:  ANDLW  7F
03BC:  BTFSC  03.2
03BD:  GOTO   400
03BE:  BCF    03.6
03BF:  MOVWF  29
03C0:  BSF    03.6
03C1:  MOVF   0D,W
03C2:  BCF    03.6
03C3:  MOVWF  2A
03C4:  BSF    03.6
03C5:  MOVF   0F,W
03C6:  BCF    03.6
03C7:  MOVWF  2B
03C8:  MOVF   29,W
03C9:  MOVWF  2C
03CA:  CALL   331
03CB:  MOVF   2A,W
03CC:  BSF    03.6
03CD:  MOVWF  0D
03CE:  BCF    03.6
03CF:  MOVF   2B,W
03D0:  BSF    03.6
03D1:  MOVWF  0F
03D2:  BCF    03.6
03D3:  MOVF   0B,W
03D4:  MOVWF  2C
03D5:  BCF    0B.7
03D6:  BSF    03.5
03D7:  BSF    03.6
03D8:  BSF    0C.7
03D9:  BSF    0C.0
03DA:  NOP
03DB:  NOP
03DC:  BCF    03.5
03DD:  BCF    03.6
03DE:  BTFSC  2C.7
03DF:  BSF    0B.7
03E0:  BSF    03.6
03E1:  RLF    0C,W
03E2:  RLF    0E,W
03E3:  ANDLW  7F
03E4:  BTFSC  03.2
03E5:  GOTO   400
03E6:  BCF    03.6
03E7:  MOVWF  29
03E8:  BSF    03.6
03E9:  MOVF   0D,W
03EA:  BCF    03.6
03EB:  MOVWF  2A
03EC:  BSF    03.6
03ED:  MOVF   0F,W
03EE:  BCF    03.6
03EF:  MOVWF  2B
03F0:  MOVF   29,W
03F1:  MOVWF  2C
03F2:  CALL   331
03F3:  MOVF   2A,W
03F4:  BSF    03.6
03F5:  MOVWF  0D
03F6:  BCF    03.6
03F7:  MOVF   2B,W
03F8:  BSF    03.6
03F9:  MOVWF  0F
03FA:  INCF   0D,F
03FB:  BTFSC  03.2
03FC:  INCF   0F,F
03FD:  BCF    03.6
03FE:  GOTO   3AC
03FF:  BSF    03.6
0400:  BCF    03.6
0401:  RETURN
*
0472:  MOVF   78,W
0473:  MOVF   2A,W
0474:  MOVWF  2F
0475:  MOVLW  64
0476:  MOVWF  30
0477:  CALL   31C
0478:  MOVF   77,W
0479:  MOVWF  2A
047A:  MOVF   78,W
047B:  MOVLW  30
047C:  BTFSS  03.2
047D:  GOTO   485
047E:  BTFSS  2B.1
047F:  GOTO   48C
0480:  BTFSC  2B.3
0481:  GOTO   48C
0482:  BTFSC  2B.4
0483:  MOVLW  20
0484:  GOTO   488
0485:  BCF    2B.3
0486:  BCF    2B.4
0487:  BSF    2B.0
0488:  ADDWF  78,F
0489:  MOVF   78,W
048A:  MOVWF  2C
048B:  CALL   331
048C:  MOVF   2A,W
048D:  MOVWF  2F
048E:  MOVLW  0A
048F:  MOVWF  30
0490:  CALL   31C
0491:  MOVF   77,W
0492:  MOVWF  2A
0493:  MOVF   78,W
0494:  MOVLW  30
0495:  BTFSS  03.2
0496:  GOTO   49D
0497:  BTFSC  2B.3
0498:  GOTO   4A1
0499:  BTFSS  2B.0
049A:  GOTO   4A1
049B:  BTFSC  2B.4
049C:  MOVLW  20
049D:  ADDWF  78,F
049E:  MOVF   78,W
049F:  MOVWF  2C
04A0:  CALL   331
04A1:  MOVLW  30
04A2:  ADDWF  2A,F
04A3:  MOVF   2A,W
04A4:  MOVWF  2C
04A5:  CALL   331
04A6:  BCF    0A.3
04A7:  BCF    0A.4
04A8:  GOTO   55A (RETURN)
.................... 
.................... #list
.................... 
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP                       
.................... #use delay(clock = 20MHz)
*
0211:  MOVLW  2B
0212:  MOVWF  04
0213:  BCF    03.7
0214:  MOVF   00,W
0215:  BTFSC  03.2
0216:  GOTO   224
0217:  MOVLW  06
0218:  MOVWF  78
0219:  CLRF   77
021A:  DECFSZ 77,F
021B:  GOTO   21A
021C:  DECFSZ 78,F
021D:  GOTO   219
021E:  MOVLW  7B
021F:  MOVWF  77
0220:  DECFSZ 77,F
0221:  GOTO   220
0222:  DECFSZ 00,F
0223:  GOTO   217
0224:  RETURN
.................... #use I2C(MASTER, I2C1, FAST = 400000, stream = SSD1306_STREAM)  // Initialize I2C
0225:  BCF    14.7
0226:  BCF    0C.3
0227:  MOVF   32,W
0228:  MOVWF  13
0229:  MOVLW  02
022A:  BTFSC  14.7
022B:  GOTO   233
022C:  BSF    03.5
022D:  BTFSC  14.2
022E:  GOTO   22D
022F:  MOVLW  00
0230:  BTFSC  11.6
0231:  MOVLW  01
0232:  BCF    03.5
0233:  MOVWF  78
0234:  RETURN
.................... 
.................... // Include SSD1306 OLED driver source code
.................... #include <SSD1306.c>    
.................... /******************************************************************************
....................  SSD1306 OLED driver for CCS PIC C compiler (SSD1306.c)                       *
....................                                                                               *
....................  The driver is for I2C mode only.                                             *
....................                                                                               *
....................  http://simple-circuit.com/                                                   *
....................                                                                               *
.................... *******************************************************************************/
.................... 
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... //------------------------------ Definitions ---------------------------------//
.................... 
.................... #define SSD1306_I2C_ADDRESS   0x7A
.................... 
.................... #if !defined SSD1306_128_32 && !defined SSD1306_96_16
.................... #define SSD1306_128_64
.................... #endif
.................... #if defined SSD1306_128_32 && defined SSD1306_96_16
....................   #error "Only one SSD1306 display can be specified at once"
.................... #endif
.................... 
.................... #if defined SSD1306_128_64
....................   #define SSD1306_LCDWIDTH            128
....................   #define SSD1306_LCDHEIGHT            64
.................... #endif
.................... #if defined SSD1306_128_32
....................   #define SSD1306_LCDWIDTH            128
....................   #define SSD1306_LCDHEIGHT            32
.................... #endif
.................... #if defined SSD1306_96_16
....................   #define SSD1306_LCDWIDTH             96
....................   #define SSD1306_LCDHEIGHT            16
.................... #endif
.................... 
.................... #define SSD1306_SETCONTRAST          0x81
.................... #define SSD1306_DISPLAYALLON_RESUME  0xA4
.................... #define SSD1306_DISPLAYALLON         0xA5
.................... #define SSD1306_NORMALDISPLAY        0xA6
.................... #define SSD1306_INVERTDISPLAY_       0xA7
.................... #define SSD1306_DISPLAYOFF           0xAE
.................... #define SSD1306_DISPLAYON            0xAF
.................... #define SSD1306_SETDISPLAYOFFSET     0xD3
.................... #define SSD1306_SETCOMPINS           0xDA
.................... #define SSD1306_SETVCOMDETECT        0xDB
.................... #define SSD1306_SETDISPLAYCLOCKDIV   0xD5
.................... #define SSD1306_SETPRECHARGE         0xD9
.................... #define SSD1306_SETMULTIPLEX         0xA8
.................... #define SSD1306_SETLOWCOLUMN         0x00
.................... #define SSD1306_SETHIGHCOLUMN        0x10
.................... #define SSD1306_SETSTARTLINE         0x40
.................... #define SSD1306_MEMORYMODE           0x20
.................... #define SSD1306_COLUMNADDR           0x21
.................... #define SSD1306_PAGEADDR             0x22
.................... #define SSD1306_COMSCANINC           0xC0
.................... #define SSD1306_COMSCANDEC           0xC8
.................... #define SSD1306_SEGREMAP             0xA0
.................... #define SSD1306_CHARGEPUMP           0x8D
.................... #define SSD1306_EXTERNALVCC          0x01
.................... #define SSD1306_SWITCHCAPVCC         0x02
.................... 
.................... // Scrolling #defines
.................... #define SSD1306_ACTIVATE_SCROLL                      0x2F
.................... #define SSD1306_DEACTIVATE_SCROLL                    0x2E
.................... #define SSD1306_SET_VERTICAL_SCROLL_AREA             0xA3
.................... #define SSD1306_RIGHT_HORIZONTAL_SCROLL              0x26
.................... #define SSD1306_LEFT_HORIZONTAL_SCROLL               0x27
.................... #define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
.................... #define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL  0x2A
.................... 
.................... 
.................... uint8_t _i2caddr, _vccstate, x_pos = 1, y_pos = 1;
.................... 
.................... //--------------------------------------------------------------------------//
.................... 
.................... int1 wrap = TRUE;
.................... 
.................... const char Font[] = {
.................... 0x00, 0x00, 0x00, 0x00, 0x00,
.................... 0x00, 0x00, 0x5F, 0x00, 0x00,
.................... 0x00, 0x07, 0x00, 0x07, 0x00,
.................... 0x14, 0x7F, 0x14, 0x7F, 0x14,
.................... 0x24, 0x2A, 0x7F, 0x2A, 0x12,
.................... 0x23, 0x13, 0x08, 0x64, 0x62,
.................... 0x36, 0x49, 0x56, 0x20, 0x50,
.................... 0x00, 0x08, 0x07, 0x03, 0x00,
.................... 0x00, 0x1C, 0x22, 0x41, 0x00,
.................... 0x00, 0x41, 0x22, 0x1C, 0x00,
.................... 0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
.................... 0x08, 0x08, 0x3E, 0x08, 0x08,
.................... 0x00, 0x80, 0x70, 0x30, 0x00,
.................... 0x08, 0x08, 0x08, 0x08, 0x08,
.................... 0x00, 0x00, 0x60, 0x60, 0x00,
.................... 0x20, 0x10, 0x08, 0x04, 0x02,
.................... 0x3E, 0x51, 0x49, 0x45, 0x3E,
.................... 0x00, 0x42, 0x7F, 0x40, 0x00,
.................... 0x72, 0x49, 0x49, 0x49, 0x46,
.................... 0x21, 0x41, 0x49, 0x4D, 0x33,
.................... 0x18, 0x14, 0x12, 0x7F, 0x10,
.................... 0x27, 0x45, 0x45, 0x45, 0x39,
.................... 0x3C, 0x4A, 0x49, 0x49, 0x31,
.................... 0x41, 0x21, 0x11, 0x09, 0x07,
.................... 0x36, 0x49, 0x49, 0x49, 0x36,
.................... 0x46, 0x49, 0x49, 0x29, 0x1E,
.................... 0x00, 0x00, 0x14, 0x00, 0x00,
.................... 0x00, 0x40, 0x34, 0x00, 0x00,
.................... 0x00, 0x08, 0x14, 0x22, 0x41,
.................... 0x14, 0x14, 0x14, 0x14, 0x14,
.................... 0x00, 0x41, 0x22, 0x14, 0x08,
.................... 0x02, 0x01, 0x59, 0x09, 0x06,
.................... 0x3E, 0x41, 0x5D, 0x59, 0x4E,
.................... 0x7C, 0x12, 0x11, 0x12, 0x7C,
.................... 0x7F, 0x49, 0x49, 0x49, 0x36,
.................... 0x3E, 0x41, 0x41, 0x41, 0x22,
.................... 0x7F, 0x41, 0x41, 0x41, 0x3E,
.................... 0x7F, 0x49, 0x49, 0x49, 0x41,
.................... 0x7F, 0x09, 0x09, 0x09, 0x01,
.................... 0x3E, 0x41, 0x41, 0x51, 0x73,
.................... 0x7F, 0x08, 0x08, 0x08, 0x7F,
.................... 0x00, 0x41, 0x7F, 0x41, 0x00,
.................... 0x20, 0x40, 0x41, 0x3F, 0x01,
.................... 0x7F, 0x08, 0x14, 0x22, 0x41,
.................... 0x7F, 0x40, 0x40, 0x40, 0x40,
.................... 0x7F, 0x02, 0x1C, 0x02, 0x7F,
.................... 0x7F, 0x04, 0x08, 0x10, 0x7F,
.................... 0x3E, 0x41, 0x41, 0x41, 0x3E,
.................... 0x7F, 0x09, 0x09, 0x09, 0x06,
.................... 0x3E, 0x41, 0x51, 0x21, 0x5E,
.................... 0x7F, 0x09, 0x19, 0x29, 0x46
.................... };
.................... const char Font2[] = {
.................... 0x26, 0x49, 0x49, 0x49, 0x32,
.................... 0x03, 0x01, 0x7F, 0x01, 0x03,
.................... 0x3F, 0x40, 0x40, 0x40, 0x3F,
.................... 0x1F, 0x20, 0x40, 0x20, 0x1F,
.................... 0x3F, 0x40, 0x38, 0x40, 0x3F,
.................... 0x63, 0x14, 0x08, 0x14, 0x63,
.................... 0x03, 0x04, 0x78, 0x04, 0x03,
.................... 0x61, 0x59, 0x49, 0x4D, 0x43,
.................... 0x00, 0x7F, 0x41, 0x41, 0x41,
.................... 0x02, 0x04, 0x08, 0x10, 0x20,
.................... 0x00, 0x41, 0x41, 0x41, 0x7F,
.................... 0x04, 0x02, 0x01, 0x02, 0x04,
.................... 0x40, 0x40, 0x40, 0x40, 0x40,
.................... 0x00, 0x03, 0x07, 0x08, 0x00,
.................... 0x20, 0x54, 0x54, 0x78, 0x40,
.................... 0x7F, 0x28, 0x44, 0x44, 0x38,
.................... 0x38, 0x44, 0x44, 0x44, 0x28,
.................... 0x38, 0x44, 0x44, 0x28, 0x7F,
.................... 0x38, 0x54, 0x54, 0x54, 0x18,
.................... 0x00, 0x08, 0x7E, 0x09, 0x02,
.................... 0x18, 0xA4, 0xA4, 0x9C, 0x78,
.................... 0x7F, 0x08, 0x04, 0x04, 0x78,
.................... 0x00, 0x44, 0x7D, 0x40, 0x00,
.................... 0x20, 0x40, 0x40, 0x3D, 0x00,
.................... 0x7F, 0x10, 0x28, 0x44, 0x00,
.................... 0x00, 0x41, 0x7F, 0x40, 0x00,
.................... 0x7C, 0x04, 0x78, 0x04, 0x78,
.................... 0x7C, 0x08, 0x04, 0x04, 0x78,
.................... 0x38, 0x44, 0x44, 0x44, 0x38,
.................... 0xFC, 0x18, 0x24, 0x24, 0x18,
.................... 0x18, 0x24, 0x24, 0x18, 0xFC,
.................... 0x7C, 0x08, 0x04, 0x04, 0x08,
.................... 0x48, 0x54, 0x54, 0x54, 0x24,
.................... 0x04, 0x04, 0x3F, 0x44, 0x24,
.................... 0x3C, 0x40, 0x40, 0x20, 0x7C,
.................... 0x1C, 0x20, 0x40, 0x20, 0x1C,
.................... 0x3C, 0x40, 0x30, 0x40, 0x3C,
.................... 0x44, 0x28, 0x10, 0x28, 0x44,
.................... 0x4C, 0x90, 0x90, 0x90, 0x7C,
.................... 0x44, 0x64, 0x54, 0x4C, 0x44,
.................... 0x00, 0x08, 0x36, 0x41, 0x00,
.................... 0x00, 0x00, 0x77, 0x00, 0x00,
.................... 0x00, 0x41, 0x36, 0x08, 0x00,
.................... 0x02, 0x01, 0x02, 0x04, 0x02
.................... };
.................... 
.................... 
.................... void ssd1306_command(uint8_t c) {
0235:  CLRF   31
....................     uint8_t control = 0x00;   // Co = 0, D/C = 0
....................     I2C_Start(SSD1306_STREAM);
0236:  BSF    03.5
0237:  BSF    11.0
0238:  BTFSC  11.0
0239:  GOTO   238
....................     I2C_Write(SSD1306_STREAM, _i2caddr);
023A:  BCF    03.5
023B:  MOVF   21,W
023C:  MOVWF  32
023D:  CALL   225
....................     I2C_Write(SSD1306_STREAM, control);
023E:  MOVF   31,W
023F:  MOVWF  32
0240:  CALL   225
....................     I2C_Write(SSD1306_STREAM, c);
0241:  MOVF   30,W
0242:  MOVWF  32
0243:  CALL   225
....................     I2C_Stop(SSD1306_STREAM);
0244:  BSF    03.5
0245:  BSF    11.2
0246:  BTFSC  11.2
0247:  GOTO   246
0248:  BCF    03.5
0249:  RETURN
.................... }
.................... 
.................... void SSD1306_Init(uint8_t vccstate = SSD1306_SWITCHCAPVCC, uint8_t i2caddr = SSD1306_I2C_ADDRESS) {
....................   _vccstate = vccstate;
024A:  MOVF   29,W
024B:  MOVWF  22
....................   _i2caddr  = i2caddr;
024C:  MOVF   2A,W
024D:  MOVWF  21
....................   #ifdef SSD1306_RST
....................     output_low(SSD1306_RST);
024E:  BSF    03.5
024F:  BCF    08.4
0250:  BCF    03.5
0251:  BCF    08.4
....................     output_drive(SSD1306_RST);
0252:  BSF    03.5
0253:  BCF    08.4
....................     delay_ms(10);
0254:  MOVLW  0A
0255:  BCF    03.5
0256:  MOVWF  2B
0257:  CALL   211
....................     output_high(SSD1306_RST);
0258:  BSF    03.5
0259:  BCF    08.4
025A:  BCF    03.5
025B:  BSF    08.4
....................   #endif
....................   // Init sequence
....................   ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
025C:  MOVLW  AE
025D:  MOVWF  30
025E:  CALL   235
....................   ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
025F:  MOVLW  D5
0260:  MOVWF  30
0261:  CALL   235
....................   ssd1306_command(0x80);                                  // the suggested ratio 0x80
0262:  MOVLW  80
0263:  MOVWF  30
0264:  CALL   235
.................... 
....................   ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
0265:  MOVLW  A8
0266:  MOVWF  30
0267:  CALL   235
....................   ssd1306_command(SSD1306_LCDHEIGHT - 1);
0268:  MOVLW  3F
0269:  MOVWF  30
026A:  CALL   235
.................... 
....................   ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
026B:  MOVLW  D3
026C:  MOVWF  30
026D:  CALL   235
....................   ssd1306_command(0x0);                                   // no offset
026E:  CLRF   30
026F:  CALL   235
....................   ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
0270:  MOVLW  40
0271:  MOVWF  30
0272:  CALL   235
....................   ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
0273:  MOVLW  8D
0274:  MOVWF  30
0275:  CALL   235
....................   if (vccstate == SSD1306_EXTERNALVCC)
0276:  DECFSZ 29,W
0277:  GOTO   27C
....................     { ssd1306_command(0x10); }
0278:  MOVLW  10
0279:  MOVWF  30
027A:  CALL   235
027B:  GOTO   27F
....................   else
....................     { ssd1306_command(0x14); }
027C:  MOVLW  14
027D:  MOVWF  30
027E:  CALL   235
....................   ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
027F:  MOVLW  20
0280:  MOVWF  30
0281:  CALL   235
....................   ssd1306_command(0x00);                                  // 0x0 act like ks0108
0282:  CLRF   30
0283:  CALL   235
....................   ssd1306_command(SSD1306_SEGREMAP | 0x1);
0284:  MOVLW  A1
0285:  MOVWF  30
0286:  CALL   235
....................   ssd1306_command(SSD1306_COMSCANDEC);
0287:  MOVLW  C8
0288:  MOVWF  30
0289:  CALL   235
.................... 
....................  #if defined SSD1306_128_32
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
....................   ssd1306_command(0x02);
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
....................   ssd1306_command(0x8F);
.................... 
.................... #elif defined SSD1306_128_64
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
028A:  MOVLW  DA
028B:  MOVWF  30
028C:  CALL   235
....................   ssd1306_command(0x12);
028D:  MOVLW  12
028E:  MOVWF  30
028F:  CALL   235
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
0290:  MOVLW  81
0291:  MOVWF  30
0292:  CALL   235
....................   if (vccstate == SSD1306_EXTERNALVCC)
0293:  DECFSZ 29,W
0294:  GOTO   299
....................     { ssd1306_command(0x9F); }
0295:  MOVLW  9F
0296:  MOVWF  30
0297:  CALL   235
0298:  GOTO   29C
....................   else
....................     { ssd1306_command(0xCF); }
0299:  MOVLW  CF
029A:  MOVWF  30
029B:  CALL   235
.................... 
.................... #elif defined SSD1306_96_16
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
....................   ssd1306_command(0x2);   //ada x12
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
....................   if (vccstate == SSD1306_EXTERNALVCC)
....................     { ssd1306_command(0x10); }
....................   else
....................     { ssd1306_command(0xAF); }
.................... 
.................... #endif
.................... 
....................   ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
029C:  MOVLW  D9
029D:  MOVWF  30
029E:  CALL   235
....................   if (vccstate == SSD1306_EXTERNALVCC)
029F:  DECFSZ 29,W
02A0:  GOTO   2A5
....................     { ssd1306_command(0x22); }
02A1:  MOVLW  22
02A2:  MOVWF  30
02A3:  CALL   235
02A4:  GOTO   2A8
....................   else
....................     { ssd1306_command(0xF1); }
02A5:  MOVLW  F1
02A6:  MOVWF  30
02A7:  CALL   235
....................   ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
02A8:  MOVLW  DB
02A9:  MOVWF  30
02AA:  CALL   235
....................   ssd1306_command(0x40);
02AB:  MOVLW  40
02AC:  MOVWF  30
02AD:  CALL   235
....................   ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
02AE:  MOVLW  A4
02AF:  MOVWF  30
02B0:  CALL   235
....................   ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
02B1:  MOVLW  A6
02B2:  MOVWF  30
02B3:  CALL   235
.................... 
....................   ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
02B4:  MOVLW  2E
02B5:  MOVWF  30
02B6:  CALL   235
.................... 
....................   ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
02B7:  MOVLW  AF
02B8:  MOVWF  30
02B9:  CALL   235
02BA:  BCF    0A.3
02BB:  BCF    0A.4
02BC:  GOTO   4DC (RETURN)
.................... }
.................... 
.................... void SSD1306_StartScrollRight(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_RIGHT_HORIZONTAL_SCROLL);
*
0402:  MOVLW  26
0403:  MOVWF  30
0404:  CALL   235
....................   ssd1306_command(0X00);
0405:  CLRF   30
0406:  CALL   235
....................   ssd1306_command(start);  // start page
0407:  MOVF   29,W
0408:  MOVWF  30
0409:  CALL   235
....................   ssd1306_command(0X00);
040A:  CLRF   30
040B:  CALL   235
....................   ssd1306_command(stop);   // end page
040C:  MOVF   2A,W
040D:  MOVWF  30
040E:  CALL   235
....................   ssd1306_command(0X00);
040F:  CLRF   30
0410:  CALL   235
....................   ssd1306_command(0XFF);
0411:  MOVLW  FF
0412:  MOVWF  30
0413:  CALL   235
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
0414:  MOVLW  2F
0415:  MOVWF  30
0416:  CALL   235
0417:  BCF    0A.3
0418:  BCF    0A.4
0419:  GOTO   507 (RETURN)
.................... }
.................... 
.................... void SSD1306_StartScrollLeft(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_LEFT_HORIZONTAL_SCROLL);
*
041E:  MOVLW  27
041F:  MOVWF  30
0420:  CALL   235
....................   ssd1306_command(0X00);
0421:  CLRF   30
0422:  CALL   235
....................   ssd1306_command(start);
0423:  MOVF   29,W
0424:  MOVWF  30
0425:  CALL   235
....................   ssd1306_command(0X00);
0426:  CLRF   30
0427:  CALL   235
....................   ssd1306_command(stop);
0428:  MOVF   2A,W
0429:  MOVWF  30
042A:  CALL   235
....................   ssd1306_command(0X00);
042B:  CLRF   30
042C:  CALL   235
....................   ssd1306_command(0XFF);
042D:  MOVLW  FF
042E:  MOVWF  30
042F:  CALL   235
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
0430:  MOVLW  2F
0431:  MOVWF  30
0432:  CALL   235
0433:  BCF    0A.3
0434:  BCF    0A.4
0435:  GOTO   513 (RETURN)
.................... }
.................... 
.................... void SSD1306_StartScrollDiagRight(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA);
0436:  MOVLW  A3
0437:  MOVWF  30
0438:  CALL   235
....................   ssd1306_command(0X00);
0439:  CLRF   30
043A:  CALL   235
....................   ssd1306_command(SSD1306_LCDHEIGHT);
043B:  MOVLW  40
043C:  MOVWF  30
043D:  CALL   235
....................   ssd1306_command(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL);
043E:  MOVLW  29
043F:  MOVWF  30
0440:  CALL   235
....................   ssd1306_command(0X00);
0441:  CLRF   30
0442:  CALL   235
....................   ssd1306_command(start);
0443:  MOVF   29,W
0444:  MOVWF  30
0445:  CALL   235
....................   ssd1306_command(0X00);
0446:  CLRF   30
0447:  CALL   235
....................   ssd1306_command(stop);
0448:  MOVF   2A,W
0449:  MOVWF  30
044A:  CALL   235
....................   ssd1306_command(0X01);
044B:  MOVLW  01
044C:  MOVWF  30
044D:  CALL   235
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
044E:  MOVLW  2F
044F:  MOVWF  30
0450:  CALL   235
0451:  BCF    0A.3
0452:  BCF    0A.4
0453:  GOTO   51F (RETURN)
.................... }
.................... 
.................... void SSD1306_StartScrollDiagLeft(uint8_t start, uint8_t stop) {
....................   ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA);
0454:  MOVLW  A3
0455:  MOVWF  30
0456:  CALL   235
....................   ssd1306_command(0X00);
0457:  CLRF   30
0458:  CALL   235
....................   ssd1306_command(SSD1306_LCDHEIGHT);
0459:  MOVLW  40
045A:  MOVWF  30
045B:  CALL   235
....................   ssd1306_command(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL);
045C:  MOVLW  2A
045D:  MOVWF  30
045E:  CALL   235
....................   ssd1306_command(0X00);
045F:  CLRF   30
0460:  CALL   235
....................   ssd1306_command(start);
0461:  MOVF   29,W
0462:  MOVWF  30
0463:  CALL   235
....................   ssd1306_command(0X00);
0464:  CLRF   30
0465:  CALL   235
....................   ssd1306_command(stop);
0466:  MOVF   2A,W
0467:  MOVWF  30
0468:  CALL   235
....................   ssd1306_command(0X01);
0469:  MOVLW  01
046A:  MOVWF  30
046B:  CALL   235
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL);
046C:  MOVLW  2F
046D:  MOVWF  30
046E:  CALL   235
046F:  BCF    0A.3
0470:  BCF    0A.4
0471:  GOTO   52B (RETURN)
.................... }
.................... 
.................... void SSD1306_StopScroll(void) {
....................   ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
*
041A:  MOVLW  2E
041B:  MOVWF  30
041C:  CALL   235
041D:  RETURN
.................... }
.................... 
.................... void SSD1306_Dim(int1 dim) {
....................   uint8_t contrast;
....................   if (dim)
....................     contrast = 0; // Dimmed display
....................   else {
....................     if (_vccstate == SSD1306_EXTERNALVCC)
....................       contrast = 0x9F;
....................     else
....................       contrast = 0xCF;
....................   }
....................   // the range of contrast to too small to be really useful
....................   // it is useful to dim the display
....................   ssd1306_command(SSD1306_SETCONTRAST);
....................   ssd1306_command(contrast);
.................... }
.................... 
.................... void SSD1306_SetTextWrap(int1 w) {
....................   wrap = w;
.................... }
.................... 
.................... void SSD1306_InvertDisplay(int1 i) {
....................   if (i)
....................     ssd1306_command(SSD1306_INVERTDISPLAY_);
....................   else
....................     ssd1306_command(SSD1306_NORMALDISPLAY);
.................... }
.................... 
.................... void SSD1306_GotoXY(uint8_t x, uint8_t y) {
....................   if((x > 21) || y > 8)
*
02EA:  MOVF   29,W
02EB:  SUBLW  15
02EC:  BTFSS  03.0
02ED:  GOTO   2F1
02EE:  MOVF   2A,W
02EF:  SUBLW  08
02F0:  BTFSS  03.0
....................     return;
02F1:  GOTO   2F6
....................   x_pos = x;
02F2:  MOVF   29,W
02F3:  MOVWF  23
....................   y_pos = y;
02F4:  MOVF   2A,W
02F5:  MOVWF  24
02F6:  RETURN
.................... }
.................... 
.................... void SSD1306_PutC(uint8_t c) {
....................   uint8_t font_c;
....................   if((c < ' ') || (c > '~'))
*
0331:  MOVF   2C,W
0332:  SUBLW  1F
0333:  BTFSC  03.0
0334:  GOTO   339
0335:  MOVF   2C,W
0336:  SUBLW  7E
0337:  BTFSC  03.0
0338:  GOTO   33B
....................     c = '?';
0339:  MOVLW  3F
033A:  MOVWF  2C
....................   ssd1306_command(SSD1306_COLUMNADDR);
033B:  MOVLW  21
033C:  MOVWF  30
033D:  CALL   235
....................   ssd1306_command(6 * (x_pos - 1));
033E:  MOVLW  01
033F:  SUBWF  23,W
0340:  MOVWF  2F
0341:  MOVLW  06
0342:  MOVWF  31
0343:  MOVF   2F,W
0344:  MOVWF  32
0345:  CALL   2F7
0346:  MOVF   78,W
0347:  MOVWF  2F
0348:  MOVWF  30
0349:  CALL   235
....................   ssd1306_command(6 * (x_pos - 1) + 4); // Column end address (127 = reset)
034A:  MOVLW  01
034B:  SUBWF  23,W
034C:  MOVWF  2F
034D:  MOVLW  06
034E:  MOVWF  31
034F:  MOVF   2F,W
0350:  MOVWF  32
0351:  CALL   2F7
0352:  MOVLW  04
0353:  ADDWF  78,W
0354:  MOVWF  2F
0355:  MOVWF  30
0356:  CALL   235
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
0357:  MOVLW  22
0358:  MOVWF  30
0359:  CALL   235
....................   ssd1306_command(y_pos - 1); // Page start address (0 = reset)
035A:  MOVLW  01
035B:  SUBWF  24,W
035C:  MOVWF  2F
035D:  MOVWF  30
035E:  CALL   235
....................   ssd1306_command(y_pos - 1); // Page end address
035F:  MOVLW  01
0360:  SUBWF  24,W
0361:  MOVWF  2F
0362:  MOVWF  30
0363:  CALL   235
....................   
....................   I2C_Start(SSD1306_STREAM);
0364:  BSF    03.5
0365:  BSF    11.0
0366:  BTFSC  11.0
0367:  GOTO   366
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
0368:  BCF    03.5
0369:  MOVF   21,W
036A:  MOVWF  32
036B:  CALL   225
....................   I2C_Write(SSD1306_STREAM, 0x40);
036C:  MOVLW  40
036D:  MOVWF  32
036E:  CALL   225
....................   
....................   for(uint8_t i = 0; i < 5; i++ ) {
036F:  CLRF   2E
0370:  MOVF   2E,W
0371:  SUBLW  04
0372:  BTFSS  03.0
0373:  GOTO   396
....................     if(c < 'S')
0374:  MOVF   2C,W
0375:  SUBLW  52
0376:  BTFSS  03.0
0377:  GOTO   385
....................       font_c = font[(c - 32) * 5 + i];
0378:  MOVLW  20
0379:  SUBWF  2C,W
037A:  MOVWF  30
037B:  MOVWF  31
037C:  MOVLW  05
037D:  MOVWF  32
037E:  CALL   2F7
037F:  MOVF   2E,W
0380:  ADDWF  78,W
0381:  CALL   004
0382:  MOVWF  78
0383:  MOVWF  2D
0384:  GOTO   391
....................     else
....................       font_c = font2[(c - 'S') * 5 + i];
0385:  MOVLW  53
0386:  SUBWF  2C,W
0387:  MOVWF  30
0388:  MOVWF  31
0389:  MOVLW  05
038A:  MOVWF  32
038B:  CALL   2F7
038C:  MOVF   2E,W
038D:  ADDWF  78,W
038E:  CALL   10A
038F:  MOVWF  78
0390:  MOVWF  2D
....................   
....................     I2C_Write(SSD1306_STREAM, font_c);
0391:  MOVF   2D,W
0392:  MOVWF  32
0393:  CALL   225
0394:  INCF   2E,F
0395:  GOTO   370
....................   }
....................   I2C_Stop(SSD1306_STREAM);
0396:  BSF    03.5
0397:  BSF    11.2
0398:  BTFSC  11.2
0399:  GOTO   398
.................... 
....................   x_pos = x_pos % 21 + 1;
039A:  BCF    03.5
039B:  MOVF   23,W
039C:  MOVWF  2F
039D:  MOVLW  15
039E:  MOVWF  30
039F:  CALL   31C
03A0:  MOVLW  01
03A1:  ADDWF  77,W
03A2:  MOVWF  23
....................   if (wrap && (x_pos == 1))
03A3:  BTFSS  25.0
03A4:  GOTO   3AB
03A5:  DECFSZ 23,W
03A6:  GOTO   3AB
....................     y_pos = y_pos % 8 + 1;
03A7:  MOVF   24,W
03A8:  ANDLW  07
03A9:  ADDLW  01
03AA:  MOVWF  24
03AB:  RETURN
.................... 
.................... }
.................... 
.................... void SSD1306_PutCustomC(char *c) {
....................   uint8_t line;
....................   ssd1306_command(SSD1306_COLUMNADDR);
....................   ssd1306_command(6 * (x_pos - 1));
....................   ssd1306_command(6 * (x_pos - 1) + 4); // Column end address (127 = reset)
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
....................   ssd1306_command(y_pos - 1); // Page start address (0 = reset)
....................   ssd1306_command(y_pos - 1); // Page end address
....................   
....................   I2C_Start(SSD1306_STREAM);
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
....................   I2C_Write(SSD1306_STREAM, 0x40);
....................   
....................   for(uint8_t i = 0; i < 5; i++ ) {
....................     line = c[i];
....................     I2C_Write(SSD1306_STREAM, line);
....................   }
....................   I2C_Stop(SSD1306_STREAM);
.................... 
....................   x_pos = x_pos % 21 + 1;
....................   if (wrap && (x_pos == 1))
....................     y_pos = y_pos % 8 + 1;
.................... 
.................... }
.................... 
.................... void SSD1306_ClearDisplay() {
.................... 
....................   ssd1306_command(SSD1306_COLUMNADDR);
*
02BD:  MOVLW  21
02BE:  MOVWF  30
02BF:  CALL   235
....................   ssd1306_command(0);    // Column start address
02C0:  CLRF   30
02C1:  CALL   235
....................   #if defined SSD1306_128_64 || defined SSD1306_128_32
....................   ssd1306_command(127);  // Column end address
02C2:  MOVLW  7F
02C3:  MOVWF  30
02C4:  CALL   235
....................   #else
....................     ssd1306_command(95); // Column end address
....................   #endif
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
02C5:  MOVLW  22
02C6:  MOVWF  30
02C7:  CALL   235
....................   ssd1306_command(0);   // Page start address (0 = reset)
02C8:  CLRF   30
02C9:  CALL   235
....................   #if defined SSD1306_128_64
....................   ssd1306_command(7);   // Page end address
02CA:  MOVLW  07
02CB:  MOVWF  30
02CC:  CALL   235
....................   #elif defined SSD1306_128_32
....................   ssd1306_command(3);   // Page end address
....................   #elif defined SSD1306_96_16
....................   ssd1306_command(1);   // Page end address
....................   #endif
.................... 
....................   I2C_Start(SSD1306_STREAM);
02CD:  BSF    03.5
02CE:  BSF    11.0
02CF:  BTFSC  11.0
02D0:  GOTO   2CF
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
02D1:  BCF    03.5
02D2:  MOVF   21,W
02D3:  MOVWF  32
02D4:  CALL   225
....................   I2C_Write(SSD1306_STREAM, 0x40);
02D5:  MOVLW  40
02D6:  MOVWF  32
02D7:  CALL   225
.................... 
....................   for(uint16_t i = 0; i < SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8; i++ )
02D8:  CLRF   2A
02D9:  CLRF   29
02DA:  MOVF   2A,W
02DB:  SUBLW  03
02DC:  BTFSS  03.0
02DD:  GOTO   2E4
....................     I2C_Write(SSD1306_STREAM, 0);
02DE:  CLRF   32
02DF:  CALL   225
02E0:  INCF   29,F
02E1:  BTFSC  03.2
02E2:  INCF   2A,F
02E3:  GOTO   2DA
.................... 
....................   I2C_Stop(SSD1306_STREAM);
02E4:  BSF    03.5
02E5:  BSF    11.2
02E6:  BTFSC  11.2
02E7:  GOTO   2E6
02E8:  BCF    03.5
02E9:  RETURN
.................... 
.................... }
.................... 
.................... void SSD1306_FillScreen() {
.................... 
....................   ssd1306_command(SSD1306_COLUMNADDR);
....................   ssd1306_command(0);    // Column start address
....................   #if defined SSD1306_128_64 || defined SSD1306_128_32
....................   ssd1306_command(127);  // Column end address
....................   #else
....................     ssd1306_command(95); // Column end address
....................   #endif
.................... 
....................   ssd1306_command(SSD1306_PAGEADDR);
....................   ssd1306_command(0);   // Page start address (0 = reset)
....................   #if defined SSD1306_128_64
....................   ssd1306_command(7);   // Page end address
....................   #elif defined SSD1306_128_32
....................   ssd1306_command(3);   // Page end address
....................   #elif defined SSD1306_96_16
....................   ssd1306_command(1);   // Page end address
....................   #endif
.................... 
....................   I2C_Start(SSD1306_STREAM);
....................   I2C_Write(SSD1306_STREAM, _i2caddr);
....................   I2C_Write(SSD1306_STREAM, 0x40);
.................... 
....................   for(uint16_t i = 0; i < SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8; i++ )
....................     I2C_Write(SSD1306_STREAM, 0xFF);
.................... 
....................   I2C_Stop(SSD1306_STREAM);
.................... 
.................... }
.................... 
.................... 
.................... int8 i = 0;
.................... 
.................... void main() {
*
04A9:  MOVF   03,W
04AA:  ANDLW  1F
04AB:  MOVWF  03
04AC:  MOVLW  FF
04AD:  MOVWF  20
04AE:  BSF    20.3
04AF:  MOVF   20,W
04B0:  BSF    03.5
04B1:  MOVWF  07
04B2:  BCF    03.5
04B3:  BSF    20.4
04B4:  MOVF   20,W
04B5:  BSF    03.5
04B6:  MOVWF  07
04B7:  MOVLW  0C
04B8:  MOVWF  13
04B9:  MOVLW  28
04BA:  BCF    03.5
04BB:  MOVWF  14
04BC:  BSF    03.5
04BD:  BCF    14.7
04BE:  BCF    14.6
04BF:  MOVLW  01
04C0:  BCF    03.5
04C1:  MOVWF  23
04C2:  MOVWF  24
04C3:  BSF    25.0
04C4:  CLRF   26
04C5:  CLRF   28
04C6:  CLRF   27
04C7:  BSF    03.5
04C8:  BSF    1F.0
04C9:  BSF    1F.1
04CA:  BSF    1F.2
04CB:  BCF    1F.3
04CC:  MOVLW  07
04CD:  MOVWF  1C
04CE:  BCF    03.7
....................   
....................   delay_ms(500);
04CF:  MOVLW  02
04D0:  BCF    03.5
04D1:  MOVWF  29
04D2:  MOVLW  FA
04D3:  MOVWF  2B
04D4:  CALL   211
04D5:  DECFSZ 29,F
04D6:  GOTO   4D2
....................   
....................   // Initialize the SSD1306 OLED with an I2C addr = 0x7A (default address)
....................   SSD1306_Init(SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS);
04D7:  MOVLW  02
04D8:  MOVWF  29
04D9:  MOVLW  7A
04DA:  MOVWF  2A
04DB:  GOTO   24A
....................   
....................   // clear the display
....................   SSD1306_ClearDisplay();
04DC:  CALL   2BD
.................... 
....................   SSD1306_GotoXY(1, 1);
04DD:  MOVLW  01
04DE:  MOVWF  29
04DF:  MOVWF  2A
04E0:  CALL   2EA
....................   SSD1306_PutC("Interfacing PIC16F877A with SSD1306 OLED display");
04E1:  MOVLW  EA
04E2:  BSF    03.6
04E3:  MOVWF  0D
04E4:  MOVLW  01
04E5:  MOVWF  0F
04E6:  BCF    03.6
04E7:  CALL   3AC
....................   delay_ms(5000);
04E8:  MOVLW  14
04E9:  MOVWF  29
04EA:  MOVLW  FA
04EB:  MOVWF  2B
04EC:  CALL   211
04ED:  DECFSZ 29,F
04EE:  GOTO   4EA
.................... 
....................   SSD1306_ClearDisplay();
04EF:  CALL   2BD
.................... 
....................   SSD1306_GotoXY(6, 2);
04F0:  MOVLW  06
04F1:  MOVWF  29
04F2:  MOVLW  02
04F3:  MOVWF  2A
04F4:  CALL   2EA
....................   SSD1306_PutC("Hello world!");
04F5:  MOVLW  03
04F6:  BSF    03.6
04F7:  MOVWF  0D
04F8:  MOVLW  02
04F9:  MOVWF  0F
04FA:  BCF    03.6
04FB:  CALL   3AC
....................   delay_ms(2000);
04FC:  MOVLW  08
04FD:  MOVWF  29
04FE:  MOVLW  FA
04FF:  MOVWF  2B
0500:  CALL   211
0501:  DECFSZ 29,F
0502:  GOTO   4FE
.................... 
....................   SSD1306_StartScrollRight(1, 1);
0503:  MOVLW  01
0504:  MOVWF  29
0505:  MOVWF  2A
0506:  GOTO   402
....................   delay_ms(3000);
0507:  MOVLW  0C
0508:  MOVWF  29
0509:  MOVLW  FA
050A:  MOVWF  2B
050B:  CALL   211
050C:  DECFSZ 29,F
050D:  GOTO   509
....................   SSD1306_StopScroll();
050E:  CALL   41A
....................   
....................   SSD1306_StartScrollLeft(1, 1);
050F:  MOVLW  01
0510:  MOVWF  29
0511:  MOVWF  2A
0512:  GOTO   41E
....................   delay_ms(3000);
0513:  MOVLW  0C
0514:  MOVWF  29
0515:  MOVLW  FA
0516:  MOVWF  2B
0517:  CALL   211
0518:  DECFSZ 29,F
0519:  GOTO   515
....................   SSD1306_StopScroll();
051A:  CALL   41A
.................... 
....................   SSD1306_StartScrollDiagRight(1, 1);
051B:  MOVLW  01
051C:  MOVWF  29
051D:  MOVWF  2A
051E:  GOTO   436
....................   delay_ms(3000);
051F:  MOVLW  0C
0520:  MOVWF  29
0521:  MOVLW  FA
0522:  MOVWF  2B
0523:  CALL   211
0524:  DECFSZ 29,F
0525:  GOTO   521
....................   SSD1306_StopScroll();
0526:  CALL   41A
.................... 
....................   SSD1306_StartScrollDiagLeft(1, 1);
0527:  MOVLW  01
0528:  MOVWF  29
0529:  MOVWF  2A
052A:  GOTO   454
....................   delay_ms(3000);
052B:  MOVLW  0C
052C:  MOVWF  29
052D:  MOVLW  FA
052E:  MOVWF  2B
052F:  CALL   211
0530:  DECFSZ 29,F
0531:  GOTO   52D
....................   SSD1306_StopScroll();
0532:  CALL   41A
.................... 
....................   delay_ms(3000);
0533:  MOVLW  0C
0534:  MOVWF  29
0535:  MOVLW  FA
0536:  MOVWF  2B
0537:  CALL   211
0538:  DECFSZ 29,F
0539:  GOTO   535
....................   SSD1306_ClearDisplay();
053A:  CALL   2BD
.................... 
....................   SSD1306_GotoXY(6, 2);
053B:  MOVLW  06
053C:  MOVWF  29
053D:  MOVLW  02
053E:  MOVWF  2A
053F:  CALL   2EA
....................   SSD1306_PutC("Hello world!");
0540:  MOVLW  0A
0541:  BSF    03.6
0542:  MOVWF  0D
0543:  MOVLW  02
0544:  MOVWF  0F
0545:  BCF    03.6
0546:  CALL   3AC
....................   delay_ms(2000);
0547:  MOVLW  08
0548:  MOVWF  29
0549:  MOVLW  FA
054A:  MOVWF  2B
054B:  CALL   211
054C:  DECFSZ 29,F
054D:  GOTO   549
.................... 
....................   while(TRUE) {
....................     SSD1306_GotoXY(10, 5);
054E:  MOVLW  0A
054F:  MOVWF  29
0550:  MOVLW  05
0551:  MOVWF  2A
0552:  CALL   2EA
....................     printf(SSD1306_PutC, "%03u", i++);
0553:  MOVF   26,W
0554:  INCF   26,F
0555:  MOVWF  29
0556:  MOVWF  2A
0557:  MOVLW  03
0558:  MOVWF  2B
0559:  GOTO   472
....................     delay_ms(500);
055A:  MOVLW  02
055B:  MOVWF  29
055C:  MOVLW  FA
055D:  MOVWF  2B
055E:  CALL   211
055F:  DECFSZ 29,F
0560:  GOTO   55C
0561:  GOTO   54E
....................   }
.................... 
.................... }
.................... // End of code
0562:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
